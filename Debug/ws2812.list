
ws2812.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050d0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08005190  08005190  00015190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052a8  080052a8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080052a8  080052a8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052a8  080052a8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052a8  080052a8  000152a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052ac  080052ac  000152ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080052b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  20000068  08005318  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  08005318  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d624  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f07  00000000  00000000  0002d6f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf8  00000000  00000000  0002f600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a3c  00000000  00000000  000302f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a9a5  00000000  00000000  00030d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f785  00000000  00000000  0004b6d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a78a  00000000  00000000  0005ae5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003824  00000000  00000000  000f55e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000f8e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005178 	.word	0x08005178

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08005178 	.word	0x08005178

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_lmul>:
 8000234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000236:	46ce      	mov	lr, r9
 8000238:	4699      	mov	r9, r3
 800023a:	0c03      	lsrs	r3, r0, #16
 800023c:	469c      	mov	ip, r3
 800023e:	0413      	lsls	r3, r2, #16
 8000240:	4647      	mov	r7, r8
 8000242:	0c1b      	lsrs	r3, r3, #16
 8000244:	001d      	movs	r5, r3
 8000246:	000e      	movs	r6, r1
 8000248:	4661      	mov	r1, ip
 800024a:	0404      	lsls	r4, r0, #16
 800024c:	0c24      	lsrs	r4, r4, #16
 800024e:	b580      	push	{r7, lr}
 8000250:	0007      	movs	r7, r0
 8000252:	0c10      	lsrs	r0, r2, #16
 8000254:	434b      	muls	r3, r1
 8000256:	4365      	muls	r5, r4
 8000258:	4341      	muls	r1, r0
 800025a:	4360      	muls	r0, r4
 800025c:	0c2c      	lsrs	r4, r5, #16
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	1820      	adds	r0, r4, r0
 8000262:	468c      	mov	ip, r1
 8000264:	4283      	cmp	r3, r0
 8000266:	d903      	bls.n	8000270 <__aeabi_lmul+0x3c>
 8000268:	2380      	movs	r3, #128	; 0x80
 800026a:	025b      	lsls	r3, r3, #9
 800026c:	4698      	mov	r8, r3
 800026e:	44c4      	add	ip, r8
 8000270:	4649      	mov	r1, r9
 8000272:	4379      	muls	r1, r7
 8000274:	4356      	muls	r6, r2
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	042d      	lsls	r5, r5, #16
 800027a:	0c2d      	lsrs	r5, r5, #16
 800027c:	1989      	adds	r1, r1, r6
 800027e:	4463      	add	r3, ip
 8000280:	0400      	lsls	r0, r0, #16
 8000282:	1940      	adds	r0, r0, r5
 8000284:	18c9      	adds	r1, r1, r3
 8000286:	bcc0      	pop	{r6, r7}
 8000288:	46b9      	mov	r9, r7
 800028a:	46b0      	mov	r8, r6
 800028c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <Reset_LEDs>:
static void MX_USART2_UART_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */

void Reset_LEDs(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
	for(char i=0;i<MAX_LED;i++)
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	2200      	movs	r2, #0
 800029a:	701a      	strb	r2, [r3, #0]
 800029c:	e022      	b.n	80002e4 <Reset_LEDs+0x54>
	{
		LED_Data[i][0] = 0;
 800029e:	1dfb      	adds	r3, r7, #7
 80002a0:	781a      	ldrb	r2, [r3, #0]
 80002a2:	4b15      	ldr	r3, [pc, #84]	; (80002f8 <Reset_LEDs+0x68>)
 80002a4:	0092      	lsls	r2, r2, #2
 80002a6:	2100      	movs	r1, #0
 80002a8:	54d1      	strb	r1, [r2, r3]
		LED_Data[i][1] = 0;
 80002aa:	1dfb      	adds	r3, r7, #7
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	4a12      	ldr	r2, [pc, #72]	; (80002f8 <Reset_LEDs+0x68>)
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	18d3      	adds	r3, r2, r3
 80002b4:	3301      	adds	r3, #1
 80002b6:	2200      	movs	r2, #0
 80002b8:	701a      	strb	r2, [r3, #0]
		LED_Data[i][2] = 0;
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	4a0e      	ldr	r2, [pc, #56]	; (80002f8 <Reset_LEDs+0x68>)
 80002c0:	009b      	lsls	r3, r3, #2
 80002c2:	18d3      	adds	r3, r2, r3
 80002c4:	3302      	adds	r3, #2
 80002c6:	2200      	movs	r2, #0
 80002c8:	701a      	strb	r2, [r3, #0]
		LED_Data[i][3] = 0;
 80002ca:	1dfb      	adds	r3, r7, #7
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	4a0a      	ldr	r2, [pc, #40]	; (80002f8 <Reset_LEDs+0x68>)
 80002d0:	009b      	lsls	r3, r3, #2
 80002d2:	18d3      	adds	r3, r2, r3
 80002d4:	3303      	adds	r3, #3
 80002d6:	2200      	movs	r2, #0
 80002d8:	701a      	strb	r2, [r3, #0]
	for(char i=0;i<MAX_LED;i++)
 80002da:	1dfb      	adds	r3, r7, #7
 80002dc:	781a      	ldrb	r2, [r3, #0]
 80002de:	1dfb      	adds	r3, r7, #7
 80002e0:	3201      	adds	r2, #1
 80002e2:	701a      	strb	r2, [r3, #0]
 80002e4:	1dfb      	adds	r3, r7, #7
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b02      	cmp	r3, #2
 80002ea:	d9d8      	bls.n	800029e <Reset_LEDs+0xe>
	}

}
 80002ec:	46c0      	nop			; (mov r8, r8)
 80002ee:	46c0      	nop			; (mov r8, r8)
 80002f0:	46bd      	mov	sp, r7
 80002f2:	b002      	add	sp, #8
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	46c0      	nop			; (mov r8, r8)
 80002f8:	20000198 	.word	0x20000198

080002fc <WS2812_Moving_Effect>:

void WS2812_Moving_Effect(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
	char red, green, blue;

	red = rand();
 8000302:	f003 ff19 	bl	8004138 <rand>
 8000306:	0002      	movs	r2, r0
 8000308:	1d7b      	adds	r3, r7, #5
 800030a:	701a      	strb	r2, [r3, #0]
	green = rand();
 800030c:	f003 ff14 	bl	8004138 <rand>
 8000310:	0002      	movs	r2, r0
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	701a      	strb	r2, [r3, #0]
	blue = rand();
 8000316:	f003 ff0f 	bl	8004138 <rand>
 800031a:	0002      	movs	r2, r0
 800031c:	1cfb      	adds	r3, r7, #3
 800031e:	701a      	strb	r2, [r3, #0]


	for(char i=0;i<MAX_LED;i++)
 8000320:	1dfb      	adds	r3, r7, #7
 8000322:	2200      	movs	r2, #0
 8000324:	701a      	strb	r2, [r3, #0]
 8000326:	e015      	b.n	8000354 <WS2812_Moving_Effect+0x58>
	{
		Reset_LEDs();
 8000328:	f7ff ffb2 	bl	8000290 <Reset_LEDs>
		LED_Set_Data(i,red,green,blue);
 800032c:	1dfb      	adds	r3, r7, #7
 800032e:	7818      	ldrb	r0, [r3, #0]
 8000330:	1d7b      	adds	r3, r7, #5
 8000332:	7819      	ldrb	r1, [r3, #0]
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	781a      	ldrb	r2, [r3, #0]
 8000338:	1cfb      	adds	r3, r7, #3
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	f000 f832 	bl	80003a4 <LED_Set_Data>
		WS2812_Write();
 8000340:	f000 f872 	bl	8000428 <WS2812_Write>
		HAL_Delay(200);
 8000344:	20c8      	movs	r0, #200	; 0xc8
 8000346:	f000 fd93 	bl	8000e70 <HAL_Delay>
	for(char i=0;i<MAX_LED;i++)
 800034a:	1dfb      	adds	r3, r7, #7
 800034c:	781a      	ldrb	r2, [r3, #0]
 800034e:	1dfb      	adds	r3, r7, #7
 8000350:	3201      	adds	r2, #1
 8000352:	701a      	strb	r2, [r3, #0]
 8000354:	1dfb      	adds	r3, r7, #7
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2b02      	cmp	r3, #2
 800035a:	d9e5      	bls.n	8000328 <WS2812_Moving_Effect+0x2c>
	}


	for(char i=MAX_LED;i>=0;i--)
 800035c:	1dbb      	adds	r3, r7, #6
 800035e:	2203      	movs	r2, #3
 8000360:	701a      	strb	r2, [r3, #0]
	{
		if(i>MAX_LED) break;
 8000362:	1dbb      	adds	r3, r7, #6
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	2b03      	cmp	r3, #3
 8000368:	d816      	bhi.n	8000398 <WS2812_Moving_Effect+0x9c>
		Reset_LEDs();
 800036a:	f7ff ff91 	bl	8000290 <Reset_LEDs>
		LED_Set_Data(i,red,green,blue);
 800036e:	1dbb      	adds	r3, r7, #6
 8000370:	7818      	ldrb	r0, [r3, #0]
 8000372:	1d7b      	adds	r3, r7, #5
 8000374:	7819      	ldrb	r1, [r3, #0]
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	781a      	ldrb	r2, [r3, #0]
 800037a:	1cfb      	adds	r3, r7, #3
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	f000 f811 	bl	80003a4 <LED_Set_Data>
		WS2812_Write();
 8000382:	f000 f851 	bl	8000428 <WS2812_Write>
		HAL_Delay(200);
 8000386:	20c8      	movs	r0, #200	; 0xc8
 8000388:	f000 fd72 	bl	8000e70 <HAL_Delay>
	for(char i=MAX_LED;i>=0;i--)
 800038c:	1dbb      	adds	r3, r7, #6
 800038e:	781a      	ldrb	r2, [r3, #0]
 8000390:	1dbb      	adds	r3, r7, #6
 8000392:	3a01      	subs	r2, #1
 8000394:	701a      	strb	r2, [r3, #0]
	{
 8000396:	e7e4      	b.n	8000362 <WS2812_Moving_Effect+0x66>
		if(i>MAX_LED) break;
 8000398:	46c0      	nop			; (mov r8, r8)
	}

}
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	46bd      	mov	sp, r7
 800039e:	b002      	add	sp, #8
 80003a0:	bd80      	pop	{r7, pc}
	...

080003a4 <LED_Set_Data>:



void LED_Set_Data(int LEDnumber, int Red, int Green, int Blue)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	60f8      	str	r0, [r7, #12]
 80003ac:	60b9      	str	r1, [r7, #8]
 80003ae:	607a      	str	r2, [r7, #4]
 80003b0:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnumber][0] = LEDnumber;
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	b2d9      	uxtb	r1, r3
 80003b6:	4b11      	ldr	r3, [pc, #68]	; (80003fc <LED_Set_Data+0x58>)
 80003b8:	68fa      	ldr	r2, [r7, #12]
 80003ba:	0092      	lsls	r2, r2, #2
 80003bc:	54d1      	strb	r1, [r2, r3]
	LED_Data[LEDnumber][1] = Green;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	b2d9      	uxtb	r1, r3
 80003c2:	4a0e      	ldr	r2, [pc, #56]	; (80003fc <LED_Set_Data+0x58>)
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	009b      	lsls	r3, r3, #2
 80003c8:	18d3      	adds	r3, r2, r3
 80003ca:	3301      	adds	r3, #1
 80003cc:	1c0a      	adds	r2, r1, #0
 80003ce:	701a      	strb	r2, [r3, #0]
	LED_Data[LEDnumber][2] = Red;
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	b2d9      	uxtb	r1, r3
 80003d4:	4a09      	ldr	r2, [pc, #36]	; (80003fc <LED_Set_Data+0x58>)
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	009b      	lsls	r3, r3, #2
 80003da:	18d3      	adds	r3, r2, r3
 80003dc:	3302      	adds	r3, #2
 80003de:	1c0a      	adds	r2, r1, #0
 80003e0:	701a      	strb	r2, [r3, #0]
	LED_Data[LEDnumber][3] = Blue;
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	b2d9      	uxtb	r1, r3
 80003e6:	4a05      	ldr	r2, [pc, #20]	; (80003fc <LED_Set_Data+0x58>)
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	18d3      	adds	r3, r2, r3
 80003ee:	3303      	adds	r3, #3
 80003f0:	1c0a      	adds	r2, r1, #0
 80003f2:	701a      	strb	r2, [r3, #0]
}
 80003f4:	46c0      	nop			; (mov r8, r8)
 80003f6:	46bd      	mov	sp, r7
 80003f8:	b004      	add	sp, #16
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20000198 	.word	0x20000198

08000400 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000408:	4b05      	ldr	r3, [pc, #20]	; (8000420 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 800040a:	2100      	movs	r1, #0
 800040c:	0018      	movs	r0, r3
 800040e:	f002 f9f3 	bl	80027f8 <HAL_TIM_PWM_Stop_DMA>
	sendflag = 1;
 8000412:	4b04      	ldr	r3, [pc, #16]	; (8000424 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000414:	2201      	movs	r2, #1
 8000416:	701a      	strb	r2, [r3, #0]
}
 8000418:	46c0      	nop			; (mov r8, r8)
 800041a:	46bd      	mov	sp, r7
 800041c:	b002      	add	sp, #8
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20000084 	.word	0x20000084
 8000424:	2000029c 	.word	0x2000029c

08000428 <WS2812_Write>:

void WS2812_Write(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
	unsigned int index = 0;
 800042e:	2300      	movs	r3, #0
 8000430:	60fb      	str	r3, [r7, #12]

	for(int i=0;i<MAX_LED;i++)
 8000432:	2300      	movs	r3, #0
 8000434:	60bb      	str	r3, [r7, #8]
 8000436:	e03b      	b.n	80004b0 <WS2812_Write+0x88>
	{
		color = ( (LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]) );
 8000438:	4a31      	ldr	r2, [pc, #196]	; (8000500 <WS2812_Write+0xd8>)
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	18d3      	adds	r3, r2, r3
 8000440:	3301      	adds	r3, #1
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	041a      	lsls	r2, r3, #16
 8000446:	492e      	ldr	r1, [pc, #184]	; (8000500 <WS2812_Write+0xd8>)
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	18cb      	adds	r3, r1, r3
 800044e:	3302      	adds	r3, #2
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	021b      	lsls	r3, r3, #8
 8000454:	4313      	orrs	r3, r2
 8000456:	492a      	ldr	r1, [pc, #168]	; (8000500 <WS2812_Write+0xd8>)
 8000458:	68ba      	ldr	r2, [r7, #8]
 800045a:	0092      	lsls	r2, r2, #2
 800045c:	188a      	adds	r2, r1, r2
 800045e:	3203      	adds	r2, #3
 8000460:	7812      	ldrb	r2, [r2, #0]
 8000462:	4313      	orrs	r3, r2
 8000464:	001a      	movs	r2, r3
 8000466:	4b27      	ldr	r3, [pc, #156]	; (8000504 <WS2812_Write+0xdc>)
 8000468:	601a      	str	r2, [r3, #0]

		for(int i=23;i>=0;i--)
 800046a:	2317      	movs	r3, #23
 800046c:	607b      	str	r3, [r7, #4]
 800046e:	e019      	b.n	80004a4 <WS2812_Write+0x7c>
		{
			if(color&(1<<i))
 8000470:	2201      	movs	r2, #1
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	409a      	lsls	r2, r3
 8000476:	0013      	movs	r3, r2
 8000478:	001a      	movs	r2, r3
 800047a:	4b22      	ldr	r3, [pc, #136]	; (8000504 <WS2812_Write+0xdc>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4013      	ands	r3, r2
 8000480:	d005      	beq.n	800048e <WS2812_Write+0x66>
			{
				pwmData[index] = 40;
 8000482:	4b21      	ldr	r3, [pc, #132]	; (8000508 <WS2812_Write+0xe0>)
 8000484:	68fa      	ldr	r2, [r7, #12]
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	2128      	movs	r1, #40	; 0x28
 800048a:	52d1      	strh	r1, [r2, r3]
 800048c:	e004      	b.n	8000498 <WS2812_Write+0x70>
			}
			else
			{
				pwmData[index] = 20;
 800048e:	4b1e      	ldr	r3, [pc, #120]	; (8000508 <WS2812_Write+0xe0>)
 8000490:	68fa      	ldr	r2, [r7, #12]
 8000492:	0052      	lsls	r2, r2, #1
 8000494:	2114      	movs	r1, #20
 8000496:	52d1      	strh	r1, [r2, r3]
			}

			index++;
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	3301      	adds	r3, #1
 800049c:	60fb      	str	r3, [r7, #12]
		for(int i=23;i>=0;i--)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	3b01      	subs	r3, #1
 80004a2:	607b      	str	r3, [r7, #4]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	dae2      	bge.n	8000470 <WS2812_Write+0x48>
	for(int i=0;i<MAX_LED;i++)
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	3301      	adds	r3, #1
 80004ae:	60bb      	str	r3, [r7, #8]
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	2b02      	cmp	r3, #2
 80004b4:	ddc0      	ble.n	8000438 <WS2812_Write+0x10>
		}
	}

	for(int i=0;i<50;i++)
 80004b6:	2300      	movs	r3, #0
 80004b8:	603b      	str	r3, [r7, #0]
 80004ba:	e00a      	b.n	80004d2 <WS2812_Write+0xaa>
	{
		pwmData[index] = 0;
 80004bc:	4b12      	ldr	r3, [pc, #72]	; (8000508 <WS2812_Write+0xe0>)
 80004be:	68fa      	ldr	r2, [r7, #12]
 80004c0:	0052      	lsls	r2, r2, #1
 80004c2:	2100      	movs	r1, #0
 80004c4:	52d1      	strh	r1, [r2, r3]
		index++;
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	3301      	adds	r3, #1
 80004ca:	60fb      	str	r3, [r7, #12]
	for(int i=0;i<50;i++)
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	3301      	adds	r3, #1
 80004d0:	603b      	str	r3, [r7, #0]
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	2b31      	cmp	r3, #49	; 0x31
 80004d6:	ddf1      	ble.n	80004bc <WS2812_Write+0x94>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, index);
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	b29b      	uxth	r3, r3
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <WS2812_Write+0xe0>)
 80004de:	480b      	ldr	r0, [pc, #44]	; (800050c <WS2812_Write+0xe4>)
 80004e0:	2100      	movs	r1, #0
 80004e2:	f001 ffd3 	bl	800248c <HAL_TIM_PWM_Start_DMA>
	while(!sendflag);
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	4b09      	ldr	r3, [pc, #36]	; (8000510 <WS2812_Write+0xe8>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d0fb      	beq.n	80004e8 <WS2812_Write+0xc0>
	sendflag = 0;
 80004f0:	4b07      	ldr	r3, [pc, #28]	; (8000510 <WS2812_Write+0xe8>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	701a      	strb	r2, [r3, #0]
}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b004      	add	sp, #16
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	20000198 	.word	0x20000198
 8000504:	20000298 	.word	0x20000298
 8000508:	200001a4 	.word	0x200001a4
 800050c:	20000084 	.word	0x20000084
 8000510:	2000029c 	.word	0x2000029c

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fc46 	bl	8000da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f83d 	bl	800059a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f99c 	bl	800085c <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 f97c 	bl	8000820 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000528:	f000 f94a 	bl	80007c0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800052c:	f000 f894 	bl	8000658 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  LED_Set_Data(0,255,0,0);
 8000530:	2300      	movs	r3, #0
 8000532:	2200      	movs	r2, #0
 8000534:	21ff      	movs	r1, #255	; 0xff
 8000536:	2000      	movs	r0, #0
 8000538:	f7ff ff34 	bl	80003a4 <LED_Set_Data>
  LED_Set_Data(1,0,255,0);
 800053c:	2300      	movs	r3, #0
 800053e:	22ff      	movs	r2, #255	; 0xff
 8000540:	2100      	movs	r1, #0
 8000542:	2001      	movs	r0, #1
 8000544:	f7ff ff2e 	bl	80003a4 <LED_Set_Data>
  LED_Set_Data(2,0,0,255);
 8000548:	23ff      	movs	r3, #255	; 0xff
 800054a:	2200      	movs	r2, #0
 800054c:	2100      	movs	r1, #0
 800054e:	2002      	movs	r0, #2
 8000550:	f7ff ff28 	bl	80003a4 <LED_Set_Data>
  LED_Set_Data(3,100,50,25);
 8000554:	2319      	movs	r3, #25
 8000556:	2232      	movs	r2, #50	; 0x32
 8000558:	2164      	movs	r1, #100	; 0x64
 800055a:	2003      	movs	r0, #3
 800055c:	f7ff ff22 	bl	80003a4 <LED_Set_Data>
  LED_Set_Data(4,75,69,99);
 8000560:	2363      	movs	r3, #99	; 0x63
 8000562:	2245      	movs	r2, #69	; 0x45
 8000564:	214b      	movs	r1, #75	; 0x4b
 8000566:	2004      	movs	r0, #4
 8000568:	f7ff ff1c 	bl	80003a4 <LED_Set_Data>
  LED_Set_Data(5,15,120,50);
 800056c:	2332      	movs	r3, #50	; 0x32
 800056e:	2278      	movs	r2, #120	; 0x78
 8000570:	210f      	movs	r1, #15
 8000572:	2005      	movs	r0, #5
 8000574:	f7ff ff16 	bl	80003a4 <LED_Set_Data>
  LED_Set_Data(6,200,55,100);
 8000578:	2364      	movs	r3, #100	; 0x64
 800057a:	2237      	movs	r2, #55	; 0x37
 800057c:	21c8      	movs	r1, #200	; 0xc8
 800057e:	2006      	movs	r0, #6
 8000580:	f7ff ff10 	bl	80003a4 <LED_Set_Data>
  LED_Set_Data(7,50,50,50);
 8000584:	2332      	movs	r3, #50	; 0x32
 8000586:	2232      	movs	r2, #50	; 0x32
 8000588:	2132      	movs	r1, #50	; 0x32
 800058a:	2007      	movs	r0, #7
 800058c:	f7ff ff0a 	bl	80003a4 <LED_Set_Data>
  WS2812_Write();
 8000590:	f7ff ff4a 	bl	8000428 <WS2812_Write>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  WS2812_Moving_Effect();
 8000594:	f7ff feb2 	bl	80002fc <WS2812_Moving_Effect>
 8000598:	e7fc      	b.n	8000594 <main+0x80>

0800059a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059a:	b590      	push	{r4, r7, lr}
 800059c:	b099      	sub	sp, #100	; 0x64
 800059e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a0:	242c      	movs	r4, #44	; 0x2c
 80005a2:	193b      	adds	r3, r7, r4
 80005a4:	0018      	movs	r0, r3
 80005a6:	2334      	movs	r3, #52	; 0x34
 80005a8:	001a      	movs	r2, r3
 80005aa:	2100      	movs	r1, #0
 80005ac:	f003 ff12 	bl	80043d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	231c      	movs	r3, #28
 80005b2:	18fb      	adds	r3, r7, r3
 80005b4:	0018      	movs	r0, r3
 80005b6:	2310      	movs	r3, #16
 80005b8:	001a      	movs	r2, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	f003 ff0a 	bl	80043d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005c0:	003b      	movs	r3, r7
 80005c2:	0018      	movs	r0, r3
 80005c4:	231c      	movs	r3, #28
 80005c6:	001a      	movs	r2, r3
 80005c8:	2100      	movs	r1, #0
 80005ca:	f003 ff03 	bl	80043d4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ce:	0021      	movs	r1, r4
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2201      	movs	r2, #1
 80005d4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2205      	movs	r2, #5
 80005da:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2202      	movs	r2, #2
 80005e0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2280      	movs	r2, #128	; 0x80
 80005e6:	0252      	lsls	r2, r2, #9
 80005e8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	22a0      	movs	r2, #160	; 0xa0
 80005ee:	0392      	lsls	r2, r2, #14
 80005f0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2201      	movs	r2, #1
 80005f6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	0018      	movs	r0, r3
 80005fc:	f001 f8ae 	bl	800175c <HAL_RCC_OscConfig>
 8000600:	1e03      	subs	r3, r0, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000604:	f000 f994 	bl	8000930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000608:	211c      	movs	r1, #28
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2207      	movs	r2, #7
 800060e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2202      	movs	r2, #2
 8000614:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2101      	movs	r1, #1
 8000626:	0018      	movs	r0, r3
 8000628:	f001 fc1e 	bl	8001e68 <HAL_RCC_ClockConfig>
 800062c:	1e03      	subs	r3, r0, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000630:	f000 f97e 	bl	8000930 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000634:	003b      	movs	r3, r7
 8000636:	2202      	movs	r2, #2
 8000638:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800063a:	003b      	movs	r3, r7
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000640:	003b      	movs	r3, r7
 8000642:	0018      	movs	r0, r3
 8000644:	f001 fd7c 	bl	8002140 <HAL_RCCEx_PeriphCLKConfig>
 8000648:	1e03      	subs	r3, r0, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800064c:	f000 f970 	bl	8000930 <Error_Handler>
  }
}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	b019      	add	sp, #100	; 0x64
 8000656:	bd90      	pop	{r4, r7, pc}

08000658 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b096      	sub	sp, #88	; 0x58
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800065e:	2348      	movs	r3, #72	; 0x48
 8000660:	18fb      	adds	r3, r7, r3
 8000662:	0018      	movs	r0, r3
 8000664:	2310      	movs	r3, #16
 8000666:	001a      	movs	r2, r3
 8000668:	2100      	movs	r1, #0
 800066a:	f003 feb3 	bl	80043d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800066e:	2340      	movs	r3, #64	; 0x40
 8000670:	18fb      	adds	r3, r7, r3
 8000672:	0018      	movs	r0, r3
 8000674:	2308      	movs	r3, #8
 8000676:	001a      	movs	r2, r3
 8000678:	2100      	movs	r1, #0
 800067a:	f003 feab 	bl	80043d4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800067e:	2324      	movs	r3, #36	; 0x24
 8000680:	18fb      	adds	r3, r7, r3
 8000682:	0018      	movs	r0, r3
 8000684:	231c      	movs	r3, #28
 8000686:	001a      	movs	r2, r3
 8000688:	2100      	movs	r1, #0
 800068a:	f003 fea3 	bl	80043d4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	0018      	movs	r0, r3
 8000692:	2320      	movs	r3, #32
 8000694:	001a      	movs	r2, r3
 8000696:	2100      	movs	r1, #0
 8000698:	f003 fe9c 	bl	80043d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800069c:	4b46      	ldr	r3, [pc, #280]	; (80007b8 <MX_TIM1_Init+0x160>)
 800069e:	4a47      	ldr	r2, [pc, #284]	; (80007bc <MX_TIM1_Init+0x164>)
 80006a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006a2:	4b45      	ldr	r3, [pc, #276]	; (80007b8 <MX_TIM1_Init+0x160>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a8:	4b43      	ldr	r3, [pc, #268]	; (80007b8 <MX_TIM1_Init+0x160>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60-1;
 80006ae:	4b42      	ldr	r3, [pc, #264]	; (80007b8 <MX_TIM1_Init+0x160>)
 80006b0:	223b      	movs	r2, #59	; 0x3b
 80006b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b4:	4b40      	ldr	r3, [pc, #256]	; (80007b8 <MX_TIM1_Init+0x160>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006ba:	4b3f      	ldr	r3, [pc, #252]	; (80007b8 <MX_TIM1_Init+0x160>)
 80006bc:	2200      	movs	r2, #0
 80006be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c0:	4b3d      	ldr	r3, [pc, #244]	; (80007b8 <MX_TIM1_Init+0x160>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006c6:	4b3c      	ldr	r3, [pc, #240]	; (80007b8 <MX_TIM1_Init+0x160>)
 80006c8:	0018      	movs	r0, r3
 80006ca:	f001 fe37 	bl	800233c <HAL_TIM_Base_Init>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80006d2:	f000 f92d 	bl	8000930 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d6:	2148      	movs	r1, #72	; 0x48
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2280      	movs	r2, #128	; 0x80
 80006dc:	0152      	lsls	r2, r2, #5
 80006de:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006e0:	187a      	adds	r2, r7, r1
 80006e2:	4b35      	ldr	r3, [pc, #212]	; (80007b8 <MX_TIM1_Init+0x160>)
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f002 fb42 	bl	8002d70 <HAL_TIM_ConfigClockSource>
 80006ec:	1e03      	subs	r3, r0, #0
 80006ee:	d001      	beq.n	80006f4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80006f0:	f000 f91e 	bl	8000930 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006f4:	4b30      	ldr	r3, [pc, #192]	; (80007b8 <MX_TIM1_Init+0x160>)
 80006f6:	0018      	movs	r0, r3
 80006f8:	f001 fe70 	bl	80023dc <HAL_TIM_PWM_Init>
 80006fc:	1e03      	subs	r3, r0, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000700:	f000 f916 	bl	8000930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000704:	2140      	movs	r1, #64	; 0x40
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2200      	movs	r2, #0
 8000710:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000712:	187a      	adds	r2, r7, r1
 8000714:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <MX_TIM1_Init+0x160>)
 8000716:	0011      	movs	r1, r2
 8000718:	0018      	movs	r0, r3
 800071a:	f003 f83b 	bl	8003794 <HAL_TIMEx_MasterConfigSynchronization>
 800071e:	1e03      	subs	r3, r0, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000722:	f000 f905 	bl	8000930 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000726:	2124      	movs	r1, #36	; 0x24
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2260      	movs	r2, #96	; 0x60
 800072c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2200      	movs	r2, #0
 8000732:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2200      	movs	r2, #0
 800074a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2200      	movs	r2, #0
 8000750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000752:	1879      	adds	r1, r7, r1
 8000754:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_TIM1_Init+0x160>)
 8000756:	2200      	movs	r2, #0
 8000758:	0018      	movs	r0, r3
 800075a:	f002 fa43 	bl	8002be4 <HAL_TIM_PWM_ConfigChannel>
 800075e:	1e03      	subs	r3, r0, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000762:	f000 f8e5 	bl	8000930 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2200      	movs	r2, #0
 8000770:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2280      	movs	r2, #128	; 0x80
 8000788:	0192      	lsls	r2, r2, #6
 800078a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000792:	1d3a      	adds	r2, r7, #4
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <MX_TIM1_Init+0x160>)
 8000796:	0011      	movs	r1, r2
 8000798:	0018      	movs	r0, r3
 800079a:	f003 f859 	bl	8003850 <HAL_TIMEx_ConfigBreakDeadTime>
 800079e:	1e03      	subs	r3, r0, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 80007a2:	f000 f8c5 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007a6:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <MX_TIM1_Init+0x160>)
 80007a8:	0018      	movs	r0, r3
 80007aa:	f000 f947 	bl	8000a3c <HAL_TIM_MspPostInit>

}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b016      	add	sp, #88	; 0x58
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	20000084 	.word	0x20000084
 80007bc:	40012c00 	.word	0x40012c00

080007c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007c6:	4a15      	ldr	r2, [pc, #84]	; (800081c <MX_USART2_UART_Init+0x5c>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007cc:	2296      	movs	r2, #150	; 0x96
 80007ce:	0212      	lsls	r2, r2, #8
 80007d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007fe:	2200      	movs	r2, #0
 8000800:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <MX_USART2_UART_Init+0x58>)
 8000804:	0018      	movs	r0, r3
 8000806:	f003 f891 	bl	800392c <HAL_UART_Init>
 800080a:	1e03      	subs	r3, r0, #0
 800080c:	d001      	beq.n	8000812 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800080e:	f000 f88f 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000110 	.word	0x20000110
 800081c:	40004400 	.word	0x40004400

08000820 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_DMA_Init+0x38>)
 8000828:	695a      	ldr	r2, [r3, #20]
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_DMA_Init+0x38>)
 800082c:	2101      	movs	r1, #1
 800082e:	430a      	orrs	r2, r1
 8000830:	615a      	str	r2, [r3, #20]
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_DMA_Init+0x38>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	2201      	movs	r2, #1
 8000838:	4013      	ands	r3, r2
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2100      	movs	r1, #0
 8000842:	200a      	movs	r0, #10
 8000844:	f000 fbe4 	bl	8001010 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000848:	200a      	movs	r0, #10
 800084a:	f000 fbf6 	bl	800103a <HAL_NVIC_EnableIRQ>

}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	b002      	add	sp, #8
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	40021000 	.word	0x40021000

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b089      	sub	sp, #36	; 0x24
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	240c      	movs	r4, #12
 8000864:	193b      	adds	r3, r7, r4
 8000866:	0018      	movs	r0, r3
 8000868:	2314      	movs	r3, #20
 800086a:	001a      	movs	r2, r3
 800086c:	2100      	movs	r1, #0
 800086e:	f003 fdb1 	bl	80043d4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	4b2d      	ldr	r3, [pc, #180]	; (8000928 <MX_GPIO_Init+0xcc>)
 8000874:	695a      	ldr	r2, [r3, #20]
 8000876:	4b2c      	ldr	r3, [pc, #176]	; (8000928 <MX_GPIO_Init+0xcc>)
 8000878:	2180      	movs	r1, #128	; 0x80
 800087a:	0309      	lsls	r1, r1, #12
 800087c:	430a      	orrs	r2, r1
 800087e:	615a      	str	r2, [r3, #20]
 8000880:	4b29      	ldr	r3, [pc, #164]	; (8000928 <MX_GPIO_Init+0xcc>)
 8000882:	695a      	ldr	r2, [r3, #20]
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	031b      	lsls	r3, r3, #12
 8000888:	4013      	ands	r3, r2
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800088e:	4b26      	ldr	r3, [pc, #152]	; (8000928 <MX_GPIO_Init+0xcc>)
 8000890:	695a      	ldr	r2, [r3, #20]
 8000892:	4b25      	ldr	r3, [pc, #148]	; (8000928 <MX_GPIO_Init+0xcc>)
 8000894:	2180      	movs	r1, #128	; 0x80
 8000896:	03c9      	lsls	r1, r1, #15
 8000898:	430a      	orrs	r2, r1
 800089a:	615a      	str	r2, [r3, #20]
 800089c:	4b22      	ldr	r3, [pc, #136]	; (8000928 <MX_GPIO_Init+0xcc>)
 800089e:	695a      	ldr	r2, [r3, #20]
 80008a0:	2380      	movs	r3, #128	; 0x80
 80008a2:	03db      	lsls	r3, r3, #15
 80008a4:	4013      	ands	r3, r2
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <MX_GPIO_Init+0xcc>)
 80008ac:	695a      	ldr	r2, [r3, #20]
 80008ae:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <MX_GPIO_Init+0xcc>)
 80008b0:	2180      	movs	r1, #128	; 0x80
 80008b2:	0289      	lsls	r1, r1, #10
 80008b4:	430a      	orrs	r2, r1
 80008b6:	615a      	str	r2, [r3, #20]
 80008b8:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <MX_GPIO_Init+0xcc>)
 80008ba:	695a      	ldr	r2, [r3, #20]
 80008bc:	2380      	movs	r3, #128	; 0x80
 80008be:	029b      	lsls	r3, r3, #10
 80008c0:	4013      	ands	r3, r2
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008c6:	2390      	movs	r3, #144	; 0x90
 80008c8:	05db      	lsls	r3, r3, #23
 80008ca:	2200      	movs	r2, #0
 80008cc:	2120      	movs	r1, #32
 80008ce:	0018      	movs	r0, r3
 80008d0:	f000 ff26 	bl	8001720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d4:	193b      	adds	r3, r7, r4
 80008d6:	2280      	movs	r2, #128	; 0x80
 80008d8:	0192      	lsls	r2, r2, #6
 80008da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	2284      	movs	r2, #132	; 0x84
 80008e0:	0392      	lsls	r2, r2, #14
 80008e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	4a0f      	ldr	r2, [pc, #60]	; (800092c <MX_GPIO_Init+0xd0>)
 80008ee:	0019      	movs	r1, r3
 80008f0:	0010      	movs	r0, r2
 80008f2:	f000 fd9d 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008f6:	0021      	movs	r1, r4
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2220      	movs	r2, #32
 80008fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	2201      	movs	r2, #1
 8000902:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	187b      	adds	r3, r7, r1
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	187b      	adds	r3, r7, r1
 800090c:	2200      	movs	r2, #0
 800090e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000910:	187a      	adds	r2, r7, r1
 8000912:	2390      	movs	r3, #144	; 0x90
 8000914:	05db      	lsls	r3, r3, #23
 8000916:	0011      	movs	r1, r2
 8000918:	0018      	movs	r0, r3
 800091a:	f000 fd89 	bl	8001430 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b009      	add	sp, #36	; 0x24
 8000924:	bd90      	pop	{r4, r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	40021000 	.word	0x40021000
 800092c:	48000800 	.word	0x48000800

08000930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000934:	b672      	cpsid	i
}
 8000936:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000938:	e7fe      	b.n	8000938 <Error_Handler+0x8>
	...

0800093c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <HAL_MspInit+0x44>)
 8000944:	699a      	ldr	r2, [r3, #24]
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <HAL_MspInit+0x44>)
 8000948:	2101      	movs	r1, #1
 800094a:	430a      	orrs	r2, r1
 800094c:	619a      	str	r2, [r3, #24]
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <HAL_MspInit+0x44>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	2201      	movs	r2, #1
 8000954:	4013      	ands	r3, r2
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <HAL_MspInit+0x44>)
 800095c:	69da      	ldr	r2, [r3, #28]
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <HAL_MspInit+0x44>)
 8000960:	2180      	movs	r1, #128	; 0x80
 8000962:	0549      	lsls	r1, r1, #21
 8000964:	430a      	orrs	r2, r1
 8000966:	61da      	str	r2, [r3, #28]
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <HAL_MspInit+0x44>)
 800096a:	69da      	ldr	r2, [r3, #28]
 800096c:	2380      	movs	r3, #128	; 0x80
 800096e:	055b      	lsls	r3, r3, #21
 8000970:	4013      	ands	r3, r2
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	46bd      	mov	sp, r7
 800097a:	b002      	add	sp, #8
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	40021000 	.word	0x40021000

08000984 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a26      	ldr	r2, [pc, #152]	; (8000a2c <HAL_TIM_Base_MspInit+0xa8>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d145      	bne.n	8000a22 <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000996:	4b26      	ldr	r3, [pc, #152]	; (8000a30 <HAL_TIM_Base_MspInit+0xac>)
 8000998:	699a      	ldr	r2, [r3, #24]
 800099a:	4b25      	ldr	r3, [pc, #148]	; (8000a30 <HAL_TIM_Base_MspInit+0xac>)
 800099c:	2180      	movs	r1, #128	; 0x80
 800099e:	0109      	lsls	r1, r1, #4
 80009a0:	430a      	orrs	r2, r1
 80009a2:	619a      	str	r2, [r3, #24]
 80009a4:	4b22      	ldr	r3, [pc, #136]	; (8000a30 <HAL_TIM_Base_MspInit+0xac>)
 80009a6:	699a      	ldr	r2, [r3, #24]
 80009a8:	2380      	movs	r3, #128	; 0x80
 80009aa:	011b      	lsls	r3, r3, #4
 80009ac:	4013      	ands	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80009b2:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <HAL_TIM_Base_MspInit+0xb0>)
 80009b4:	4a20      	ldr	r2, [pc, #128]	; (8000a38 <HAL_TIM_Base_MspInit+0xb4>)
 80009b6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009b8:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <HAL_TIM_Base_MspInit+0xb0>)
 80009ba:	2210      	movs	r2, #16
 80009bc:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009be:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <HAL_TIM_Base_MspInit+0xb0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80009c4:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <HAL_TIM_Base_MspInit+0xb0>)
 80009c6:	2280      	movs	r2, #128	; 0x80
 80009c8:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009ca:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <HAL_TIM_Base_MspInit+0xb0>)
 80009cc:	2280      	movs	r2, #128	; 0x80
 80009ce:	0052      	lsls	r2, r2, #1
 80009d0:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <HAL_TIM_Base_MspInit+0xb0>)
 80009d4:	2280      	movs	r2, #128	; 0x80
 80009d6:	00d2      	lsls	r2, r2, #3
 80009d8:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80009da:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <HAL_TIM_Base_MspInit+0xb0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <HAL_TIM_Base_MspInit+0xb0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <HAL_TIM_Base_MspInit+0xb0>)
 80009e8:	0018      	movs	r0, r3
 80009ea:	f000 fb43 	bl	8001074 <HAL_DMA_Init>
 80009ee:	1e03      	subs	r3, r0, #0
 80009f0:	d001      	beq.n	80009f6 <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 80009f2:	f7ff ff9d 	bl	8000930 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <HAL_TIM_Base_MspInit+0xb0>)
 80009fa:	625a      	str	r2, [r3, #36]	; 0x24
 80009fc:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <HAL_TIM_Base_MspInit+0xb0>)
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	625a      	str	r2, [r3, #36]	; 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	200d      	movs	r0, #13
 8000a08:	f000 fb02 	bl	8001010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000a0c:	200d      	movs	r0, #13
 8000a0e:	f000 fb14 	bl	800103a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	200e      	movs	r0, #14
 8000a18:	f000 fafa 	bl	8001010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000a1c:	200e      	movs	r0, #14
 8000a1e:	f000 fb0c 	bl	800103a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b004      	add	sp, #16
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	40012c00 	.word	0x40012c00
 8000a30:	40021000 	.word	0x40021000
 8000a34:	200000cc 	.word	0x200000cc
 8000a38:	4002001c 	.word	0x4002001c

08000a3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b089      	sub	sp, #36	; 0x24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	240c      	movs	r4, #12
 8000a46:	193b      	adds	r3, r7, r4
 8000a48:	0018      	movs	r0, r3
 8000a4a:	2314      	movs	r3, #20
 8000a4c:	001a      	movs	r2, r3
 8000a4e:	2100      	movs	r1, #0
 8000a50:	f003 fcc0 	bl	80043d4 <memset>
  if(htim->Instance==TIM1)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a16      	ldr	r2, [pc, #88]	; (8000ab4 <HAL_TIM_MspPostInit+0x78>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d125      	bne.n	8000aaa <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <HAL_TIM_MspPostInit+0x7c>)
 8000a60:	695a      	ldr	r2, [r3, #20]
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <HAL_TIM_MspPostInit+0x7c>)
 8000a64:	2180      	movs	r1, #128	; 0x80
 8000a66:	0289      	lsls	r1, r1, #10
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	615a      	str	r2, [r3, #20]
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_TIM_MspPostInit+0x7c>)
 8000a6e:	695a      	ldr	r2, [r3, #20]
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	029b      	lsls	r3, r3, #10
 8000a74:	4013      	ands	r3, r2
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a7a:	193b      	adds	r3, r7, r4
 8000a7c:	2280      	movs	r2, #128	; 0x80
 8000a7e:	0052      	lsls	r2, r2, #1
 8000a80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	0021      	movs	r1, r4
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2202      	movs	r2, #2
 8000a88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2202      	movs	r2, #2
 8000a9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	187a      	adds	r2, r7, r1
 8000a9e:	2390      	movs	r3, #144	; 0x90
 8000aa0:	05db      	lsls	r3, r3, #23
 8000aa2:	0011      	movs	r1, r2
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f000 fcc3 	bl	8001430 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b009      	add	sp, #36	; 0x24
 8000ab0:	bd90      	pop	{r4, r7, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	40012c00 	.word	0x40012c00
 8000ab8:	40021000 	.word	0x40021000

08000abc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b08b      	sub	sp, #44	; 0x2c
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	2414      	movs	r4, #20
 8000ac6:	193b      	adds	r3, r7, r4
 8000ac8:	0018      	movs	r0, r3
 8000aca:	2314      	movs	r3, #20
 8000acc:	001a      	movs	r2, r3
 8000ace:	2100      	movs	r1, #0
 8000ad0:	f003 fc80 	bl	80043d4 <memset>
  if(huart->Instance==USART2)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a1c      	ldr	r2, [pc, #112]	; (8000b4c <HAL_UART_MspInit+0x90>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d132      	bne.n	8000b44 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ade:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <HAL_UART_MspInit+0x94>)
 8000ae0:	69da      	ldr	r2, [r3, #28]
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <HAL_UART_MspInit+0x94>)
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	0289      	lsls	r1, r1, #10
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	61da      	str	r2, [r3, #28]
 8000aec:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <HAL_UART_MspInit+0x94>)
 8000aee:	69da      	ldr	r2, [r3, #28]
 8000af0:	2380      	movs	r3, #128	; 0x80
 8000af2:	029b      	lsls	r3, r3, #10
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <HAL_UART_MspInit+0x94>)
 8000afc:	695a      	ldr	r2, [r3, #20]
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <HAL_UART_MspInit+0x94>)
 8000b00:	2180      	movs	r1, #128	; 0x80
 8000b02:	0289      	lsls	r1, r1, #10
 8000b04:	430a      	orrs	r2, r1
 8000b06:	615a      	str	r2, [r3, #20]
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_UART_MspInit+0x94>)
 8000b0a:	695a      	ldr	r2, [r3, #20]
 8000b0c:	2380      	movs	r3, #128	; 0x80
 8000b0e:	029b      	lsls	r3, r3, #10
 8000b10:	4013      	ands	r3, r2
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b16:	0021      	movs	r1, r4
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	2202      	movs	r2, #2
 8000b22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	2201      	movs	r2, #1
 8000b34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	187a      	adds	r2, r7, r1
 8000b38:	2390      	movs	r3, #144	; 0x90
 8000b3a:	05db      	lsls	r3, r3, #23
 8000b3c:	0011      	movs	r1, r2
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f000 fc76 	bl	8001430 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	b00b      	add	sp, #44	; 0x2c
 8000b4a:	bd90      	pop	{r4, r7, pc}
 8000b4c:	40004400 	.word	0x40004400
 8000b50:	40021000 	.word	0x40021000

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b58:	e7fe      	b.n	8000b58 <NMI_Handler+0x4>

08000b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <HardFault_Handler+0x4>

08000b60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b78:	f000 f95e 	bl	8000e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b7c:	46c0      	nop			; (mov r8, r8)
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000b88:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f000 fb65 	bl	800125a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000b90:	46c0      	nop			; (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	200000cc 	.word	0x200000cc

08000b9c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f001 ff08 	bl	80029b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000ba8:	46c0      	nop			; (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	20000084 	.word	0x20000084

08000bb4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <TIM1_CC_IRQHandler+0x14>)
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f001 fefc 	bl	80029b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	20000084 	.word	0x20000084

08000bcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  return 1;
 8000bd0:	2301      	movs	r3, #1
}
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <_kill>:

int _kill(int pid, int sig)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000be2:	f003 fc4d 	bl	8004480 <__errno>
 8000be6:	0003      	movs	r3, r0
 8000be8:	2216      	movs	r2, #22
 8000bea:	601a      	str	r2, [r3, #0]
  return -1;
 8000bec:	2301      	movs	r3, #1
 8000bee:	425b      	negs	r3, r3
}
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b002      	add	sp, #8
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <_exit>:

void _exit (int status)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c00:	2301      	movs	r3, #1
 8000c02:	425a      	negs	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	0011      	movs	r1, r2
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f7ff ffe5 	bl	8000bd8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c0e:	e7fe      	b.n	8000c0e <_exit+0x16>

08000c10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	e00a      	b.n	8000c38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c22:	e000      	b.n	8000c26 <_read+0x16>
 8000c24:	bf00      	nop
 8000c26:	0001      	movs	r1, r0
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	1c5a      	adds	r2, r3, #1
 8000c2c:	60ba      	str	r2, [r7, #8]
 8000c2e:	b2ca      	uxtb	r2, r1
 8000c30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	3301      	adds	r3, #1
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	697a      	ldr	r2, [r7, #20]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	dbf0      	blt.n	8000c22 <_read+0x12>
  }

  return len;
 8000c40:	687b      	ldr	r3, [r7, #4]
}
 8000c42:	0018      	movs	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	b006      	add	sp, #24
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b086      	sub	sp, #24
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	60f8      	str	r0, [r7, #12]
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	e009      	b.n	8000c70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	1c5a      	adds	r2, r3, #1
 8000c60:	60ba      	str	r2, [r7, #8]
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	0018      	movs	r0, r3
 8000c66:	e000      	b.n	8000c6a <_write+0x20>
 8000c68:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	697a      	ldr	r2, [r7, #20]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	dbf1      	blt.n	8000c5c <_write+0x12>
  }
  return len;
 8000c78:	687b      	ldr	r3, [r7, #4]
}
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b006      	add	sp, #24
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <_close>:

int _close(int file)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	425b      	negs	r3, r3
}
 8000c8e:	0018      	movs	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b002      	add	sp, #8
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
 8000c9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	2280      	movs	r2, #128	; 0x80
 8000ca4:	0192      	lsls	r2, r2, #6
 8000ca6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	0018      	movs	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b002      	add	sp, #8
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <_isatty>:

int _isatty(int file)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cba:	2301      	movs	r3, #1
}
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b002      	add	sp, #8
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	b004      	add	sp, #16
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce4:	4a14      	ldr	r2, [pc, #80]	; (8000d38 <_sbrk+0x5c>)
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <_sbrk+0x60>)
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d102      	bne.n	8000cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <_sbrk+0x64>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <_sbrk+0x68>)
 8000cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <_sbrk+0x64>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	18d3      	adds	r3, r2, r3
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d207      	bcs.n	8000d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d0c:	f003 fbb8 	bl	8004480 <__errno>
 8000d10:	0003      	movs	r3, r0
 8000d12:	220c      	movs	r2, #12
 8000d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d16:	2301      	movs	r3, #1
 8000d18:	425b      	negs	r3, r3
 8000d1a:	e009      	b.n	8000d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	18d2      	adds	r2, r2, r3
 8000d2a:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <_sbrk+0x64>)
 8000d2c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
}
 8000d30:	0018      	movs	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b006      	add	sp, #24
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20004000 	.word	0x20004000
 8000d3c:	00000400 	.word	0x00000400
 8000d40:	200002a0 	.word	0x200002a0
 8000d44:	200003f8 	.word	0x200003f8

08000d48 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d4c:	46c0      	nop			; (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d54:	480d      	ldr	r0, [pc, #52]	; (8000d8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d56:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d58:	f7ff fff6 	bl	8000d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d5c:	480c      	ldr	r0, [pc, #48]	; (8000d90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d5e:	490d      	ldr	r1, [pc, #52]	; (8000d94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d60:	4a0d      	ldr	r2, [pc, #52]	; (8000d98 <LoopForever+0xe>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d64:	e002      	b.n	8000d6c <LoopCopyDataInit>

08000d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6a:	3304      	adds	r3, #4

08000d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d70:	d3f9      	bcc.n	8000d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d74:	4c0a      	ldr	r4, [pc, #40]	; (8000da0 <LoopForever+0x16>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d78:	e001      	b.n	8000d7e <LoopFillZerobss>

08000d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d7c:	3204      	adds	r2, #4

08000d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d80:	d3fb      	bcc.n	8000d7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d82:	f003 fb83 	bl	800448c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d86:	f7ff fbc5 	bl	8000514 <main>

08000d8a <LoopForever>:

LoopForever:
    b LoopForever
 8000d8a:	e7fe      	b.n	8000d8a <LoopForever>
  ldr   r0, =_estack
 8000d8c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d94:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d98:	080052b0 	.word	0x080052b0
  ldr r2, =_sbss
 8000d9c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000da0:	200003f4 	.word	0x200003f4

08000da4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC1_COMP_IRQHandler>
	...

08000da8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <HAL_Init+0x24>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_Init+0x24>)
 8000db2:	2110      	movs	r1, #16
 8000db4:	430a      	orrs	r2, r1
 8000db6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000db8:	2000      	movs	r0, #0
 8000dba:	f000 f809 	bl	8000dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dbe:	f7ff fdbd 	bl	800093c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
}
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	40022000 	.word	0x40022000

08000dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <HAL_InitTick+0x5c>)
 8000dda:	681c      	ldr	r4, [r3, #0]
 8000ddc:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <HAL_InitTick+0x60>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	0019      	movs	r1, r3
 8000de2:	23fa      	movs	r3, #250	; 0xfa
 8000de4:	0098      	lsls	r0, r3, #2
 8000de6:	f7ff f999 	bl	800011c <__udivsi3>
 8000dea:	0003      	movs	r3, r0
 8000dec:	0019      	movs	r1, r3
 8000dee:	0020      	movs	r0, r4
 8000df0:	f7ff f994 	bl	800011c <__udivsi3>
 8000df4:	0003      	movs	r3, r0
 8000df6:	0018      	movs	r0, r3
 8000df8:	f000 f92f 	bl	800105a <HAL_SYSTICK_Config>
 8000dfc:	1e03      	subs	r3, r0, #0
 8000dfe:	d001      	beq.n	8000e04 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e00f      	b.n	8000e24 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b03      	cmp	r3, #3
 8000e08:	d80b      	bhi.n	8000e22 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	425b      	negs	r3, r3
 8000e10:	2200      	movs	r2, #0
 8000e12:	0018      	movs	r0, r3
 8000e14:	f000 f8fc 	bl	8001010 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_InitTick+0x64>)
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e000      	b.n	8000e24 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
}
 8000e24:	0018      	movs	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b003      	add	sp, #12
 8000e2a:	bd90      	pop	{r4, r7, pc}
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	20000008 	.word	0x20000008
 8000e34:	20000004 	.word	0x20000004

08000e38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <HAL_IncTick+0x1c>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	001a      	movs	r2, r3
 8000e42:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <HAL_IncTick+0x20>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	18d2      	adds	r2, r2, r3
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <HAL_IncTick+0x20>)
 8000e4a:	601a      	str	r2, [r3, #0]
}
 8000e4c:	46c0      	nop			; (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	20000008 	.word	0x20000008
 8000e58:	200002a4 	.word	0x200002a4

08000e5c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e60:	4b02      	ldr	r3, [pc, #8]	; (8000e6c <HAL_GetTick+0x10>)
 8000e62:	681b      	ldr	r3, [r3, #0]
}
 8000e64:	0018      	movs	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	200002a4 	.word	0x200002a4

08000e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e78:	f7ff fff0 	bl	8000e5c <HAL_GetTick>
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	3301      	adds	r3, #1
 8000e88:	d005      	beq.n	8000e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <HAL_Delay+0x44>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	001a      	movs	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	189b      	adds	r3, r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	f7ff ffe0 	bl	8000e5c <HAL_GetTick>
 8000e9c:	0002      	movs	r2, r0
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d8f7      	bhi.n	8000e98 <HAL_Delay+0x28>
  {
  }
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	46bd      	mov	sp, r7
 8000eae:	b004      	add	sp, #16
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	20000008 	.word	0x20000008

08000eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	0002      	movs	r2, r0
 8000ec0:	1dfb      	adds	r3, r7, #7
 8000ec2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ec4:	1dfb      	adds	r3, r7, #7
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b7f      	cmp	r3, #127	; 0x7f
 8000eca:	d809      	bhi.n	8000ee0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ecc:	1dfb      	adds	r3, r7, #7
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	001a      	movs	r2, r3
 8000ed2:	231f      	movs	r3, #31
 8000ed4:	401a      	ands	r2, r3
 8000ed6:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <__NVIC_EnableIRQ+0x30>)
 8000ed8:	2101      	movs	r1, #1
 8000eda:	4091      	lsls	r1, r2
 8000edc:	000a      	movs	r2, r1
 8000ede:	601a      	str	r2, [r3, #0]
  }
}
 8000ee0:	46c0      	nop			; (mov r8, r8)
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	b002      	add	sp, #8
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	e000e100 	.word	0xe000e100

08000eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eec:	b590      	push	{r4, r7, lr}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	0002      	movs	r2, r0
 8000ef4:	6039      	str	r1, [r7, #0]
 8000ef6:	1dfb      	adds	r3, r7, #7
 8000ef8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000efa:	1dfb      	adds	r3, r7, #7
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b7f      	cmp	r3, #127	; 0x7f
 8000f00:	d828      	bhi.n	8000f54 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f02:	4a2f      	ldr	r2, [pc, #188]	; (8000fc0 <__NVIC_SetPriority+0xd4>)
 8000f04:	1dfb      	adds	r3, r7, #7
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	b25b      	sxtb	r3, r3
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	33c0      	adds	r3, #192	; 0xc0
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	589b      	ldr	r3, [r3, r2]
 8000f12:	1dfa      	adds	r2, r7, #7
 8000f14:	7812      	ldrb	r2, [r2, #0]
 8000f16:	0011      	movs	r1, r2
 8000f18:	2203      	movs	r2, #3
 8000f1a:	400a      	ands	r2, r1
 8000f1c:	00d2      	lsls	r2, r2, #3
 8000f1e:	21ff      	movs	r1, #255	; 0xff
 8000f20:	4091      	lsls	r1, r2
 8000f22:	000a      	movs	r2, r1
 8000f24:	43d2      	mvns	r2, r2
 8000f26:	401a      	ands	r2, r3
 8000f28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	019b      	lsls	r3, r3, #6
 8000f2e:	22ff      	movs	r2, #255	; 0xff
 8000f30:	401a      	ands	r2, r3
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	0018      	movs	r0, r3
 8000f38:	2303      	movs	r3, #3
 8000f3a:	4003      	ands	r3, r0
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f40:	481f      	ldr	r0, [pc, #124]	; (8000fc0 <__NVIC_SetPriority+0xd4>)
 8000f42:	1dfb      	adds	r3, r7, #7
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	b25b      	sxtb	r3, r3
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	33c0      	adds	r3, #192	; 0xc0
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f52:	e031      	b.n	8000fb8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f54:	4a1b      	ldr	r2, [pc, #108]	; (8000fc4 <__NVIC_SetPriority+0xd8>)
 8000f56:	1dfb      	adds	r3, r7, #7
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	0019      	movs	r1, r3
 8000f5c:	230f      	movs	r3, #15
 8000f5e:	400b      	ands	r3, r1
 8000f60:	3b08      	subs	r3, #8
 8000f62:	089b      	lsrs	r3, r3, #2
 8000f64:	3306      	adds	r3, #6
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	18d3      	adds	r3, r2, r3
 8000f6a:	3304      	adds	r3, #4
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	1dfa      	adds	r2, r7, #7
 8000f70:	7812      	ldrb	r2, [r2, #0]
 8000f72:	0011      	movs	r1, r2
 8000f74:	2203      	movs	r2, #3
 8000f76:	400a      	ands	r2, r1
 8000f78:	00d2      	lsls	r2, r2, #3
 8000f7a:	21ff      	movs	r1, #255	; 0xff
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	000a      	movs	r2, r1
 8000f80:	43d2      	mvns	r2, r2
 8000f82:	401a      	ands	r2, r3
 8000f84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	019b      	lsls	r3, r3, #6
 8000f8a:	22ff      	movs	r2, #255	; 0xff
 8000f8c:	401a      	ands	r2, r3
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	0018      	movs	r0, r3
 8000f94:	2303      	movs	r3, #3
 8000f96:	4003      	ands	r3, r0
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f9c:	4809      	ldr	r0, [pc, #36]	; (8000fc4 <__NVIC_SetPriority+0xd8>)
 8000f9e:	1dfb      	adds	r3, r7, #7
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	001c      	movs	r4, r3
 8000fa4:	230f      	movs	r3, #15
 8000fa6:	4023      	ands	r3, r4
 8000fa8:	3b08      	subs	r3, #8
 8000faa:	089b      	lsrs	r3, r3, #2
 8000fac:	430a      	orrs	r2, r1
 8000fae:	3306      	adds	r3, #6
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	18c3      	adds	r3, r0, r3
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	601a      	str	r2, [r3, #0]
}
 8000fb8:	46c0      	nop			; (mov r8, r8)
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b003      	add	sp, #12
 8000fbe:	bd90      	pop	{r4, r7, pc}
 8000fc0:	e000e100 	.word	0xe000e100
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	1e5a      	subs	r2, r3, #1
 8000fd4:	2380      	movs	r3, #128	; 0x80
 8000fd6:	045b      	lsls	r3, r3, #17
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d301      	bcc.n	8000fe0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e010      	b.n	8001002 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <SysTick_Config+0x44>)
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	3a01      	subs	r2, #1
 8000fe6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe8:	2301      	movs	r3, #1
 8000fea:	425b      	negs	r3, r3
 8000fec:	2103      	movs	r1, #3
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f7ff ff7c 	bl	8000eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <SysTick_Config+0x44>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <SysTick_Config+0x44>)
 8000ffc:	2207      	movs	r2, #7
 8000ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001000:	2300      	movs	r3, #0
}
 8001002:	0018      	movs	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	b002      	add	sp, #8
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	e000e010 	.word	0xe000e010

08001010 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
 800101a:	210f      	movs	r1, #15
 800101c:	187b      	adds	r3, r7, r1
 800101e:	1c02      	adds	r2, r0, #0
 8001020:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	187b      	adds	r3, r7, r1
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b25b      	sxtb	r3, r3
 800102a:	0011      	movs	r1, r2
 800102c:	0018      	movs	r0, r3
 800102e:	f7ff ff5d 	bl	8000eec <__NVIC_SetPriority>
}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	46bd      	mov	sp, r7
 8001036:	b004      	add	sp, #16
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	0002      	movs	r2, r0
 8001042:	1dfb      	adds	r3, r7, #7
 8001044:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001046:	1dfb      	adds	r3, r7, #7
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	b25b      	sxtb	r3, r3
 800104c:	0018      	movs	r0, r3
 800104e:	f7ff ff33 	bl	8000eb8 <__NVIC_EnableIRQ>
}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	46bd      	mov	sp, r7
 8001056:	b002      	add	sp, #8
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	0018      	movs	r0, r3
 8001066:	f7ff ffaf 	bl	8000fc8 <SysTick_Config>
 800106a:	0003      	movs	r3, r0
}
 800106c:	0018      	movs	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	b002      	add	sp, #8
 8001072:	bd80      	pop	{r7, pc}

08001074 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e036      	b.n	80010f8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2221      	movs	r2, #33	; 0x21
 800108e:	2102      	movs	r1, #2
 8001090:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4a18      	ldr	r2, [pc, #96]	; (8001100 <HAL_DMA_Init+0x8c>)
 800109e:	4013      	ands	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80010aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69db      	ldr	r3, [r3, #28]
 80010c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	0018      	movs	r0, r3
 80010dc:	f000 f98c 	bl	80013f8 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2221      	movs	r2, #33	; 0x21
 80010ea:	2101      	movs	r1, #1
 80010ec:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2220      	movs	r2, #32
 80010f2:	2100      	movs	r1, #0
 80010f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	0018      	movs	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b004      	add	sp, #16
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	ffffc00f 	.word	0xffffc00f

08001104 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001112:	2317      	movs	r3, #23
 8001114:	18fb      	adds	r3, r7, r3
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2220      	movs	r2, #32
 800111e:	5c9b      	ldrb	r3, [r3, r2]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d101      	bne.n	8001128 <HAL_DMA_Start_IT+0x24>
 8001124:	2302      	movs	r3, #2
 8001126:	e04f      	b.n	80011c8 <HAL_DMA_Start_IT+0xc4>
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2220      	movs	r2, #32
 800112c:	2101      	movs	r1, #1
 800112e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2221      	movs	r2, #33	; 0x21
 8001134:	5c9b      	ldrb	r3, [r3, r2]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b01      	cmp	r3, #1
 800113a:	d13a      	bne.n	80011b2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2221      	movs	r2, #33	; 0x21
 8001140:	2102      	movs	r1, #2
 8001142:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2200      	movs	r2, #0
 8001148:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2101      	movs	r1, #1
 8001156:	438a      	bics	r2, r1
 8001158:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	68b9      	ldr	r1, [r7, #8]
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f000 f91c 	bl	800139e <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116a:	2b00      	cmp	r3, #0
 800116c:	d008      	beq.n	8001180 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	210e      	movs	r1, #14
 800117a:	430a      	orrs	r2, r1
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	e00f      	b.n	80011a0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	210a      	movs	r1, #10
 800118c:	430a      	orrs	r2, r1
 800118e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2104      	movs	r1, #4
 800119c:	438a      	bics	r2, r1
 800119e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2101      	movs	r1, #1
 80011ac:	430a      	orrs	r2, r1
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	e007      	b.n	80011c2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2220      	movs	r2, #32
 80011b6:	2100      	movs	r1, #0
 80011b8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80011ba:	2317      	movs	r3, #23
 80011bc:	18fb      	adds	r3, r7, r3
 80011be:	2202      	movs	r2, #2
 80011c0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80011c2:	2317      	movs	r3, #23
 80011c4:	18fb      	adds	r3, r7, r3
 80011c6:	781b      	ldrb	r3, [r3, #0]
}
 80011c8:	0018      	movs	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b006      	add	sp, #24
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011d8:	210f      	movs	r1, #15
 80011da:	187b      	adds	r3, r7, r1
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2221      	movs	r2, #33	; 0x21
 80011e4:	5c9b      	ldrb	r3, [r3, r2]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d006      	beq.n	80011fa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2204      	movs	r2, #4
 80011f0:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80011f2:	187b      	adds	r3, r7, r1
 80011f4:	2201      	movs	r2, #1
 80011f6:	701a      	strb	r2, [r3, #0]
 80011f8:	e028      	b.n	800124c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	210e      	movs	r1, #14
 8001206:	438a      	bics	r2, r1
 8001208:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2101      	movs	r1, #1
 8001216:	438a      	bics	r2, r1
 8001218:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001222:	2101      	movs	r1, #1
 8001224:	4091      	lsls	r1, r2
 8001226:	000a      	movs	r2, r1
 8001228:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2221      	movs	r2, #33	; 0x21
 800122e:	2101      	movs	r1, #1
 8001230:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2220      	movs	r2, #32
 8001236:	2100      	movs	r1, #0
 8001238:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800123e:	2b00      	cmp	r3, #0
 8001240:	d004      	beq.n	800124c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	0010      	movs	r0, r2
 800124a:	4798      	blx	r3
    }
  }
  return status;
 800124c:	230f      	movs	r3, #15
 800124e:	18fb      	adds	r3, r7, r3
 8001250:	781b      	ldrb	r3, [r3, #0]
}
 8001252:	0018      	movs	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	b004      	add	sp, #16
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	2204      	movs	r2, #4
 8001278:	409a      	lsls	r2, r3
 800127a:	0013      	movs	r3, r2
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	4013      	ands	r3, r2
 8001280:	d024      	beq.n	80012cc <HAL_DMA_IRQHandler+0x72>
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	2204      	movs	r2, #4
 8001286:	4013      	ands	r3, r2
 8001288:	d020      	beq.n	80012cc <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2220      	movs	r2, #32
 8001292:	4013      	ands	r3, r2
 8001294:	d107      	bne.n	80012a6 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2104      	movs	r1, #4
 80012a2:	438a      	bics	r2, r1
 80012a4:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ae:	2104      	movs	r1, #4
 80012b0:	4091      	lsls	r1, r2
 80012b2:	000a      	movs	r2, r1
 80012b4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d100      	bne.n	80012c0 <HAL_DMA_IRQHandler+0x66>
 80012be:	e06a      	b.n	8001396 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	0010      	movs	r0, r2
 80012c8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80012ca:	e064      	b.n	8001396 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	2202      	movs	r2, #2
 80012d2:	409a      	lsls	r2, r3
 80012d4:	0013      	movs	r3, r2
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	4013      	ands	r3, r2
 80012da:	d02b      	beq.n	8001334 <HAL_DMA_IRQHandler+0xda>
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	2202      	movs	r2, #2
 80012e0:	4013      	ands	r3, r2
 80012e2:	d027      	beq.n	8001334 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2220      	movs	r2, #32
 80012ec:	4013      	ands	r3, r2
 80012ee:	d10b      	bne.n	8001308 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	210a      	movs	r1, #10
 80012fc:	438a      	bics	r2, r1
 80012fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2221      	movs	r2, #33	; 0x21
 8001304:	2101      	movs	r1, #1
 8001306:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001310:	2102      	movs	r1, #2
 8001312:	4091      	lsls	r1, r2
 8001314:	000a      	movs	r2, r1
 8001316:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2220      	movs	r2, #32
 800131c:	2100      	movs	r1, #0
 800131e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001324:	2b00      	cmp	r3, #0
 8001326:	d036      	beq.n	8001396 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	0010      	movs	r0, r2
 8001330:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001332:	e030      	b.n	8001396 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	2208      	movs	r2, #8
 800133a:	409a      	lsls	r2, r3
 800133c:	0013      	movs	r3, r2
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	4013      	ands	r3, r2
 8001342:	d028      	beq.n	8001396 <HAL_DMA_IRQHandler+0x13c>
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	2208      	movs	r2, #8
 8001348:	4013      	ands	r3, r2
 800134a:	d024      	beq.n	8001396 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	210e      	movs	r1, #14
 8001358:	438a      	bics	r2, r1
 800135a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001364:	2101      	movs	r1, #1
 8001366:	4091      	lsls	r1, r2
 8001368:	000a      	movs	r2, r1
 800136a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2221      	movs	r2, #33	; 0x21
 8001376:	2101      	movs	r1, #1
 8001378:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2220      	movs	r2, #32
 800137e:	2100      	movs	r1, #0
 8001380:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	0010      	movs	r0, r2
 8001392:	4798      	blx	r3
    }
  }
}
 8001394:	e7ff      	b.n	8001396 <HAL_DMA_IRQHandler+0x13c>
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	46bd      	mov	sp, r7
 800139a:	b004      	add	sp, #16
 800139c:	bd80      	pop	{r7, pc}

0800139e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b084      	sub	sp, #16
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	60f8      	str	r0, [r7, #12]
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
 80013aa:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013b4:	2101      	movs	r1, #1
 80013b6:	4091      	lsls	r1, r2
 80013b8:	000a      	movs	r2, r1
 80013ba:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2b10      	cmp	r3, #16
 80013ca:	d108      	bne.n	80013de <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68ba      	ldr	r2, [r7, #8]
 80013da:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80013dc:	e007      	b.n	80013ee <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	60da      	str	r2, [r3, #12]
}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b004      	add	sp, #16
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a08      	ldr	r2, [pc, #32]	; (8001428 <DMA_CalcBaseAndBitshift+0x30>)
 8001406:	4694      	mov	ip, r2
 8001408:	4463      	add	r3, ip
 800140a:	2114      	movs	r1, #20
 800140c:	0018      	movs	r0, r3
 800140e:	f7fe fe85 	bl	800011c <__udivsi3>
 8001412:	0003      	movs	r3, r0
 8001414:	009a      	lsls	r2, r3, #2
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a03      	ldr	r2, [pc, #12]	; (800142c <DMA_CalcBaseAndBitshift+0x34>)
 800141e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001420:	46c0      	nop			; (mov r8, r8)
 8001422:	46bd      	mov	sp, r7
 8001424:	b002      	add	sp, #8
 8001426:	bd80      	pop	{r7, pc}
 8001428:	bffdfff8 	.word	0xbffdfff8
 800142c:	40020000 	.word	0x40020000

08001430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143e:	e155      	b.n	80016ec <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2101      	movs	r1, #1
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	4091      	lsls	r1, r2
 800144a:	000a      	movs	r2, r1
 800144c:	4013      	ands	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d100      	bne.n	8001458 <HAL_GPIO_Init+0x28>
 8001456:	e146      	b.n	80016e6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2203      	movs	r2, #3
 800145e:	4013      	ands	r3, r2
 8001460:	2b01      	cmp	r3, #1
 8001462:	d005      	beq.n	8001470 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2203      	movs	r2, #3
 800146a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800146c:	2b02      	cmp	r3, #2
 800146e:	d130      	bne.n	80014d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	2203      	movs	r2, #3
 800147c:	409a      	lsls	r2, r3
 800147e:	0013      	movs	r3, r2
 8001480:	43da      	mvns	r2, r3
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	68da      	ldr	r2, [r3, #12]
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	409a      	lsls	r2, r3
 8001492:	0013      	movs	r3, r2
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014a6:	2201      	movs	r2, #1
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	409a      	lsls	r2, r3
 80014ac:	0013      	movs	r3, r2
 80014ae:	43da      	mvns	r2, r3
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	091b      	lsrs	r3, r3, #4
 80014bc:	2201      	movs	r2, #1
 80014be:	401a      	ands	r2, r3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	409a      	lsls	r2, r3
 80014c4:	0013      	movs	r3, r2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2203      	movs	r2, #3
 80014d8:	4013      	ands	r3, r2
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d017      	beq.n	800150e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	409a      	lsls	r2, r3
 80014ec:	0013      	movs	r3, r2
 80014ee:	43da      	mvns	r2, r3
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	409a      	lsls	r2, r3
 8001500:	0013      	movs	r3, r2
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2203      	movs	r2, #3
 8001514:	4013      	ands	r3, r2
 8001516:	2b02      	cmp	r3, #2
 8001518:	d123      	bne.n	8001562 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	08da      	lsrs	r2, r3, #3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3208      	adds	r2, #8
 8001522:	0092      	lsls	r2, r2, #2
 8001524:	58d3      	ldr	r3, [r2, r3]
 8001526:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	2207      	movs	r2, #7
 800152c:	4013      	ands	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	220f      	movs	r2, #15
 8001532:	409a      	lsls	r2, r3
 8001534:	0013      	movs	r3, r2
 8001536:	43da      	mvns	r2, r3
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	691a      	ldr	r2, [r3, #16]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	2107      	movs	r1, #7
 8001546:	400b      	ands	r3, r1
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	409a      	lsls	r2, r3
 800154c:	0013      	movs	r3, r2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	08da      	lsrs	r2, r3, #3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3208      	adds	r2, #8
 800155c:	0092      	lsls	r2, r2, #2
 800155e:	6939      	ldr	r1, [r7, #16]
 8001560:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	2203      	movs	r2, #3
 800156e:	409a      	lsls	r2, r3
 8001570:	0013      	movs	r3, r2
 8001572:	43da      	mvns	r2, r3
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	4013      	ands	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2203      	movs	r2, #3
 8001580:	401a      	ands	r2, r3
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	409a      	lsls	r2, r3
 8001588:	0013      	movs	r3, r2
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	23c0      	movs	r3, #192	; 0xc0
 800159c:	029b      	lsls	r3, r3, #10
 800159e:	4013      	ands	r3, r2
 80015a0:	d100      	bne.n	80015a4 <HAL_GPIO_Init+0x174>
 80015a2:	e0a0      	b.n	80016e6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a4:	4b57      	ldr	r3, [pc, #348]	; (8001704 <HAL_GPIO_Init+0x2d4>)
 80015a6:	699a      	ldr	r2, [r3, #24]
 80015a8:	4b56      	ldr	r3, [pc, #344]	; (8001704 <HAL_GPIO_Init+0x2d4>)
 80015aa:	2101      	movs	r1, #1
 80015ac:	430a      	orrs	r2, r1
 80015ae:	619a      	str	r2, [r3, #24]
 80015b0:	4b54      	ldr	r3, [pc, #336]	; (8001704 <HAL_GPIO_Init+0x2d4>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	2201      	movs	r2, #1
 80015b6:	4013      	ands	r3, r2
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015bc:	4a52      	ldr	r2, [pc, #328]	; (8001708 <HAL_GPIO_Init+0x2d8>)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	089b      	lsrs	r3, r3, #2
 80015c2:	3302      	adds	r3, #2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	589b      	ldr	r3, [r3, r2]
 80015c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	2203      	movs	r2, #3
 80015ce:	4013      	ands	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	220f      	movs	r2, #15
 80015d4:	409a      	lsls	r2, r3
 80015d6:	0013      	movs	r3, r2
 80015d8:	43da      	mvns	r2, r3
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	4013      	ands	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	2390      	movs	r3, #144	; 0x90
 80015e4:	05db      	lsls	r3, r3, #23
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d019      	beq.n	800161e <HAL_GPIO_Init+0x1ee>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a47      	ldr	r2, [pc, #284]	; (800170c <HAL_GPIO_Init+0x2dc>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d013      	beq.n	800161a <HAL_GPIO_Init+0x1ea>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a46      	ldr	r2, [pc, #280]	; (8001710 <HAL_GPIO_Init+0x2e0>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d00d      	beq.n	8001616 <HAL_GPIO_Init+0x1e6>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a45      	ldr	r2, [pc, #276]	; (8001714 <HAL_GPIO_Init+0x2e4>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d007      	beq.n	8001612 <HAL_GPIO_Init+0x1e2>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a44      	ldr	r2, [pc, #272]	; (8001718 <HAL_GPIO_Init+0x2e8>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d101      	bne.n	800160e <HAL_GPIO_Init+0x1de>
 800160a:	2304      	movs	r3, #4
 800160c:	e008      	b.n	8001620 <HAL_GPIO_Init+0x1f0>
 800160e:	2305      	movs	r3, #5
 8001610:	e006      	b.n	8001620 <HAL_GPIO_Init+0x1f0>
 8001612:	2303      	movs	r3, #3
 8001614:	e004      	b.n	8001620 <HAL_GPIO_Init+0x1f0>
 8001616:	2302      	movs	r3, #2
 8001618:	e002      	b.n	8001620 <HAL_GPIO_Init+0x1f0>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <HAL_GPIO_Init+0x1f0>
 800161e:	2300      	movs	r3, #0
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	2103      	movs	r1, #3
 8001624:	400a      	ands	r2, r1
 8001626:	0092      	lsls	r2, r2, #2
 8001628:	4093      	lsls	r3, r2
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4313      	orrs	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001630:	4935      	ldr	r1, [pc, #212]	; (8001708 <HAL_GPIO_Init+0x2d8>)
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	089b      	lsrs	r3, r3, #2
 8001636:	3302      	adds	r3, #2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800163e:	4b37      	ldr	r3, [pc, #220]	; (800171c <HAL_GPIO_Init+0x2ec>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	43da      	mvns	r2, r3
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	4013      	ands	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	2380      	movs	r3, #128	; 0x80
 8001654:	035b      	lsls	r3, r3, #13
 8001656:	4013      	ands	r3, r2
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4313      	orrs	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001662:	4b2e      	ldr	r3, [pc, #184]	; (800171c <HAL_GPIO_Init+0x2ec>)
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001668:	4b2c      	ldr	r3, [pc, #176]	; (800171c <HAL_GPIO_Init+0x2ec>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	43da      	mvns	r2, r3
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	4013      	ands	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	039b      	lsls	r3, r3, #14
 8001680:	4013      	ands	r3, r2
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	4313      	orrs	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800168c:	4b23      	ldr	r3, [pc, #140]	; (800171c <HAL_GPIO_Init+0x2ec>)
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001692:	4b22      	ldr	r3, [pc, #136]	; (800171c <HAL_GPIO_Init+0x2ec>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	43da      	mvns	r2, r3
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	4013      	ands	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	029b      	lsls	r3, r3, #10
 80016aa:	4013      	ands	r3, r2
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016b6:	4b19      	ldr	r3, [pc, #100]	; (800171c <HAL_GPIO_Init+0x2ec>)
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80016bc:	4b17      	ldr	r3, [pc, #92]	; (800171c <HAL_GPIO_Init+0x2ec>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	43da      	mvns	r2, r3
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	2380      	movs	r3, #128	; 0x80
 80016d2:	025b      	lsls	r3, r3, #9
 80016d4:	4013      	ands	r3, r2
 80016d6:	d003      	beq.n	80016e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4313      	orrs	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016e0:	4b0e      	ldr	r3, [pc, #56]	; (800171c <HAL_GPIO_Init+0x2ec>)
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	3301      	adds	r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	40da      	lsrs	r2, r3
 80016f4:	1e13      	subs	r3, r2, #0
 80016f6:	d000      	beq.n	80016fa <HAL_GPIO_Init+0x2ca>
 80016f8:	e6a2      	b.n	8001440 <HAL_GPIO_Init+0x10>
  } 
}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	46c0      	nop			; (mov r8, r8)
 80016fe:	46bd      	mov	sp, r7
 8001700:	b006      	add	sp, #24
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40021000 	.word	0x40021000
 8001708:	40010000 	.word	0x40010000
 800170c:	48000400 	.word	0x48000400
 8001710:	48000800 	.word	0x48000800
 8001714:	48000c00 	.word	0x48000c00
 8001718:	48001000 	.word	0x48001000
 800171c:	40010400 	.word	0x40010400

08001720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	0008      	movs	r0, r1
 800172a:	0011      	movs	r1, r2
 800172c:	1cbb      	adds	r3, r7, #2
 800172e:	1c02      	adds	r2, r0, #0
 8001730:	801a      	strh	r2, [r3, #0]
 8001732:	1c7b      	adds	r3, r7, #1
 8001734:	1c0a      	adds	r2, r1, #0
 8001736:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001738:	1c7b      	adds	r3, r7, #1
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d004      	beq.n	800174a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001740:	1cbb      	adds	r3, r7, #2
 8001742:	881a      	ldrh	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001748:	e003      	b.n	8001752 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800174a:	1cbb      	adds	r3, r7, #2
 800174c:	881a      	ldrh	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	46bd      	mov	sp, r7
 8001756:	b002      	add	sp, #8
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d102      	bne.n	8001770 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	f000 fb76 	bl	8001e5c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2201      	movs	r2, #1
 8001776:	4013      	ands	r3, r2
 8001778:	d100      	bne.n	800177c <HAL_RCC_OscConfig+0x20>
 800177a:	e08e      	b.n	800189a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800177c:	4bc5      	ldr	r3, [pc, #788]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	220c      	movs	r2, #12
 8001782:	4013      	ands	r3, r2
 8001784:	2b04      	cmp	r3, #4
 8001786:	d00e      	beq.n	80017a6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001788:	4bc2      	ldr	r3, [pc, #776]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	220c      	movs	r2, #12
 800178e:	4013      	ands	r3, r2
 8001790:	2b08      	cmp	r3, #8
 8001792:	d117      	bne.n	80017c4 <HAL_RCC_OscConfig+0x68>
 8001794:	4bbf      	ldr	r3, [pc, #764]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	23c0      	movs	r3, #192	; 0xc0
 800179a:	025b      	lsls	r3, r3, #9
 800179c:	401a      	ands	r2, r3
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	025b      	lsls	r3, r3, #9
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d10e      	bne.n	80017c4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a6:	4bbb      	ldr	r3, [pc, #748]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	2380      	movs	r3, #128	; 0x80
 80017ac:	029b      	lsls	r3, r3, #10
 80017ae:	4013      	ands	r3, r2
 80017b0:	d100      	bne.n	80017b4 <HAL_RCC_OscConfig+0x58>
 80017b2:	e071      	b.n	8001898 <HAL_RCC_OscConfig+0x13c>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d000      	beq.n	80017be <HAL_RCC_OscConfig+0x62>
 80017bc:	e06c      	b.n	8001898 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	f000 fb4c 	bl	8001e5c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d107      	bne.n	80017dc <HAL_RCC_OscConfig+0x80>
 80017cc:	4bb1      	ldr	r3, [pc, #708]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4bb0      	ldr	r3, [pc, #704]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 80017d2:	2180      	movs	r1, #128	; 0x80
 80017d4:	0249      	lsls	r1, r1, #9
 80017d6:	430a      	orrs	r2, r1
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	e02f      	b.n	800183c <HAL_RCC_OscConfig+0xe0>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d10c      	bne.n	80017fe <HAL_RCC_OscConfig+0xa2>
 80017e4:	4bab      	ldr	r3, [pc, #684]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4baa      	ldr	r3, [pc, #680]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 80017ea:	49ab      	ldr	r1, [pc, #684]	; (8001a98 <HAL_RCC_OscConfig+0x33c>)
 80017ec:	400a      	ands	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	4ba8      	ldr	r3, [pc, #672]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4ba7      	ldr	r3, [pc, #668]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 80017f6:	49a9      	ldr	r1, [pc, #676]	; (8001a9c <HAL_RCC_OscConfig+0x340>)
 80017f8:	400a      	ands	r2, r1
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	e01e      	b.n	800183c <HAL_RCC_OscConfig+0xe0>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b05      	cmp	r3, #5
 8001804:	d10e      	bne.n	8001824 <HAL_RCC_OscConfig+0xc8>
 8001806:	4ba3      	ldr	r3, [pc, #652]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	4ba2      	ldr	r3, [pc, #648]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 800180c:	2180      	movs	r1, #128	; 0x80
 800180e:	02c9      	lsls	r1, r1, #11
 8001810:	430a      	orrs	r2, r1
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	4b9f      	ldr	r3, [pc, #636]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b9e      	ldr	r3, [pc, #632]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 800181a:	2180      	movs	r1, #128	; 0x80
 800181c:	0249      	lsls	r1, r1, #9
 800181e:	430a      	orrs	r2, r1
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	e00b      	b.n	800183c <HAL_RCC_OscConfig+0xe0>
 8001824:	4b9b      	ldr	r3, [pc, #620]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b9a      	ldr	r3, [pc, #616]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 800182a:	499b      	ldr	r1, [pc, #620]	; (8001a98 <HAL_RCC_OscConfig+0x33c>)
 800182c:	400a      	ands	r2, r1
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	4b98      	ldr	r3, [pc, #608]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b97      	ldr	r3, [pc, #604]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 8001836:	4999      	ldr	r1, [pc, #612]	; (8001a9c <HAL_RCC_OscConfig+0x340>)
 8001838:	400a      	ands	r2, r1
 800183a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d014      	beq.n	800186e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001844:	f7ff fb0a 	bl	8000e5c <HAL_GetTick>
 8001848:	0003      	movs	r3, r0
 800184a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800184e:	f7ff fb05 	bl	8000e5c <HAL_GetTick>
 8001852:	0002      	movs	r2, r0
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b64      	cmp	r3, #100	; 0x64
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e2fd      	b.n	8001e5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001860:	4b8c      	ldr	r3, [pc, #560]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	029b      	lsls	r3, r3, #10
 8001868:	4013      	ands	r3, r2
 800186a:	d0f0      	beq.n	800184e <HAL_RCC_OscConfig+0xf2>
 800186c:	e015      	b.n	800189a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186e:	f7ff faf5 	bl	8000e5c <HAL_GetTick>
 8001872:	0003      	movs	r3, r0
 8001874:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001878:	f7ff faf0 	bl	8000e5c <HAL_GetTick>
 800187c:	0002      	movs	r2, r0
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b64      	cmp	r3, #100	; 0x64
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e2e8      	b.n	8001e5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188a:	4b82      	ldr	r3, [pc, #520]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	029b      	lsls	r3, r3, #10
 8001892:	4013      	ands	r3, r2
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x11c>
 8001896:	e000      	b.n	800189a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001898:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2202      	movs	r2, #2
 80018a0:	4013      	ands	r3, r2
 80018a2:	d100      	bne.n	80018a6 <HAL_RCC_OscConfig+0x14a>
 80018a4:	e06c      	b.n	8001980 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80018a6:	4b7b      	ldr	r3, [pc, #492]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	220c      	movs	r2, #12
 80018ac:	4013      	ands	r3, r2
 80018ae:	d00e      	beq.n	80018ce <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80018b0:	4b78      	ldr	r3, [pc, #480]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	220c      	movs	r2, #12
 80018b6:	4013      	ands	r3, r2
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d11f      	bne.n	80018fc <HAL_RCC_OscConfig+0x1a0>
 80018bc:	4b75      	ldr	r3, [pc, #468]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	23c0      	movs	r3, #192	; 0xc0
 80018c2:	025b      	lsls	r3, r3, #9
 80018c4:	401a      	ands	r2, r3
 80018c6:	2380      	movs	r3, #128	; 0x80
 80018c8:	021b      	lsls	r3, r3, #8
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d116      	bne.n	80018fc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ce:	4b71      	ldr	r3, [pc, #452]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2202      	movs	r2, #2
 80018d4:	4013      	ands	r3, r2
 80018d6:	d005      	beq.n	80018e4 <HAL_RCC_OscConfig+0x188>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e2bb      	b.n	8001e5c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e4:	4b6b      	ldr	r3, [pc, #428]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	22f8      	movs	r2, #248	; 0xf8
 80018ea:	4393      	bics	r3, r2
 80018ec:	0019      	movs	r1, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	00da      	lsls	r2, r3, #3
 80018f4:	4b67      	ldr	r3, [pc, #412]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 80018f6:	430a      	orrs	r2, r1
 80018f8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fa:	e041      	b.n	8001980 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d024      	beq.n	800194e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001904:	4b63      	ldr	r3, [pc, #396]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b62      	ldr	r3, [pc, #392]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 800190a:	2101      	movs	r1, #1
 800190c:	430a      	orrs	r2, r1
 800190e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001910:	f7ff faa4 	bl	8000e5c <HAL_GetTick>
 8001914:	0003      	movs	r3, r0
 8001916:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800191a:	f7ff fa9f 	bl	8000e5c <HAL_GetTick>
 800191e:	0002      	movs	r2, r0
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e297      	b.n	8001e5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192c:	4b59      	ldr	r3, [pc, #356]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2202      	movs	r2, #2
 8001932:	4013      	ands	r3, r2
 8001934:	d0f1      	beq.n	800191a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001936:	4b57      	ldr	r3, [pc, #348]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	22f8      	movs	r2, #248	; 0xf8
 800193c:	4393      	bics	r3, r2
 800193e:	0019      	movs	r1, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	00da      	lsls	r2, r3, #3
 8001946:	4b53      	ldr	r3, [pc, #332]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 8001948:	430a      	orrs	r2, r1
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	e018      	b.n	8001980 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800194e:	4b51      	ldr	r3, [pc, #324]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	4b50      	ldr	r3, [pc, #320]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 8001954:	2101      	movs	r1, #1
 8001956:	438a      	bics	r2, r1
 8001958:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195a:	f7ff fa7f 	bl	8000e5c <HAL_GetTick>
 800195e:	0003      	movs	r3, r0
 8001960:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001964:	f7ff fa7a 	bl	8000e5c <HAL_GetTick>
 8001968:	0002      	movs	r2, r0
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e272      	b.n	8001e5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001976:	4b47      	ldr	r3, [pc, #284]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2202      	movs	r2, #2
 800197c:	4013      	ands	r3, r2
 800197e:	d1f1      	bne.n	8001964 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2208      	movs	r2, #8
 8001986:	4013      	ands	r3, r2
 8001988:	d036      	beq.n	80019f8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d019      	beq.n	80019c6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001992:	4b40      	ldr	r3, [pc, #256]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 8001994:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001996:	4b3f      	ldr	r3, [pc, #252]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 8001998:	2101      	movs	r1, #1
 800199a:	430a      	orrs	r2, r1
 800199c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199e:	f7ff fa5d 	bl	8000e5c <HAL_GetTick>
 80019a2:	0003      	movs	r3, r0
 80019a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019a8:	f7ff fa58 	bl	8000e5c <HAL_GetTick>
 80019ac:	0002      	movs	r2, r0
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e250      	b.n	8001e5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ba:	4b36      	ldr	r3, [pc, #216]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	2202      	movs	r2, #2
 80019c0:	4013      	ands	r3, r2
 80019c2:	d0f1      	beq.n	80019a8 <HAL_RCC_OscConfig+0x24c>
 80019c4:	e018      	b.n	80019f8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019c6:	4b33      	ldr	r3, [pc, #204]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 80019c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019ca:	4b32      	ldr	r3, [pc, #200]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 80019cc:	2101      	movs	r1, #1
 80019ce:	438a      	bics	r2, r1
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d2:	f7ff fa43 	bl	8000e5c <HAL_GetTick>
 80019d6:	0003      	movs	r3, r0
 80019d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019dc:	f7ff fa3e 	bl	8000e5c <HAL_GetTick>
 80019e0:	0002      	movs	r2, r0
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e236      	b.n	8001e5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ee:	4b29      	ldr	r3, [pc, #164]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	2202      	movs	r2, #2
 80019f4:	4013      	ands	r3, r2
 80019f6:	d1f1      	bne.n	80019dc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2204      	movs	r2, #4
 80019fe:	4013      	ands	r3, r2
 8001a00:	d100      	bne.n	8001a04 <HAL_RCC_OscConfig+0x2a8>
 8001a02:	e0b5      	b.n	8001b70 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a04:	201f      	movs	r0, #31
 8001a06:	183b      	adds	r3, r7, r0
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a0c:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 8001a0e:	69da      	ldr	r2, [r3, #28]
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	055b      	lsls	r3, r3, #21
 8001a14:	4013      	ands	r3, r2
 8001a16:	d110      	bne.n	8001a3a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a18:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 8001a1a:	69da      	ldr	r2, [r3, #28]
 8001a1c:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 8001a1e:	2180      	movs	r1, #128	; 0x80
 8001a20:	0549      	lsls	r1, r1, #21
 8001a22:	430a      	orrs	r2, r1
 8001a24:	61da      	str	r2, [r3, #28]
 8001a26:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 8001a28:	69da      	ldr	r2, [r3, #28]
 8001a2a:	2380      	movs	r3, #128	; 0x80
 8001a2c:	055b      	lsls	r3, r3, #21
 8001a2e:	4013      	ands	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a34:	183b      	adds	r3, r7, r0
 8001a36:	2201      	movs	r2, #1
 8001a38:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3a:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <HAL_RCC_OscConfig+0x344>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	2380      	movs	r3, #128	; 0x80
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4013      	ands	r3, r2
 8001a44:	d11a      	bne.n	8001a7c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a46:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <HAL_RCC_OscConfig+0x344>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_RCC_OscConfig+0x344>)
 8001a4c:	2180      	movs	r1, #128	; 0x80
 8001a4e:	0049      	lsls	r1, r1, #1
 8001a50:	430a      	orrs	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a54:	f7ff fa02 	bl	8000e5c <HAL_GetTick>
 8001a58:	0003      	movs	r3, r0
 8001a5a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a5e:	f7ff f9fd 	bl	8000e5c <HAL_GetTick>
 8001a62:	0002      	movs	r2, r0
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b64      	cmp	r3, #100	; 0x64
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e1f5      	b.n	8001e5c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_RCC_OscConfig+0x344>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d0f0      	beq.n	8001a5e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d10f      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x348>
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 8001a86:	6a1a      	ldr	r2, [r3, #32]
 8001a88:	4b02      	ldr	r3, [pc, #8]	; (8001a94 <HAL_RCC_OscConfig+0x338>)
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	621a      	str	r2, [r3, #32]
 8001a90:	e036      	b.n	8001b00 <HAL_RCC_OscConfig+0x3a4>
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	40021000 	.word	0x40021000
 8001a98:	fffeffff 	.word	0xfffeffff
 8001a9c:	fffbffff 	.word	0xfffbffff
 8001aa0:	40007000 	.word	0x40007000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d10c      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x36a>
 8001aac:	4bca      	ldr	r3, [pc, #808]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001aae:	6a1a      	ldr	r2, [r3, #32]
 8001ab0:	4bc9      	ldr	r3, [pc, #804]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	438a      	bics	r2, r1
 8001ab6:	621a      	str	r2, [r3, #32]
 8001ab8:	4bc7      	ldr	r3, [pc, #796]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001aba:	6a1a      	ldr	r2, [r3, #32]
 8001abc:	4bc6      	ldr	r3, [pc, #792]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001abe:	2104      	movs	r1, #4
 8001ac0:	438a      	bics	r2, r1
 8001ac2:	621a      	str	r2, [r3, #32]
 8001ac4:	e01c      	b.n	8001b00 <HAL_RCC_OscConfig+0x3a4>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b05      	cmp	r3, #5
 8001acc:	d10c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x38c>
 8001ace:	4bc2      	ldr	r3, [pc, #776]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001ad0:	6a1a      	ldr	r2, [r3, #32]
 8001ad2:	4bc1      	ldr	r3, [pc, #772]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001ad4:	2104      	movs	r1, #4
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	621a      	str	r2, [r3, #32]
 8001ada:	4bbf      	ldr	r3, [pc, #764]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001adc:	6a1a      	ldr	r2, [r3, #32]
 8001ade:	4bbe      	ldr	r3, [pc, #760]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	621a      	str	r2, [r3, #32]
 8001ae6:	e00b      	b.n	8001b00 <HAL_RCC_OscConfig+0x3a4>
 8001ae8:	4bbb      	ldr	r3, [pc, #748]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001aea:	6a1a      	ldr	r2, [r3, #32]
 8001aec:	4bba      	ldr	r3, [pc, #744]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001aee:	2101      	movs	r1, #1
 8001af0:	438a      	bics	r2, r1
 8001af2:	621a      	str	r2, [r3, #32]
 8001af4:	4bb8      	ldr	r3, [pc, #736]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001af6:	6a1a      	ldr	r2, [r3, #32]
 8001af8:	4bb7      	ldr	r3, [pc, #732]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001afa:	2104      	movs	r1, #4
 8001afc:	438a      	bics	r2, r1
 8001afe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d014      	beq.n	8001b32 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b08:	f7ff f9a8 	bl	8000e5c <HAL_GetTick>
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b10:	e009      	b.n	8001b26 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b12:	f7ff f9a3 	bl	8000e5c <HAL_GetTick>
 8001b16:	0002      	movs	r2, r0
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	4aaf      	ldr	r2, [pc, #700]	; (8001ddc <HAL_RCC_OscConfig+0x680>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e19a      	b.n	8001e5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b26:	4bac      	ldr	r3, [pc, #688]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d0f0      	beq.n	8001b12 <HAL_RCC_OscConfig+0x3b6>
 8001b30:	e013      	b.n	8001b5a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b32:	f7ff f993 	bl	8000e5c <HAL_GetTick>
 8001b36:	0003      	movs	r3, r0
 8001b38:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b3a:	e009      	b.n	8001b50 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b3c:	f7ff f98e 	bl	8000e5c <HAL_GetTick>
 8001b40:	0002      	movs	r2, r0
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	4aa5      	ldr	r2, [pc, #660]	; (8001ddc <HAL_RCC_OscConfig+0x680>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e185      	b.n	8001e5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b50:	4ba1      	ldr	r3, [pc, #644]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	2202      	movs	r2, #2
 8001b56:	4013      	ands	r3, r2
 8001b58:	d1f0      	bne.n	8001b3c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b5a:	231f      	movs	r3, #31
 8001b5c:	18fb      	adds	r3, r7, r3
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d105      	bne.n	8001b70 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b64:	4b9c      	ldr	r3, [pc, #624]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001b66:	69da      	ldr	r2, [r3, #28]
 8001b68:	4b9b      	ldr	r3, [pc, #620]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001b6a:	499d      	ldr	r1, [pc, #628]	; (8001de0 <HAL_RCC_OscConfig+0x684>)
 8001b6c:	400a      	ands	r2, r1
 8001b6e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2210      	movs	r2, #16
 8001b76:	4013      	ands	r3, r2
 8001b78:	d063      	beq.n	8001c42 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d12a      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b82:	4b95      	ldr	r3, [pc, #596]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b86:	4b94      	ldr	r3, [pc, #592]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001b88:	2104      	movs	r1, #4
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001b8e:	4b92      	ldr	r3, [pc, #584]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b92:	4b91      	ldr	r3, [pc, #580]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001b94:	2101      	movs	r1, #1
 8001b96:	430a      	orrs	r2, r1
 8001b98:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9a:	f7ff f95f 	bl	8000e5c <HAL_GetTick>
 8001b9e:	0003      	movs	r3, r0
 8001ba0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ba4:	f7ff f95a 	bl	8000e5c <HAL_GetTick>
 8001ba8:	0002      	movs	r2, r0
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e152      	b.n	8001e5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001bb6:	4b88      	ldr	r3, [pc, #544]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bba:	2202      	movs	r2, #2
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d0f1      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001bc0:	4b85      	ldr	r3, [pc, #532]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc4:	22f8      	movs	r2, #248	; 0xf8
 8001bc6:	4393      	bics	r3, r2
 8001bc8:	0019      	movs	r1, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	00da      	lsls	r2, r3, #3
 8001bd0:	4b81      	ldr	r3, [pc, #516]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	635a      	str	r2, [r3, #52]	; 0x34
 8001bd6:	e034      	b.n	8001c42 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	3305      	adds	r3, #5
 8001bde:	d111      	bne.n	8001c04 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001be0:	4b7d      	ldr	r3, [pc, #500]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001be2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001be4:	4b7c      	ldr	r3, [pc, #496]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001be6:	2104      	movs	r1, #4
 8001be8:	438a      	bics	r2, r1
 8001bea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001bec:	4b7a      	ldr	r3, [pc, #488]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf0:	22f8      	movs	r2, #248	; 0xf8
 8001bf2:	4393      	bics	r3, r2
 8001bf4:	0019      	movs	r1, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	00da      	lsls	r2, r3, #3
 8001bfc:	4b76      	ldr	r3, [pc, #472]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	635a      	str	r2, [r3, #52]	; 0x34
 8001c02:	e01e      	b.n	8001c42 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c04:	4b74      	ldr	r3, [pc, #464]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001c06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c08:	4b73      	ldr	r3, [pc, #460]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001c0a:	2104      	movs	r1, #4
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001c10:	4b71      	ldr	r3, [pc, #452]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001c12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c14:	4b70      	ldr	r3, [pc, #448]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001c16:	2101      	movs	r1, #1
 8001c18:	438a      	bics	r2, r1
 8001c1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1c:	f7ff f91e 	bl	8000e5c <HAL_GetTick>
 8001c20:	0003      	movs	r3, r0
 8001c22:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c26:	f7ff f919 	bl	8000e5c <HAL_GetTick>
 8001c2a:	0002      	movs	r2, r0
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e111      	b.n	8001e5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c38:	4b67      	ldr	r3, [pc, #412]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d1f1      	bne.n	8001c26 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2220      	movs	r2, #32
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d05c      	beq.n	8001d06 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001c4c:	4b62      	ldr	r3, [pc, #392]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	220c      	movs	r2, #12
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b0c      	cmp	r3, #12
 8001c56:	d00e      	beq.n	8001c76 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001c58:	4b5f      	ldr	r3, [pc, #380]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	220c      	movs	r2, #12
 8001c5e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d114      	bne.n	8001c8e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001c64:	4b5c      	ldr	r3, [pc, #368]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	23c0      	movs	r3, #192	; 0xc0
 8001c6a:	025b      	lsls	r3, r3, #9
 8001c6c:	401a      	ands	r2, r3
 8001c6e:	23c0      	movs	r3, #192	; 0xc0
 8001c70:	025b      	lsls	r3, r3, #9
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d10b      	bne.n	8001c8e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001c76:	4b58      	ldr	r3, [pc, #352]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001c78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c7a:	2380      	movs	r3, #128	; 0x80
 8001c7c:	029b      	lsls	r3, r3, #10
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d040      	beq.n	8001d04 <HAL_RCC_OscConfig+0x5a8>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d03c      	beq.n	8001d04 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e0e6      	b.n	8001e5c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a1b      	ldr	r3, [r3, #32]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d01b      	beq.n	8001cce <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001c96:	4b50      	ldr	r3, [pc, #320]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001c98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c9a:	4b4f      	ldr	r3, [pc, #316]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001c9c:	2180      	movs	r1, #128	; 0x80
 8001c9e:	0249      	lsls	r1, r1, #9
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7ff f8da 	bl	8000e5c <HAL_GetTick>
 8001ca8:	0003      	movs	r3, r0
 8001caa:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cae:	f7ff f8d5 	bl	8000e5c <HAL_GetTick>
 8001cb2:	0002      	movs	r2, r0
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e0cd      	b.n	8001e5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001cc0:	4b45      	ldr	r3, [pc, #276]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	029b      	lsls	r3, r3, #10
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d0f0      	beq.n	8001cae <HAL_RCC_OscConfig+0x552>
 8001ccc:	e01b      	b.n	8001d06 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001cce:	4b42      	ldr	r3, [pc, #264]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001cd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cd2:	4b41      	ldr	r3, [pc, #260]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001cd4:	4943      	ldr	r1, [pc, #268]	; (8001de4 <HAL_RCC_OscConfig+0x688>)
 8001cd6:	400a      	ands	r2, r1
 8001cd8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cda:	f7ff f8bf 	bl	8000e5c <HAL_GetTick>
 8001cde:	0003      	movs	r3, r0
 8001ce0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ce4:	f7ff f8ba 	bl	8000e5c <HAL_GetTick>
 8001ce8:	0002      	movs	r2, r0
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e0b2      	b.n	8001e5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001cf6:	4b38      	ldr	r3, [pc, #224]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001cf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cfa:	2380      	movs	r3, #128	; 0x80
 8001cfc:	029b      	lsls	r3, r3, #10
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x588>
 8001d02:	e000      	b.n	8001d06 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001d04:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d100      	bne.n	8001d10 <HAL_RCC_OscConfig+0x5b4>
 8001d0e:	e0a4      	b.n	8001e5a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d10:	4b31      	ldr	r3, [pc, #196]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	220c      	movs	r2, #12
 8001d16:	4013      	ands	r3, r2
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d100      	bne.n	8001d1e <HAL_RCC_OscConfig+0x5c2>
 8001d1c:	e078      	b.n	8001e10 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d14c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d26:	4b2c      	ldr	r3, [pc, #176]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	4b2b      	ldr	r3, [pc, #172]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001d2c:	492e      	ldr	r1, [pc, #184]	; (8001de8 <HAL_RCC_OscConfig+0x68c>)
 8001d2e:	400a      	ands	r2, r1
 8001d30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d32:	f7ff f893 	bl	8000e5c <HAL_GetTick>
 8001d36:	0003      	movs	r3, r0
 8001d38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d3c:	f7ff f88e 	bl	8000e5c <HAL_GetTick>
 8001d40:	0002      	movs	r2, r0
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e086      	b.n	8001e5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d4e:	4b22      	ldr	r3, [pc, #136]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	049b      	lsls	r3, r3, #18
 8001d56:	4013      	ands	r3, r2
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d5a:	4b1f      	ldr	r3, [pc, #124]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5e:	220f      	movs	r2, #15
 8001d60:	4393      	bics	r3, r2
 8001d62:	0019      	movs	r1, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	4a1e      	ldr	r2, [pc, #120]	; (8001dec <HAL_RCC_OscConfig+0x690>)
 8001d74:	4013      	ands	r3, r2
 8001d76:	0019      	movs	r1, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d80:	431a      	orrs	r2, r3
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001d84:	430a      	orrs	r2, r1
 8001d86:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d88:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001d8e:	2180      	movs	r1, #128	; 0x80
 8001d90:	0449      	lsls	r1, r1, #17
 8001d92:	430a      	orrs	r2, r1
 8001d94:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d96:	f7ff f861 	bl	8000e5c <HAL_GetTick>
 8001d9a:	0003      	movs	r3, r0
 8001d9c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da0:	f7ff f85c 	bl	8000e5c <HAL_GetTick>
 8001da4:	0002      	movs	r2, r0
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e054      	b.n	8001e5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	2380      	movs	r3, #128	; 0x80
 8001db8:	049b      	lsls	r3, r3, #18
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0x644>
 8001dbe:	e04c      	b.n	8001e5a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <HAL_RCC_OscConfig+0x67c>)
 8001dc6:	4908      	ldr	r1, [pc, #32]	; (8001de8 <HAL_RCC_OscConfig+0x68c>)
 8001dc8:	400a      	ands	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7ff f846 	bl	8000e5c <HAL_GetTick>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd4:	e015      	b.n	8001e02 <HAL_RCC_OscConfig+0x6a6>
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	00001388 	.word	0x00001388
 8001de0:	efffffff 	.word	0xefffffff
 8001de4:	fffeffff 	.word	0xfffeffff
 8001de8:	feffffff 	.word	0xfeffffff
 8001dec:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df0:	f7ff f834 	bl	8000e5c <HAL_GetTick>
 8001df4:	0002      	movs	r2, r0
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e02c      	b.n	8001e5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e02:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <HAL_RCC_OscConfig+0x708>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	2380      	movs	r3, #128	; 0x80
 8001e08:	049b      	lsls	r3, r3, #18
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0x694>
 8001e0e:	e024      	b.n	8001e5a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d101      	bne.n	8001e1c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e01f      	b.n	8001e5c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001e1c:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <HAL_RCC_OscConfig+0x708>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001e22:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <HAL_RCC_OscConfig+0x708>)
 8001e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e26:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	23c0      	movs	r3, #192	; 0xc0
 8001e2c:	025b      	lsls	r3, r3, #9
 8001e2e:	401a      	ands	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d10e      	bne.n	8001e56 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	220f      	movs	r2, #15
 8001e3c:	401a      	ands	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d107      	bne.n	8001e56 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	23f0      	movs	r3, #240	; 0xf0
 8001e4a:	039b      	lsls	r3, r3, #14
 8001e4c:	401a      	ands	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d001      	beq.n	8001e5a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	b008      	add	sp, #32
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40021000 	.word	0x40021000

08001e68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e0bf      	b.n	8001ffc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e7c:	4b61      	ldr	r3, [pc, #388]	; (8002004 <HAL_RCC_ClockConfig+0x19c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2201      	movs	r2, #1
 8001e82:	4013      	ands	r3, r2
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d911      	bls.n	8001eae <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8a:	4b5e      	ldr	r3, [pc, #376]	; (8002004 <HAL_RCC_ClockConfig+0x19c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	4393      	bics	r3, r2
 8001e92:	0019      	movs	r1, r3
 8001e94:	4b5b      	ldr	r3, [pc, #364]	; (8002004 <HAL_RCC_ClockConfig+0x19c>)
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9c:	4b59      	ldr	r3, [pc, #356]	; (8002004 <HAL_RCC_ClockConfig+0x19c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d001      	beq.n	8001eae <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e0a6      	b.n	8001ffc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d015      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2204      	movs	r2, #4
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d006      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ec2:	4b51      	ldr	r3, [pc, #324]	; (8002008 <HAL_RCC_ClockConfig+0x1a0>)
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	4b50      	ldr	r3, [pc, #320]	; (8002008 <HAL_RCC_ClockConfig+0x1a0>)
 8001ec8:	21e0      	movs	r1, #224	; 0xe0
 8001eca:	00c9      	lsls	r1, r1, #3
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed0:	4b4d      	ldr	r3, [pc, #308]	; (8002008 <HAL_RCC_ClockConfig+0x1a0>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	22f0      	movs	r2, #240	; 0xf0
 8001ed6:	4393      	bics	r3, r2
 8001ed8:	0019      	movs	r1, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	4b4a      	ldr	r3, [pc, #296]	; (8002008 <HAL_RCC_ClockConfig+0x1a0>)
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	4013      	ands	r3, r2
 8001eec:	d04c      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d107      	bne.n	8001f06 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef6:	4b44      	ldr	r3, [pc, #272]	; (8002008 <HAL_RCC_ClockConfig+0x1a0>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	2380      	movs	r3, #128	; 0x80
 8001efc:	029b      	lsls	r3, r3, #10
 8001efe:	4013      	ands	r3, r2
 8001f00:	d120      	bne.n	8001f44 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e07a      	b.n	8001ffc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d107      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f0e:	4b3e      	ldr	r3, [pc, #248]	; (8002008 <HAL_RCC_ClockConfig+0x1a0>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	2380      	movs	r3, #128	; 0x80
 8001f14:	049b      	lsls	r3, r3, #18
 8001f16:	4013      	ands	r3, r2
 8001f18:	d114      	bne.n	8001f44 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e06e      	b.n	8001ffc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	d107      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f26:	4b38      	ldr	r3, [pc, #224]	; (8002008 <HAL_RCC_ClockConfig+0x1a0>)
 8001f28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	029b      	lsls	r3, r3, #10
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d108      	bne.n	8001f44 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e062      	b.n	8001ffc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f36:	4b34      	ldr	r3, [pc, #208]	; (8002008 <HAL_RCC_ClockConfig+0x1a0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d101      	bne.n	8001f44 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e05b      	b.n	8001ffc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f44:	4b30      	ldr	r3, [pc, #192]	; (8002008 <HAL_RCC_ClockConfig+0x1a0>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2203      	movs	r2, #3
 8001f4a:	4393      	bics	r3, r2
 8001f4c:	0019      	movs	r1, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	4b2d      	ldr	r3, [pc, #180]	; (8002008 <HAL_RCC_ClockConfig+0x1a0>)
 8001f54:	430a      	orrs	r2, r1
 8001f56:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f58:	f7fe ff80 	bl	8000e5c <HAL_GetTick>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f60:	e009      	b.n	8001f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f62:	f7fe ff7b 	bl	8000e5c <HAL_GetTick>
 8001f66:	0002      	movs	r2, r0
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	4a27      	ldr	r2, [pc, #156]	; (800200c <HAL_RCC_ClockConfig+0x1a4>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e042      	b.n	8001ffc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f76:	4b24      	ldr	r3, [pc, #144]	; (8002008 <HAL_RCC_ClockConfig+0x1a0>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	220c      	movs	r2, #12
 8001f7c:	401a      	ands	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d1ec      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f88:	4b1e      	ldr	r3, [pc, #120]	; (8002004 <HAL_RCC_ClockConfig+0x19c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	4013      	ands	r3, r2
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d211      	bcs.n	8001fba <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f96:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <HAL_RCC_ClockConfig+0x19c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	4393      	bics	r3, r2
 8001f9e:	0019      	movs	r1, r3
 8001fa0:	4b18      	ldr	r3, [pc, #96]	; (8002004 <HAL_RCC_ClockConfig+0x19c>)
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa8:	4b16      	ldr	r3, [pc, #88]	; (8002004 <HAL_RCC_ClockConfig+0x19c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2201      	movs	r2, #1
 8001fae:	4013      	ands	r3, r2
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d001      	beq.n	8001fba <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e020      	b.n	8001ffc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2204      	movs	r2, #4
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d009      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc4:	4b10      	ldr	r3, [pc, #64]	; (8002008 <HAL_RCC_ClockConfig+0x1a0>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	4a11      	ldr	r2, [pc, #68]	; (8002010 <HAL_RCC_ClockConfig+0x1a8>)
 8001fca:	4013      	ands	r3, r2
 8001fcc:	0019      	movs	r1, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <HAL_RCC_ClockConfig+0x1a0>)
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fd8:	f000 f820 	bl	800201c <HAL_RCC_GetSysClockFreq>
 8001fdc:	0001      	movs	r1, r0
 8001fde:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <HAL_RCC_ClockConfig+0x1a0>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	091b      	lsrs	r3, r3, #4
 8001fe4:	220f      	movs	r2, #15
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <HAL_RCC_ClockConfig+0x1ac>)
 8001fea:	5cd3      	ldrb	r3, [r2, r3]
 8001fec:	000a      	movs	r2, r1
 8001fee:	40da      	lsrs	r2, r3
 8001ff0:	4b09      	ldr	r3, [pc, #36]	; (8002018 <HAL_RCC_ClockConfig+0x1b0>)
 8001ff2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	f7fe feeb 	bl	8000dd0 <HAL_InitTick>
  
  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b004      	add	sp, #16
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40022000 	.word	0x40022000
 8002008:	40021000 	.word	0x40021000
 800200c:	00001388 	.word	0x00001388
 8002010:	fffff8ff 	.word	0xfffff8ff
 8002014:	08005190 	.word	0x08005190
 8002018:	20000000 	.word	0x20000000

0800201c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	2300      	movs	r3, #0
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	2300      	movs	r3, #0
 8002030:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002036:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_RCC_GetSysClockFreq+0xd0>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	220c      	movs	r2, #12
 8002040:	4013      	ands	r3, r2
 8002042:	2b0c      	cmp	r3, #12
 8002044:	d046      	beq.n	80020d4 <HAL_RCC_GetSysClockFreq+0xb8>
 8002046:	d848      	bhi.n	80020da <HAL_RCC_GetSysClockFreq+0xbe>
 8002048:	2b04      	cmp	r3, #4
 800204a:	d002      	beq.n	8002052 <HAL_RCC_GetSysClockFreq+0x36>
 800204c:	2b08      	cmp	r3, #8
 800204e:	d003      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0x3c>
 8002050:	e043      	b.n	80020da <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002052:	4b27      	ldr	r3, [pc, #156]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002054:	613b      	str	r3, [r7, #16]
      break;
 8002056:	e043      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	0c9b      	lsrs	r3, r3, #18
 800205c:	220f      	movs	r2, #15
 800205e:	4013      	ands	r3, r2
 8002060:	4a24      	ldr	r2, [pc, #144]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002062:	5cd3      	ldrb	r3, [r2, r3]
 8002064:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002066:	4b21      	ldr	r3, [pc, #132]	; (80020ec <HAL_RCC_GetSysClockFreq+0xd0>)
 8002068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206a:	220f      	movs	r2, #15
 800206c:	4013      	ands	r3, r2
 800206e:	4a22      	ldr	r2, [pc, #136]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002070:	5cd3      	ldrb	r3, [r2, r3]
 8002072:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	23c0      	movs	r3, #192	; 0xc0
 8002078:	025b      	lsls	r3, r3, #9
 800207a:	401a      	ands	r2, r3
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	025b      	lsls	r3, r3, #9
 8002080:	429a      	cmp	r2, r3
 8002082:	d109      	bne.n	8002098 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	481a      	ldr	r0, [pc, #104]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002088:	f7fe f848 	bl	800011c <__udivsi3>
 800208c:	0003      	movs	r3, r0
 800208e:	001a      	movs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4353      	muls	r3, r2
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	e01a      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	23c0      	movs	r3, #192	; 0xc0
 800209c:	025b      	lsls	r3, r3, #9
 800209e:	401a      	ands	r2, r3
 80020a0:	23c0      	movs	r3, #192	; 0xc0
 80020a2:	025b      	lsls	r3, r3, #9
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d109      	bne.n	80020bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020a8:	68b9      	ldr	r1, [r7, #8]
 80020aa:	4814      	ldr	r0, [pc, #80]	; (80020fc <HAL_RCC_GetSysClockFreq+0xe0>)
 80020ac:	f7fe f836 	bl	800011c <__udivsi3>
 80020b0:	0003      	movs	r3, r0
 80020b2:	001a      	movs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4353      	muls	r3, r2
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	e008      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020bc:	68b9      	ldr	r1, [r7, #8]
 80020be:	480c      	ldr	r0, [pc, #48]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 80020c0:	f7fe f82c 	bl	800011c <__udivsi3>
 80020c4:	0003      	movs	r3, r0
 80020c6:	001a      	movs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4353      	muls	r3, r2
 80020cc:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	613b      	str	r3, [r7, #16]
      break;
 80020d2:	e005      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80020d4:	4b09      	ldr	r3, [pc, #36]	; (80020fc <HAL_RCC_GetSysClockFreq+0xe0>)
 80020d6:	613b      	str	r3, [r7, #16]
      break;
 80020d8:	e002      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020da:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 80020dc:	613b      	str	r3, [r7, #16]
      break;
 80020de:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80020e0:	693b      	ldr	r3, [r7, #16]
}
 80020e2:	0018      	movs	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	b006      	add	sp, #24
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	40021000 	.word	0x40021000
 80020f0:	007a1200 	.word	0x007a1200
 80020f4:	080051a8 	.word	0x080051a8
 80020f8:	080051b8 	.word	0x080051b8
 80020fc:	02dc6c00 	.word	0x02dc6c00

08002100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002104:	4b02      	ldr	r3, [pc, #8]	; (8002110 <HAL_RCC_GetHCLKFreq+0x10>)
 8002106:	681b      	ldr	r3, [r3, #0]
}
 8002108:	0018      	movs	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	20000000 	.word	0x20000000

08002114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002118:	f7ff fff2 	bl	8002100 <HAL_RCC_GetHCLKFreq>
 800211c:	0001      	movs	r1, r0
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	0a1b      	lsrs	r3, r3, #8
 8002124:	2207      	movs	r2, #7
 8002126:	4013      	ands	r3, r2
 8002128:	4a04      	ldr	r2, [pc, #16]	; (800213c <HAL_RCC_GetPCLK1Freq+0x28>)
 800212a:	5cd3      	ldrb	r3, [r2, r3]
 800212c:	40d9      	lsrs	r1, r3
 800212e:	000b      	movs	r3, r1
}    
 8002130:	0018      	movs	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	40021000 	.word	0x40021000
 800213c:	080051a0 	.word	0x080051a0

08002140 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	2380      	movs	r3, #128	; 0x80
 8002156:	025b      	lsls	r3, r3, #9
 8002158:	4013      	ands	r3, r2
 800215a:	d100      	bne.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800215c:	e08e      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800215e:	2017      	movs	r0, #23
 8002160:	183b      	adds	r3, r7, r0
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002166:	4b6e      	ldr	r3, [pc, #440]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002168:	69da      	ldr	r2, [r3, #28]
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	055b      	lsls	r3, r3, #21
 800216e:	4013      	ands	r3, r2
 8002170:	d110      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	4b6b      	ldr	r3, [pc, #428]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002174:	69da      	ldr	r2, [r3, #28]
 8002176:	4b6a      	ldr	r3, [pc, #424]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002178:	2180      	movs	r1, #128	; 0x80
 800217a:	0549      	lsls	r1, r1, #21
 800217c:	430a      	orrs	r2, r1
 800217e:	61da      	str	r2, [r3, #28]
 8002180:	4b67      	ldr	r3, [pc, #412]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002182:	69da      	ldr	r2, [r3, #28]
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	055b      	lsls	r3, r3, #21
 8002188:	4013      	ands	r3, r2
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800218e:	183b      	adds	r3, r7, r0
 8002190:	2201      	movs	r2, #1
 8002192:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002194:	4b63      	ldr	r3, [pc, #396]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	4013      	ands	r3, r2
 800219e:	d11a      	bne.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a0:	4b60      	ldr	r3, [pc, #384]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b5f      	ldr	r3, [pc, #380]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80021a6:	2180      	movs	r1, #128	; 0x80
 80021a8:	0049      	lsls	r1, r1, #1
 80021aa:	430a      	orrs	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ae:	f7fe fe55 	bl	8000e5c <HAL_GetTick>
 80021b2:	0003      	movs	r3, r0
 80021b4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b6:	e008      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b8:	f7fe fe50 	bl	8000e5c <HAL_GetTick>
 80021bc:	0002      	movs	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b64      	cmp	r3, #100	; 0x64
 80021c4:	d901      	bls.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e0a6      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ca:	4b56      	ldr	r3, [pc, #344]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	2380      	movs	r3, #128	; 0x80
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	4013      	ands	r3, r2
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021d6:	4b52      	ldr	r3, [pc, #328]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021d8:	6a1a      	ldr	r2, [r3, #32]
 80021da:	23c0      	movs	r3, #192	; 0xc0
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4013      	ands	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d034      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	23c0      	movs	r3, #192	; 0xc0
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4013      	ands	r3, r2
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d02c      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021f8:	4b49      	ldr	r3, [pc, #292]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	4a4a      	ldr	r2, [pc, #296]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80021fe:	4013      	ands	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002202:	4b47      	ldr	r3, [pc, #284]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002204:	6a1a      	ldr	r2, [r3, #32]
 8002206:	4b46      	ldr	r3, [pc, #280]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002208:	2180      	movs	r1, #128	; 0x80
 800220a:	0249      	lsls	r1, r1, #9
 800220c:	430a      	orrs	r2, r1
 800220e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002210:	4b43      	ldr	r3, [pc, #268]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002212:	6a1a      	ldr	r2, [r3, #32]
 8002214:	4b42      	ldr	r3, [pc, #264]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002216:	4945      	ldr	r1, [pc, #276]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002218:	400a      	ands	r2, r1
 800221a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800221c:	4b40      	ldr	r3, [pc, #256]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2201      	movs	r2, #1
 8002226:	4013      	ands	r3, r2
 8002228:	d013      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222a:	f7fe fe17 	bl	8000e5c <HAL_GetTick>
 800222e:	0003      	movs	r3, r0
 8002230:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002232:	e009      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002234:	f7fe fe12 	bl	8000e5c <HAL_GetTick>
 8002238:	0002      	movs	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	4a3c      	ldr	r2, [pc, #240]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d901      	bls.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e067      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002248:	4b35      	ldr	r3, [pc, #212]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	2202      	movs	r2, #2
 800224e:	4013      	ands	r3, r2
 8002250:	d0f0      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002252:	4b33      	ldr	r3, [pc, #204]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	4a34      	ldr	r2, [pc, #208]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002258:	4013      	ands	r3, r2
 800225a:	0019      	movs	r1, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	4b2f      	ldr	r3, [pc, #188]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002262:	430a      	orrs	r2, r1
 8002264:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002266:	2317      	movs	r3, #23
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d105      	bne.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002270:	4b2b      	ldr	r3, [pc, #172]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002272:	69da      	ldr	r2, [r3, #28]
 8002274:	4b2a      	ldr	r3, [pc, #168]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002276:	492f      	ldr	r1, [pc, #188]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002278:	400a      	ands	r2, r1
 800227a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2201      	movs	r2, #1
 8002282:	4013      	ands	r3, r2
 8002284:	d009      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002286:	4b26      	ldr	r3, [pc, #152]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	2203      	movs	r2, #3
 800228c:	4393      	bics	r3, r2
 800228e:	0019      	movs	r1, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	4b22      	ldr	r3, [pc, #136]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002296:	430a      	orrs	r2, r1
 8002298:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2202      	movs	r2, #2
 80022a0:	4013      	ands	r3, r2
 80022a2:	d009      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022a4:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a8:	4a23      	ldr	r2, [pc, #140]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022aa:	4013      	ands	r3, r2
 80022ac:	0019      	movs	r1, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022b4:	430a      	orrs	r2, r1
 80022b6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2220      	movs	r2, #32
 80022be:	4013      	ands	r3, r2
 80022c0:	d009      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022c2:	4b17      	ldr	r3, [pc, #92]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	2210      	movs	r2, #16
 80022c8:	4393      	bics	r3, r2
 80022ca:	0019      	movs	r1, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	4b13      	ldr	r3, [pc, #76]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022d2:	430a      	orrs	r2, r1
 80022d4:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	029b      	lsls	r3, r3, #10
 80022de:	4013      	ands	r3, r2
 80022e0:	d009      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022e2:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	2280      	movs	r2, #128	; 0x80
 80022e8:	4393      	bics	r3, r2
 80022ea:	0019      	movs	r1, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	699a      	ldr	r2, [r3, #24]
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022f2:	430a      	orrs	r2, r1
 80022f4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	4013      	ands	r3, r2
 8002300:	d009      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	2240      	movs	r2, #64	; 0x40
 8002308:	4393      	bics	r3, r2
 800230a:	0019      	movs	r1, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	695a      	ldr	r2, [r3, #20]
 8002310:	4b03      	ldr	r3, [pc, #12]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002312:	430a      	orrs	r2, r1
 8002314:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	0018      	movs	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	b006      	add	sp, #24
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	40007000 	.word	0x40007000
 8002328:	fffffcff 	.word	0xfffffcff
 800232c:	fffeffff 	.word	0xfffeffff
 8002330:	00001388 	.word	0x00001388
 8002334:	efffffff 	.word	0xefffffff
 8002338:	fffcffff 	.word	0xfffcffff

0800233c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e042      	b.n	80023d4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	223d      	movs	r2, #61	; 0x3d
 8002352:	5c9b      	ldrb	r3, [r3, r2]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d107      	bne.n	800236a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	223c      	movs	r2, #60	; 0x3c
 800235e:	2100      	movs	r1, #0
 8002360:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	0018      	movs	r0, r3
 8002366:	f7fe fb0d 	bl	8000984 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	223d      	movs	r2, #61	; 0x3d
 800236e:	2102      	movs	r1, #2
 8002370:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3304      	adds	r3, #4
 800237a:	0019      	movs	r1, r3
 800237c:	0010      	movs	r0, r2
 800237e:	f000 fecf 	bl	8003120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2246      	movs	r2, #70	; 0x46
 8002386:	2101      	movs	r1, #1
 8002388:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	223e      	movs	r2, #62	; 0x3e
 800238e:	2101      	movs	r1, #1
 8002390:	5499      	strb	r1, [r3, r2]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	223f      	movs	r2, #63	; 0x3f
 8002396:	2101      	movs	r1, #1
 8002398:	5499      	strb	r1, [r3, r2]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2240      	movs	r2, #64	; 0x40
 800239e:	2101      	movs	r1, #1
 80023a0:	5499      	strb	r1, [r3, r2]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2241      	movs	r2, #65	; 0x41
 80023a6:	2101      	movs	r1, #1
 80023a8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2242      	movs	r2, #66	; 0x42
 80023ae:	2101      	movs	r1, #1
 80023b0:	5499      	strb	r1, [r3, r2]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2243      	movs	r2, #67	; 0x43
 80023b6:	2101      	movs	r1, #1
 80023b8:	5499      	strb	r1, [r3, r2]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2244      	movs	r2, #68	; 0x44
 80023be:	2101      	movs	r1, #1
 80023c0:	5499      	strb	r1, [r3, r2]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2245      	movs	r2, #69	; 0x45
 80023c6:	2101      	movs	r1, #1
 80023c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	223d      	movs	r2, #61	; 0x3d
 80023ce:	2101      	movs	r1, #1
 80023d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	0018      	movs	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b002      	add	sp, #8
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e042      	b.n	8002474 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	223d      	movs	r2, #61	; 0x3d
 80023f2:	5c9b      	ldrb	r3, [r3, r2]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d107      	bne.n	800240a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	223c      	movs	r2, #60	; 0x3c
 80023fe:	2100      	movs	r1, #0
 8002400:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	0018      	movs	r0, r3
 8002406:	f000 f839 	bl	800247c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	223d      	movs	r2, #61	; 0x3d
 800240e:	2102      	movs	r1, #2
 8002410:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3304      	adds	r3, #4
 800241a:	0019      	movs	r1, r3
 800241c:	0010      	movs	r0, r2
 800241e:	f000 fe7f 	bl	8003120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2246      	movs	r2, #70	; 0x46
 8002426:	2101      	movs	r1, #1
 8002428:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	223e      	movs	r2, #62	; 0x3e
 800242e:	2101      	movs	r1, #1
 8002430:	5499      	strb	r1, [r3, r2]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	223f      	movs	r2, #63	; 0x3f
 8002436:	2101      	movs	r1, #1
 8002438:	5499      	strb	r1, [r3, r2]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2240      	movs	r2, #64	; 0x40
 800243e:	2101      	movs	r1, #1
 8002440:	5499      	strb	r1, [r3, r2]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2241      	movs	r2, #65	; 0x41
 8002446:	2101      	movs	r1, #1
 8002448:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2242      	movs	r2, #66	; 0x42
 800244e:	2101      	movs	r1, #1
 8002450:	5499      	strb	r1, [r3, r2]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2243      	movs	r2, #67	; 0x43
 8002456:	2101      	movs	r1, #1
 8002458:	5499      	strb	r1, [r3, r2]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2244      	movs	r2, #68	; 0x44
 800245e:	2101      	movs	r1, #1
 8002460:	5499      	strb	r1, [r3, r2]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2245      	movs	r2, #69	; 0x45
 8002466:	2101      	movs	r1, #1
 8002468:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	223d      	movs	r2, #61	; 0x3d
 800246e:	2101      	movs	r1, #1
 8002470:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	0018      	movs	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	b002      	add	sp, #8
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002484:	46c0      	nop			; (mov r8, r8)
 8002486:	46bd      	mov	sp, r7
 8002488:	b002      	add	sp, #8
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
 8002498:	001a      	movs	r2, r3
 800249a:	1cbb      	adds	r3, r7, #2
 800249c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800249e:	2317      	movs	r3, #23
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d108      	bne.n	80024be <HAL_TIM_PWM_Start_DMA+0x32>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	223e      	movs	r2, #62	; 0x3e
 80024b0:	5c9b      	ldrb	r3, [r3, r2]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	3b02      	subs	r3, #2
 80024b6:	425a      	negs	r2, r3
 80024b8:	4153      	adcs	r3, r2
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	e01f      	b.n	80024fe <HAL_TIM_PWM_Start_DMA+0x72>
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d108      	bne.n	80024d6 <HAL_TIM_PWM_Start_DMA+0x4a>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	223f      	movs	r2, #63	; 0x3f
 80024c8:	5c9b      	ldrb	r3, [r3, r2]
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	3b02      	subs	r3, #2
 80024ce:	425a      	negs	r2, r3
 80024d0:	4153      	adcs	r3, r2
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	e013      	b.n	80024fe <HAL_TIM_PWM_Start_DMA+0x72>
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d108      	bne.n	80024ee <HAL_TIM_PWM_Start_DMA+0x62>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2240      	movs	r2, #64	; 0x40
 80024e0:	5c9b      	ldrb	r3, [r3, r2]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	3b02      	subs	r3, #2
 80024e6:	425a      	negs	r2, r3
 80024e8:	4153      	adcs	r3, r2
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	e007      	b.n	80024fe <HAL_TIM_PWM_Start_DMA+0x72>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2241      	movs	r2, #65	; 0x41
 80024f2:	5c9b      	ldrb	r3, [r3, r2]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	3b02      	subs	r3, #2
 80024f8:	425a      	negs	r2, r3
 80024fa:	4153      	adcs	r3, r2
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002502:	2302      	movs	r3, #2
 8002504:	e164      	b.n	80027d0 <HAL_TIM_PWM_Start_DMA+0x344>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d108      	bne.n	800251e <HAL_TIM_PWM_Start_DMA+0x92>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	223e      	movs	r2, #62	; 0x3e
 8002510:	5c9b      	ldrb	r3, [r3, r2]
 8002512:	b2db      	uxtb	r3, r3
 8002514:	3b01      	subs	r3, #1
 8002516:	425a      	negs	r2, r3
 8002518:	4153      	adcs	r3, r2
 800251a:	b2db      	uxtb	r3, r3
 800251c:	e01f      	b.n	800255e <HAL_TIM_PWM_Start_DMA+0xd2>
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2b04      	cmp	r3, #4
 8002522:	d108      	bne.n	8002536 <HAL_TIM_PWM_Start_DMA+0xaa>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	223f      	movs	r2, #63	; 0x3f
 8002528:	5c9b      	ldrb	r3, [r3, r2]
 800252a:	b2db      	uxtb	r3, r3
 800252c:	3b01      	subs	r3, #1
 800252e:	425a      	negs	r2, r3
 8002530:	4153      	adcs	r3, r2
 8002532:	b2db      	uxtb	r3, r3
 8002534:	e013      	b.n	800255e <HAL_TIM_PWM_Start_DMA+0xd2>
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2b08      	cmp	r3, #8
 800253a:	d108      	bne.n	800254e <HAL_TIM_PWM_Start_DMA+0xc2>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2240      	movs	r2, #64	; 0x40
 8002540:	5c9b      	ldrb	r3, [r3, r2]
 8002542:	b2db      	uxtb	r3, r3
 8002544:	3b01      	subs	r3, #1
 8002546:	425a      	negs	r2, r3
 8002548:	4153      	adcs	r3, r2
 800254a:	b2db      	uxtb	r3, r3
 800254c:	e007      	b.n	800255e <HAL_TIM_PWM_Start_DMA+0xd2>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2241      	movs	r2, #65	; 0x41
 8002552:	5c9b      	ldrb	r3, [r3, r2]
 8002554:	b2db      	uxtb	r3, r3
 8002556:	3b01      	subs	r3, #1
 8002558:	425a      	negs	r2, r3
 800255a:	4153      	adcs	r3, r2
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d025      	beq.n	80025ae <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) || (Length == 0U))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_TIM_PWM_Start_DMA+0xe4>
 8002568:	1cbb      	adds	r3, r7, #2
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e12d      	b.n	80027d0 <HAL_TIM_PWM_Start_DMA+0x344>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d104      	bne.n	8002584 <HAL_TIM_PWM_Start_DMA+0xf8>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	223e      	movs	r2, #62	; 0x3e
 800257e:	2102      	movs	r1, #2
 8002580:	5499      	strb	r1, [r3, r2]
 8002582:	e016      	b.n	80025b2 <HAL_TIM_PWM_Start_DMA+0x126>
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2b04      	cmp	r3, #4
 8002588:	d104      	bne.n	8002594 <HAL_TIM_PWM_Start_DMA+0x108>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	223f      	movs	r2, #63	; 0x3f
 800258e:	2102      	movs	r1, #2
 8002590:	5499      	strb	r1, [r3, r2]
 8002592:	e00e      	b.n	80025b2 <HAL_TIM_PWM_Start_DMA+0x126>
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b08      	cmp	r3, #8
 8002598:	d104      	bne.n	80025a4 <HAL_TIM_PWM_Start_DMA+0x118>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2240      	movs	r2, #64	; 0x40
 800259e:	2102      	movs	r1, #2
 80025a0:	5499      	strb	r1, [r3, r2]
 80025a2:	e006      	b.n	80025b2 <HAL_TIM_PWM_Start_DMA+0x126>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2241      	movs	r2, #65	; 0x41
 80025a8:	2102      	movs	r1, #2
 80025aa:	5499      	strb	r1, [r3, r2]
 80025ac:	e001      	b.n	80025b2 <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e10e      	b.n	80027d0 <HAL_TIM_PWM_Start_DMA+0x344>
  }

  switch (Channel)
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2b0c      	cmp	r3, #12
 80025b6:	d100      	bne.n	80025ba <HAL_TIM_PWM_Start_DMA+0x12e>
 80025b8:	e080      	b.n	80026bc <HAL_TIM_PWM_Start_DMA+0x230>
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b0c      	cmp	r3, #12
 80025be:	d900      	bls.n	80025c2 <HAL_TIM_PWM_Start_DMA+0x136>
 80025c0:	e0a1      	b.n	8002706 <HAL_TIM_PWM_Start_DMA+0x27a>
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d054      	beq.n	8002672 <HAL_TIM_PWM_Start_DMA+0x1e6>
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d900      	bls.n	80025d0 <HAL_TIM_PWM_Start_DMA+0x144>
 80025ce:	e09a      	b.n	8002706 <HAL_TIM_PWM_Start_DMA+0x27a>
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_TIM_PWM_Start_DMA+0x152>
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d025      	beq.n	8002628 <HAL_TIM_PWM_Start_DMA+0x19c>
 80025dc:	e093      	b.n	8002706 <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	4a7d      	ldr	r2, [pc, #500]	; (80027d8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80025e4:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	4a7c      	ldr	r2, [pc, #496]	; (80027dc <HAL_TIM_PWM_Start_DMA+0x350>)
 80025ec:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	4a7b      	ldr	r2, [pc, #492]	; (80027e0 <HAL_TIM_PWM_Start_DMA+0x354>)
 80025f4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	3334      	adds	r3, #52	; 0x34
 8002602:	001a      	movs	r2, r3
 8002604:	1cbb      	adds	r3, r7, #2
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	f7fe fd7c 	bl	8001104 <HAL_DMA_Start_IT>
 800260c:	1e03      	subs	r3, r0, #0
 800260e:	d001      	beq.n	8002614 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0dd      	b.n	80027d0 <HAL_TIM_PWM_Start_DMA+0x344>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2180      	movs	r1, #128	; 0x80
 8002620:	0089      	lsls	r1, r1, #2
 8002622:	430a      	orrs	r2, r1
 8002624:	60da      	str	r2, [r3, #12]
      break;
 8002626:	e073      	b.n	8002710 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262c:	4a6a      	ldr	r2, [pc, #424]	; (80027d8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800262e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002634:	4a69      	ldr	r2, [pc, #420]	; (80027dc <HAL_TIM_PWM_Start_DMA+0x350>)
 8002636:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263c:	4a68      	ldr	r2, [pc, #416]	; (80027e0 <HAL_TIM_PWM_Start_DMA+0x354>)
 800263e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	3338      	adds	r3, #56	; 0x38
 800264c:	001a      	movs	r2, r3
 800264e:	1cbb      	adds	r3, r7, #2
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	f7fe fd57 	bl	8001104 <HAL_DMA_Start_IT>
 8002656:	1e03      	subs	r3, r0, #0
 8002658:	d001      	beq.n	800265e <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e0b8      	b.n	80027d0 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2180      	movs	r1, #128	; 0x80
 800266a:	00c9      	lsls	r1, r1, #3
 800266c:	430a      	orrs	r2, r1
 800266e:	60da      	str	r2, [r3, #12]
      break;
 8002670:	e04e      	b.n	8002710 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002676:	4a58      	ldr	r2, [pc, #352]	; (80027d8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8002678:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267e:	4a57      	ldr	r2, [pc, #348]	; (80027dc <HAL_TIM_PWM_Start_DMA+0x350>)
 8002680:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002686:	4a56      	ldr	r2, [pc, #344]	; (80027e0 <HAL_TIM_PWM_Start_DMA+0x354>)
 8002688:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	333c      	adds	r3, #60	; 0x3c
 8002696:	001a      	movs	r2, r3
 8002698:	1cbb      	adds	r3, r7, #2
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	f7fe fd32 	bl	8001104 <HAL_DMA_Start_IT>
 80026a0:	1e03      	subs	r3, r0, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e093      	b.n	80027d0 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2180      	movs	r1, #128	; 0x80
 80026b4:	0109      	lsls	r1, r1, #4
 80026b6:	430a      	orrs	r2, r1
 80026b8:	60da      	str	r2, [r3, #12]
      break;
 80026ba:	e029      	b.n	8002710 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	4a45      	ldr	r2, [pc, #276]	; (80027d8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80026c2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	4a44      	ldr	r2, [pc, #272]	; (80027dc <HAL_TIM_PWM_Start_DMA+0x350>)
 80026ca:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	4a43      	ldr	r2, [pc, #268]	; (80027e0 <HAL_TIM_PWM_Start_DMA+0x354>)
 80026d2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	3340      	adds	r3, #64	; 0x40
 80026e0:	001a      	movs	r2, r3
 80026e2:	1cbb      	adds	r3, r7, #2
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	f7fe fd0d 	bl	8001104 <HAL_DMA_Start_IT>
 80026ea:	1e03      	subs	r3, r0, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e06e      	b.n	80027d0 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2180      	movs	r1, #128	; 0x80
 80026fe:	0149      	lsls	r1, r1, #5
 8002700:	430a      	orrs	r2, r1
 8002702:	60da      	str	r2, [r3, #12]
      break;
 8002704:	e004      	b.n	8002710 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 8002706:	2317      	movs	r3, #23
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	2201      	movs	r2, #1
 800270c:	701a      	strb	r2, [r3, #0]
      break;
 800270e:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002710:	2317      	movs	r3, #23
 8002712:	18fb      	adds	r3, r7, r3
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d157      	bne.n	80027ca <HAL_TIM_PWM_Start_DMA+0x33e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68b9      	ldr	r1, [r7, #8]
 8002720:	2201      	movs	r2, #1
 8002722:	0018      	movs	r0, r3
 8002724:	f001 f812 	bl	800374c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a2d      	ldr	r2, [pc, #180]	; (80027e4 <HAL_TIM_PWM_Start_DMA+0x358>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00e      	beq.n	8002750 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a2c      	ldr	r2, [pc, #176]	; (80027e8 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d009      	beq.n	8002750 <HAL_TIM_PWM_Start_DMA+0x2c4>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a2a      	ldr	r2, [pc, #168]	; (80027ec <HAL_TIM_PWM_Start_DMA+0x360>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d004      	beq.n	8002750 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a29      	ldr	r2, [pc, #164]	; (80027f0 <HAL_TIM_PWM_Start_DMA+0x364>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d101      	bne.n	8002754 <HAL_TIM_PWM_Start_DMA+0x2c8>
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <HAL_TIM_PWM_Start_DMA+0x2ca>
 8002754:	2300      	movs	r3, #0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d008      	beq.n	800276c <HAL_TIM_PWM_Start_DMA+0x2e0>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2180      	movs	r1, #128	; 0x80
 8002766:	0209      	lsls	r1, r1, #8
 8002768:	430a      	orrs	r2, r1
 800276a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a1c      	ldr	r2, [pc, #112]	; (80027e4 <HAL_TIM_PWM_Start_DMA+0x358>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d00f      	beq.n	8002796 <HAL_TIM_PWM_Start_DMA+0x30a>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	2380      	movs	r3, #128	; 0x80
 800277c:	05db      	lsls	r3, r3, #23
 800277e:	429a      	cmp	r2, r3
 8002780:	d009      	beq.n	8002796 <HAL_TIM_PWM_Start_DMA+0x30a>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a1b      	ldr	r2, [pc, #108]	; (80027f4 <HAL_TIM_PWM_Start_DMA+0x368>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d004      	beq.n	8002796 <HAL_TIM_PWM_Start_DMA+0x30a>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a15      	ldr	r2, [pc, #84]	; (80027e8 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d111      	bne.n	80027ba <HAL_TIM_PWM_Start_DMA+0x32e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2207      	movs	r2, #7
 800279e:	4013      	ands	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	2b06      	cmp	r3, #6
 80027a6:	d010      	beq.n	80027ca <HAL_TIM_PWM_Start_DMA+0x33e>
      {
        __HAL_TIM_ENABLE(htim);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2101      	movs	r1, #1
 80027b4:	430a      	orrs	r2, r1
 80027b6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b8:	e007      	b.n	80027ca <HAL_TIM_PWM_Start_DMA+0x33e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2101      	movs	r1, #1
 80027c6:	430a      	orrs	r2, r1
 80027c8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80027ca:	2317      	movs	r3, #23
 80027cc:	18fb      	adds	r3, r7, r3
 80027ce:	781b      	ldrb	r3, [r3, #0]
}
 80027d0:	0018      	movs	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b006      	add	sp, #24
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	0800300d 	.word	0x0800300d
 80027dc:	080030b7 	.word	0x080030b7
 80027e0:	08002f79 	.word	0x08002f79
 80027e4:	40012c00 	.word	0x40012c00
 80027e8:	40014000 	.word	0x40014000
 80027ec:	40014400 	.word	0x40014400
 80027f0:	40014800 	.word	0x40014800
 80027f4:	40000400 	.word	0x40000400

080027f8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002802:	230f      	movs	r3, #15
 8002804:	18fb      	adds	r3, r7, r3
 8002806:	2200      	movs	r2, #0
 8002808:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2b0c      	cmp	r3, #12
 800280e:	d039      	beq.n	8002884 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	2b0c      	cmp	r3, #12
 8002814:	d844      	bhi.n	80028a0 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2b08      	cmp	r3, #8
 800281a:	d025      	beq.n	8002868 <HAL_TIM_PWM_Stop_DMA+0x70>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	2b08      	cmp	r3, #8
 8002820:	d83e      	bhi.n	80028a0 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <HAL_TIM_PWM_Stop_DMA+0x38>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	2b04      	cmp	r3, #4
 800282c:	d00e      	beq.n	800284c <HAL_TIM_PWM_Stop_DMA+0x54>
 800282e:	e037      	b.n	80028a0 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4954      	ldr	r1, [pc, #336]	; (800298c <HAL_TIM_PWM_Stop_DMA+0x194>)
 800283c:	400a      	ands	r2, r1
 800283e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	0018      	movs	r0, r3
 8002846:	f7fe fcc3 	bl	80011d0 <HAL_DMA_Abort_IT>
      break;
 800284a:	e02e      	b.n	80028aa <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	494e      	ldr	r1, [pc, #312]	; (8002990 <HAL_TIM_PWM_Stop_DMA+0x198>)
 8002858:	400a      	ands	r2, r1
 800285a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002860:	0018      	movs	r0, r3
 8002862:	f7fe fcb5 	bl	80011d0 <HAL_DMA_Abort_IT>
      break;
 8002866:	e020      	b.n	80028aa <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4948      	ldr	r1, [pc, #288]	; (8002994 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8002874:	400a      	ands	r2, r1
 8002876:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287c:	0018      	movs	r0, r3
 800287e:	f7fe fca7 	bl	80011d0 <HAL_DMA_Abort_IT>
      break;
 8002882:	e012      	b.n	80028aa <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4942      	ldr	r1, [pc, #264]	; (8002998 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8002890:	400a      	ands	r2, r1
 8002892:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002898:	0018      	movs	r0, r3
 800289a:	f7fe fc99 	bl	80011d0 <HAL_DMA_Abort_IT>
      break;
 800289e:	e004      	b.n	80028aa <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 80028a0:	230f      	movs	r3, #15
 80028a2:	18fb      	adds	r3, r7, r3
 80028a4:	2201      	movs	r2, #1
 80028a6:	701a      	strb	r2, [r3, #0]
      break;
 80028a8:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80028aa:	230f      	movs	r3, #15
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d000      	beq.n	80028b6 <HAL_TIM_PWM_Stop_DMA+0xbe>
 80028b4:	e063      	b.n	800297e <HAL_TIM_PWM_Stop_DMA+0x186>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6839      	ldr	r1, [r7, #0]
 80028bc:	2200      	movs	r2, #0
 80028be:	0018      	movs	r0, r3
 80028c0:	f000 ff44 	bl	800374c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a34      	ldr	r2, [pc, #208]	; (800299c <HAL_TIM_PWM_Stop_DMA+0x1a4>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d00e      	beq.n	80028ec <HAL_TIM_PWM_Stop_DMA+0xf4>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a33      	ldr	r2, [pc, #204]	; (80029a0 <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d009      	beq.n	80028ec <HAL_TIM_PWM_Stop_DMA+0xf4>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a31      	ldr	r2, [pc, #196]	; (80029a4 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d004      	beq.n	80028ec <HAL_TIM_PWM_Stop_DMA+0xf4>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a30      	ldr	r2, [pc, #192]	; (80029a8 <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d101      	bne.n	80028f0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <HAL_TIM_PWM_Stop_DMA+0xfa>
 80028f0:	2300      	movs	r3, #0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d013      	beq.n	800291e <HAL_TIM_PWM_Stop_DMA+0x126>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	4a2b      	ldr	r2, [pc, #172]	; (80029ac <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 80028fe:	4013      	ands	r3, r2
 8002900:	d10d      	bne.n	800291e <HAL_TIM_PWM_Stop_DMA+0x126>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	4a29      	ldr	r2, [pc, #164]	; (80029b0 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 800290a:	4013      	ands	r3, r2
 800290c:	d107      	bne.n	800291e <HAL_TIM_PWM_Stop_DMA+0x126>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4926      	ldr	r1, [pc, #152]	; (80029b4 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 800291a:	400a      	ands	r2, r1
 800291c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	4a21      	ldr	r2, [pc, #132]	; (80029ac <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8002926:	4013      	ands	r3, r2
 8002928:	d10d      	bne.n	8002946 <HAL_TIM_PWM_Stop_DMA+0x14e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	4a1f      	ldr	r2, [pc, #124]	; (80029b0 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8002932:	4013      	ands	r3, r2
 8002934:	d107      	bne.n	8002946 <HAL_TIM_PWM_Stop_DMA+0x14e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2101      	movs	r1, #1
 8002942:	438a      	bics	r2, r1
 8002944:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d104      	bne.n	8002956 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	223e      	movs	r2, #62	; 0x3e
 8002950:	2101      	movs	r1, #1
 8002952:	5499      	strb	r1, [r3, r2]
 8002954:	e013      	b.n	800297e <HAL_TIM_PWM_Stop_DMA+0x186>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b04      	cmp	r3, #4
 800295a:	d104      	bne.n	8002966 <HAL_TIM_PWM_Stop_DMA+0x16e>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	223f      	movs	r2, #63	; 0x3f
 8002960:	2101      	movs	r1, #1
 8002962:	5499      	strb	r1, [r3, r2]
 8002964:	e00b      	b.n	800297e <HAL_TIM_PWM_Stop_DMA+0x186>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b08      	cmp	r3, #8
 800296a:	d104      	bne.n	8002976 <HAL_TIM_PWM_Stop_DMA+0x17e>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2240      	movs	r2, #64	; 0x40
 8002970:	2101      	movs	r1, #1
 8002972:	5499      	strb	r1, [r3, r2]
 8002974:	e003      	b.n	800297e <HAL_TIM_PWM_Stop_DMA+0x186>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2241      	movs	r2, #65	; 0x41
 800297a:	2101      	movs	r1, #1
 800297c:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 800297e:	230f      	movs	r3, #15
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	781b      	ldrb	r3, [r3, #0]
}
 8002984:	0018      	movs	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	b004      	add	sp, #16
 800298a:	bd80      	pop	{r7, pc}
 800298c:	fffffdff 	.word	0xfffffdff
 8002990:	fffffbff 	.word	0xfffffbff
 8002994:	fffff7ff 	.word	0xfffff7ff
 8002998:	ffffefff 	.word	0xffffefff
 800299c:	40012c00 	.word	0x40012c00
 80029a0:	40014000 	.word	0x40014000
 80029a4:	40014400 	.word	0x40014400
 80029a8:	40014800 	.word	0x40014800
 80029ac:	00001111 	.word	0x00001111
 80029b0:	00000444 	.word	0x00000444
 80029b4:	ffff7fff 	.word	0xffff7fff

080029b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	2202      	movs	r2, #2
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d124      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	2202      	movs	r2, #2
 80029d6:	4013      	ands	r3, r2
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d11d      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2203      	movs	r2, #3
 80029e2:	4252      	negs	r2, r2
 80029e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	2203      	movs	r2, #3
 80029f4:	4013      	ands	r3, r2
 80029f6:	d004      	beq.n	8002a02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	0018      	movs	r0, r3
 80029fc:	f000 fa9c 	bl	8002f38 <HAL_TIM_IC_CaptureCallback>
 8002a00:	e007      	b.n	8002a12 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	0018      	movs	r0, r3
 8002a06:	f000 fa8f 	bl	8002f28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f7fd fcf7 	bl	8000400 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	2204      	movs	r2, #4
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d125      	bne.n	8002a72 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d11e      	bne.n	8002a72 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2205      	movs	r2, #5
 8002a3a:	4252      	negs	r2, r2
 8002a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2202      	movs	r2, #2
 8002a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699a      	ldr	r2, [r3, #24]
 8002a4a:	23c0      	movs	r3, #192	; 0xc0
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d004      	beq.n	8002a5c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	0018      	movs	r0, r3
 8002a56:	f000 fa6f 	bl	8002f38 <HAL_TIM_IC_CaptureCallback>
 8002a5a:	e007      	b.n	8002a6c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f000 fa62 	bl	8002f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	0018      	movs	r0, r3
 8002a68:	f7fd fcca 	bl	8000400 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	2208      	movs	r2, #8
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d124      	bne.n	8002aca <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	2208      	movs	r2, #8
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d11d      	bne.n	8002aca <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2209      	movs	r2, #9
 8002a94:	4252      	negs	r2, r2
 8002a96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2204      	movs	r2, #4
 8002a9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d004      	beq.n	8002ab4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	0018      	movs	r0, r3
 8002aae:	f000 fa43 	bl	8002f38 <HAL_TIM_IC_CaptureCallback>
 8002ab2:	e007      	b.n	8002ac4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f000 fa36 	bl	8002f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f7fd fc9e 	bl	8000400 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	2210      	movs	r2, #16
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b10      	cmp	r3, #16
 8002ad6:	d125      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	2210      	movs	r2, #16
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b10      	cmp	r3, #16
 8002ae4:	d11e      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2211      	movs	r2, #17
 8002aec:	4252      	negs	r2, r2
 8002aee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2208      	movs	r2, #8
 8002af4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	69da      	ldr	r2, [r3, #28]
 8002afc:	23c0      	movs	r3, #192	; 0xc0
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4013      	ands	r3, r2
 8002b02:	d004      	beq.n	8002b0e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	0018      	movs	r0, r3
 8002b08:	f000 fa16 	bl	8002f38 <HAL_TIM_IC_CaptureCallback>
 8002b0c:	e007      	b.n	8002b1e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	0018      	movs	r0, r3
 8002b12:	f000 fa09 	bl	8002f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f7fd fc71 	bl	8000400 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d10f      	bne.n	8002b52 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d108      	bne.n	8002b52 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2202      	movs	r2, #2
 8002b46:	4252      	negs	r2, r2
 8002b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f000 f9e3 	bl	8002f18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	2280      	movs	r2, #128	; 0x80
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b80      	cmp	r3, #128	; 0x80
 8002b5e:	d10f      	bne.n	8002b80 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	2280      	movs	r2, #128	; 0x80
 8002b68:	4013      	ands	r3, r2
 8002b6a:	2b80      	cmp	r3, #128	; 0x80
 8002b6c:	d108      	bne.n	8002b80 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2281      	movs	r2, #129	; 0x81
 8002b74:	4252      	negs	r2, r2
 8002b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f000 fece 	bl	800391c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	2240      	movs	r2, #64	; 0x40
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b40      	cmp	r3, #64	; 0x40
 8002b8c:	d10f      	bne.n	8002bae <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	2240      	movs	r2, #64	; 0x40
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b40      	cmp	r3, #64	; 0x40
 8002b9a:	d108      	bne.n	8002bae <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2241      	movs	r2, #65	; 0x41
 8002ba2:	4252      	negs	r2, r2
 8002ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f000 f9d5 	bl	8002f58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d10f      	bne.n	8002bdc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	d108      	bne.n	8002bdc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2221      	movs	r2, #33	; 0x21
 8002bd0:	4252      	negs	r2, r2
 8002bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f000 fe98 	bl	800390c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bdc:	46c0      	nop			; (mov r8, r8)
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b002      	add	sp, #8
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf0:	2317      	movs	r3, #23
 8002bf2:	18fb      	adds	r3, r7, r3
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	223c      	movs	r2, #60	; 0x3c
 8002bfc:	5c9b      	ldrb	r3, [r3, r2]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e0ad      	b.n	8002d62 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	223c      	movs	r2, #60	; 0x3c
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b0c      	cmp	r3, #12
 8002c12:	d100      	bne.n	8002c16 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002c14:	e076      	b.n	8002d04 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b0c      	cmp	r3, #12
 8002c1a:	d900      	bls.n	8002c1e <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002c1c:	e095      	b.n	8002d4a <HAL_TIM_PWM_ConfigChannel+0x166>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d04e      	beq.n	8002cc2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d900      	bls.n	8002c2c <HAL_TIM_PWM_ConfigChannel+0x48>
 8002c2a:	e08e      	b.n	8002d4a <HAL_TIM_PWM_ConfigChannel+0x166>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_TIM_PWM_ConfigChannel+0x56>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d021      	beq.n	8002c7c <HAL_TIM_PWM_ConfigChannel+0x98>
 8002c38:	e087      	b.n	8002d4a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	0011      	movs	r1, r2
 8002c42:	0018      	movs	r0, r3
 8002c44:	f000 faec 	bl	8003220 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699a      	ldr	r2, [r3, #24]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2108      	movs	r1, #8
 8002c54:	430a      	orrs	r2, r1
 8002c56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	699a      	ldr	r2, [r3, #24]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2104      	movs	r1, #4
 8002c64:	438a      	bics	r2, r1
 8002c66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6999      	ldr	r1, [r3, #24]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	691a      	ldr	r2, [r3, #16]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	619a      	str	r2, [r3, #24]
      break;
 8002c7a:	e06b      	b.n	8002d54 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	0011      	movs	r1, r2
 8002c84:	0018      	movs	r0, r3
 8002c86:	f000 fb53 	bl	8003330 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699a      	ldr	r2, [r3, #24]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2180      	movs	r1, #128	; 0x80
 8002c96:	0109      	lsls	r1, r1, #4
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699a      	ldr	r2, [r3, #24]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4931      	ldr	r1, [pc, #196]	; (8002d6c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002ca8:	400a      	ands	r2, r1
 8002caa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6999      	ldr	r1, [r3, #24]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	021a      	lsls	r2, r3, #8
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	619a      	str	r2, [r3, #24]
      break;
 8002cc0:	e048      	b.n	8002d54 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	0011      	movs	r1, r2
 8002cca:	0018      	movs	r0, r3
 8002ccc:	f000 fbb4 	bl	8003438 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	69da      	ldr	r2, [r3, #28]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2108      	movs	r1, #8
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	69da      	ldr	r2, [r3, #28]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2104      	movs	r1, #4
 8002cec:	438a      	bics	r2, r1
 8002cee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	69d9      	ldr	r1, [r3, #28]
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	691a      	ldr	r2, [r3, #16]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	61da      	str	r2, [r3, #28]
      break;
 8002d02:	e027      	b.n	8002d54 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	0011      	movs	r1, r2
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f000 fc19 	bl	8003544 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	69da      	ldr	r2, [r3, #28]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2180      	movs	r1, #128	; 0x80
 8002d1e:	0109      	lsls	r1, r1, #4
 8002d20:	430a      	orrs	r2, r1
 8002d22:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	69da      	ldr	r2, [r3, #28]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	490f      	ldr	r1, [pc, #60]	; (8002d6c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002d30:	400a      	ands	r2, r1
 8002d32:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	69d9      	ldr	r1, [r3, #28]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	021a      	lsls	r2, r3, #8
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	61da      	str	r2, [r3, #28]
      break;
 8002d48:	e004      	b.n	8002d54 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002d4a:	2317      	movs	r3, #23
 8002d4c:	18fb      	adds	r3, r7, r3
 8002d4e:	2201      	movs	r2, #1
 8002d50:	701a      	strb	r2, [r3, #0]
      break;
 8002d52:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	223c      	movs	r2, #60	; 0x3c
 8002d58:	2100      	movs	r1, #0
 8002d5a:	5499      	strb	r1, [r3, r2]

  return status;
 8002d5c:	2317      	movs	r3, #23
 8002d5e:	18fb      	adds	r3, r7, r3
 8002d60:	781b      	ldrb	r3, [r3, #0]
}
 8002d62:	0018      	movs	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b006      	add	sp, #24
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	fffffbff 	.word	0xfffffbff

08002d70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d7a:	230f      	movs	r3, #15
 8002d7c:	18fb      	adds	r3, r7, r3
 8002d7e:	2200      	movs	r2, #0
 8002d80:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	223c      	movs	r2, #60	; 0x3c
 8002d86:	5c9b      	ldrb	r3, [r3, r2]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_TIM_ConfigClockSource+0x20>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e0bc      	b.n	8002f0a <HAL_TIM_ConfigClockSource+0x19a>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	223c      	movs	r2, #60	; 0x3c
 8002d94:	2101      	movs	r1, #1
 8002d96:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	223d      	movs	r2, #61	; 0x3d
 8002d9c:	2102      	movs	r1, #2
 8002d9e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2277      	movs	r2, #119	; 0x77
 8002dac:	4393      	bics	r3, r2
 8002dae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	4a58      	ldr	r2, [pc, #352]	; (8002f14 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	0192      	lsls	r2, r2, #6
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d040      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0xde>
 8002dcc:	2280      	movs	r2, #128	; 0x80
 8002dce:	0192      	lsls	r2, r2, #6
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d900      	bls.n	8002dd6 <HAL_TIM_ConfigClockSource+0x66>
 8002dd4:	e088      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x178>
 8002dd6:	2280      	movs	r2, #128	; 0x80
 8002dd8:	0152      	lsls	r2, r2, #5
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d100      	bne.n	8002de0 <HAL_TIM_ConfigClockSource+0x70>
 8002dde:	e088      	b.n	8002ef2 <HAL_TIM_ConfigClockSource+0x182>
 8002de0:	2280      	movs	r2, #128	; 0x80
 8002de2:	0152      	lsls	r2, r2, #5
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d900      	bls.n	8002dea <HAL_TIM_ConfigClockSource+0x7a>
 8002de8:	e07e      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x178>
 8002dea:	2b70      	cmp	r3, #112	; 0x70
 8002dec:	d018      	beq.n	8002e20 <HAL_TIM_ConfigClockSource+0xb0>
 8002dee:	d900      	bls.n	8002df2 <HAL_TIM_ConfigClockSource+0x82>
 8002df0:	e07a      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x178>
 8002df2:	2b60      	cmp	r3, #96	; 0x60
 8002df4:	d04f      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0x126>
 8002df6:	d900      	bls.n	8002dfa <HAL_TIM_ConfigClockSource+0x8a>
 8002df8:	e076      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x178>
 8002dfa:	2b50      	cmp	r3, #80	; 0x50
 8002dfc:	d03b      	beq.n	8002e76 <HAL_TIM_ConfigClockSource+0x106>
 8002dfe:	d900      	bls.n	8002e02 <HAL_TIM_ConfigClockSource+0x92>
 8002e00:	e072      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x178>
 8002e02:	2b40      	cmp	r3, #64	; 0x40
 8002e04:	d057      	beq.n	8002eb6 <HAL_TIM_ConfigClockSource+0x146>
 8002e06:	d900      	bls.n	8002e0a <HAL_TIM_ConfigClockSource+0x9a>
 8002e08:	e06e      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x178>
 8002e0a:	2b30      	cmp	r3, #48	; 0x30
 8002e0c:	d063      	beq.n	8002ed6 <HAL_TIM_ConfigClockSource+0x166>
 8002e0e:	d86b      	bhi.n	8002ee8 <HAL_TIM_ConfigClockSource+0x178>
 8002e10:	2b20      	cmp	r3, #32
 8002e12:	d060      	beq.n	8002ed6 <HAL_TIM_ConfigClockSource+0x166>
 8002e14:	d868      	bhi.n	8002ee8 <HAL_TIM_ConfigClockSource+0x178>
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d05d      	beq.n	8002ed6 <HAL_TIM_ConfigClockSource+0x166>
 8002e1a:	2b10      	cmp	r3, #16
 8002e1c:	d05b      	beq.n	8002ed6 <HAL_TIM_ConfigClockSource+0x166>
 8002e1e:	e063      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e30:	f000 fc6c 	bl	800370c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2277      	movs	r2, #119	; 0x77
 8002e40:	4313      	orrs	r3, r2
 8002e42:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	609a      	str	r2, [r3, #8]
      break;
 8002e4c:	e052      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e5e:	f000 fc55 	bl	800370c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2180      	movs	r1, #128	; 0x80
 8002e6e:	01c9      	lsls	r1, r1, #7
 8002e70:	430a      	orrs	r2, r1
 8002e72:	609a      	str	r2, [r3, #8]
      break;
 8002e74:	e03e      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e82:	001a      	movs	r2, r3
 8002e84:	f000 fbc8 	bl	8003618 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2150      	movs	r1, #80	; 0x50
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f000 fc22 	bl	80036d8 <TIM_ITRx_SetConfig>
      break;
 8002e94:	e02e      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ea2:	001a      	movs	r2, r3
 8002ea4:	f000 fbe6 	bl	8003674 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2160      	movs	r1, #96	; 0x60
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f000 fc12 	bl	80036d8 <TIM_ITRx_SetConfig>
      break;
 8002eb4:	e01e      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ec2:	001a      	movs	r2, r3
 8002ec4:	f000 fba8 	bl	8003618 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2140      	movs	r1, #64	; 0x40
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f000 fc02 	bl	80036d8 <TIM_ITRx_SetConfig>
      break;
 8002ed4:	e00e      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	0019      	movs	r1, r3
 8002ee0:	0010      	movs	r0, r2
 8002ee2:	f000 fbf9 	bl	80036d8 <TIM_ITRx_SetConfig>
      break;
 8002ee6:	e005      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002ee8:	230f      	movs	r3, #15
 8002eea:	18fb      	adds	r3, r7, r3
 8002eec:	2201      	movs	r2, #1
 8002eee:	701a      	strb	r2, [r3, #0]
      break;
 8002ef0:	e000      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002ef2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	223d      	movs	r2, #61	; 0x3d
 8002ef8:	2101      	movs	r1, #1
 8002efa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	223c      	movs	r2, #60	; 0x3c
 8002f00:	2100      	movs	r1, #0
 8002f02:	5499      	strb	r1, [r3, r2]

  return status;
 8002f04:	230f      	movs	r3, #15
 8002f06:	18fb      	adds	r3, r7, r3
 8002f08:	781b      	ldrb	r3, [r3, #0]
}
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	b004      	add	sp, #16
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	ffff00ff 	.word	0xffff00ff

08002f18 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002f20:	46c0      	nop			; (mov r8, r8)
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b002      	add	sp, #8
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f30:	46c0      	nop			; (mov r8, r8)
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b002      	add	sp, #8
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f40:	46c0      	nop			; (mov r8, r8)
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b002      	add	sp, #8
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002f50:	46c0      	nop			; (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b002      	add	sp, #8
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f60:	46c0      	nop			; (mov r8, r8)
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b002      	add	sp, #8
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002f70:	46c0      	nop			; (mov r8, r8)
 8002f72:	46bd      	mov	sp, r7
 8002f74:	b002      	add	sp, #8
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d107      	bne.n	8002fa0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2201      	movs	r2, #1
 8002f94:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	223e      	movs	r2, #62	; 0x3e
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	5499      	strb	r1, [r3, r2]
 8002f9e:	e02a      	b.n	8002ff6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d107      	bne.n	8002fba <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2202      	movs	r2, #2
 8002fae:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	223f      	movs	r2, #63	; 0x3f
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	5499      	strb	r1, [r3, r2]
 8002fb8:	e01d      	b.n	8002ff6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d107      	bne.n	8002fd4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2204      	movs	r2, #4
 8002fc8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2240      	movs	r2, #64	; 0x40
 8002fce:	2101      	movs	r1, #1
 8002fd0:	5499      	strb	r1, [r3, r2]
 8002fd2:	e010      	b.n	8002ff6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d107      	bne.n	8002fee <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2241      	movs	r2, #65	; 0x41
 8002fe8:	2101      	movs	r1, #1
 8002fea:	5499      	strb	r1, [r3, r2]
 8002fec:	e003      	b.n	8002ff6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	223d      	movs	r2, #61	; 0x3d
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f7ff ffb5 	bl	8002f68 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	771a      	strb	r2, [r3, #28]
}
 8003004:	46c0      	nop			; (mov r8, r8)
 8003006:	46bd      	mov	sp, r7
 8003008:	b004      	add	sp, #16
 800300a:	bd80      	pop	{r7, pc}

0800300c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	429a      	cmp	r2, r3
 8003022:	d10b      	bne.n	800303c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d136      	bne.n	80030a0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	223e      	movs	r2, #62	; 0x3e
 8003036:	2101      	movs	r1, #1
 8003038:	5499      	strb	r1, [r3, r2]
 800303a:	e031      	b.n	80030a0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	429a      	cmp	r2, r3
 8003044:	d10b      	bne.n	800305e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2202      	movs	r2, #2
 800304a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d125      	bne.n	80030a0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	223f      	movs	r2, #63	; 0x3f
 8003058:	2101      	movs	r1, #1
 800305a:	5499      	strb	r1, [r3, r2]
 800305c:	e020      	b.n	80030a0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	429a      	cmp	r2, r3
 8003066:	d10b      	bne.n	8003080 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2204      	movs	r2, #4
 800306c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d114      	bne.n	80030a0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2240      	movs	r2, #64	; 0x40
 800307a:	2101      	movs	r1, #1
 800307c:	5499      	strb	r1, [r3, r2]
 800307e:	e00f      	b.n	80030a0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	429a      	cmp	r2, r3
 8003088:	d10a      	bne.n	80030a0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2208      	movs	r2, #8
 800308e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d103      	bne.n	80030a0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2241      	movs	r2, #65	; 0x41
 800309c:	2101      	movs	r1, #1
 800309e:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	0018      	movs	r0, r3
 80030a4:	f7fd f9ac 	bl	8000400 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	771a      	strb	r2, [r3, #28]
}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b004      	add	sp, #16
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b084      	sub	sp, #16
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d103      	bne.n	80030d6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2201      	movs	r2, #1
 80030d2:	771a      	strb	r2, [r3, #28]
 80030d4:	e019      	b.n	800310a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d103      	bne.n	80030e8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2202      	movs	r2, #2
 80030e4:	771a      	strb	r2, [r3, #28]
 80030e6:	e010      	b.n	800310a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d103      	bne.n	80030fa <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2204      	movs	r2, #4
 80030f6:	771a      	strb	r2, [r3, #28]
 80030f8:	e007      	b.n	800310a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	429a      	cmp	r2, r3
 8003102:	d102      	bne.n	800310a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2208      	movs	r2, #8
 8003108:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	0018      	movs	r0, r3
 800310e:	f7ff ff1b 	bl	8002f48 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	771a      	strb	r2, [r3, #28]
}
 8003118:	46c0      	nop			; (mov r8, r8)
 800311a:	46bd      	mov	sp, r7
 800311c:	b004      	add	sp, #16
 800311e:	bd80      	pop	{r7, pc}

08003120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a34      	ldr	r2, [pc, #208]	; (8003204 <TIM_Base_SetConfig+0xe4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d008      	beq.n	800314a <TIM_Base_SetConfig+0x2a>
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	2380      	movs	r3, #128	; 0x80
 800313c:	05db      	lsls	r3, r3, #23
 800313e:	429a      	cmp	r2, r3
 8003140:	d003      	beq.n	800314a <TIM_Base_SetConfig+0x2a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a30      	ldr	r2, [pc, #192]	; (8003208 <TIM_Base_SetConfig+0xe8>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d108      	bne.n	800315c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2270      	movs	r2, #112	; 0x70
 800314e:	4393      	bics	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	4313      	orrs	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a29      	ldr	r2, [pc, #164]	; (8003204 <TIM_Base_SetConfig+0xe4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d018      	beq.n	8003196 <TIM_Base_SetConfig+0x76>
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	2380      	movs	r3, #128	; 0x80
 8003168:	05db      	lsls	r3, r3, #23
 800316a:	429a      	cmp	r2, r3
 800316c:	d013      	beq.n	8003196 <TIM_Base_SetConfig+0x76>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a25      	ldr	r2, [pc, #148]	; (8003208 <TIM_Base_SetConfig+0xe8>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00f      	beq.n	8003196 <TIM_Base_SetConfig+0x76>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a24      	ldr	r2, [pc, #144]	; (800320c <TIM_Base_SetConfig+0xec>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d00b      	beq.n	8003196 <TIM_Base_SetConfig+0x76>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a23      	ldr	r2, [pc, #140]	; (8003210 <TIM_Base_SetConfig+0xf0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d007      	beq.n	8003196 <TIM_Base_SetConfig+0x76>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a22      	ldr	r2, [pc, #136]	; (8003214 <TIM_Base_SetConfig+0xf4>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d003      	beq.n	8003196 <TIM_Base_SetConfig+0x76>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a21      	ldr	r2, [pc, #132]	; (8003218 <TIM_Base_SetConfig+0xf8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d108      	bne.n	80031a8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4a20      	ldr	r2, [pc, #128]	; (800321c <TIM_Base_SetConfig+0xfc>)
 800319a:	4013      	ands	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2280      	movs	r2, #128	; 0x80
 80031ac:	4393      	bics	r3, r2
 80031ae:	001a      	movs	r2, r3
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a0c      	ldr	r2, [pc, #48]	; (8003204 <TIM_Base_SetConfig+0xe4>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d00b      	beq.n	80031ee <TIM_Base_SetConfig+0xce>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a0d      	ldr	r2, [pc, #52]	; (8003210 <TIM_Base_SetConfig+0xf0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d007      	beq.n	80031ee <TIM_Base_SetConfig+0xce>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a0c      	ldr	r2, [pc, #48]	; (8003214 <TIM_Base_SetConfig+0xf4>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d003      	beq.n	80031ee <TIM_Base_SetConfig+0xce>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a0b      	ldr	r2, [pc, #44]	; (8003218 <TIM_Base_SetConfig+0xf8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d103      	bne.n	80031f6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	691a      	ldr	r2, [r3, #16]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	615a      	str	r2, [r3, #20]
}
 80031fc:	46c0      	nop			; (mov r8, r8)
 80031fe:	46bd      	mov	sp, r7
 8003200:	b004      	add	sp, #16
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40012c00 	.word	0x40012c00
 8003208:	40000400 	.word	0x40000400
 800320c:	40002000 	.word	0x40002000
 8003210:	40014000 	.word	0x40014000
 8003214:	40014400 	.word	0x40014400
 8003218:	40014800 	.word	0x40014800
 800321c:	fffffcff 	.word	0xfffffcff

08003220 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	2201      	movs	r2, #1
 8003230:	4393      	bics	r3, r2
 8003232:	001a      	movs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2270      	movs	r2, #112	; 0x70
 800324e:	4393      	bics	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2203      	movs	r2, #3
 8003256:	4393      	bics	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4313      	orrs	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	2202      	movs	r2, #2
 8003268:	4393      	bics	r3, r2
 800326a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	4313      	orrs	r3, r2
 8003274:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a27      	ldr	r2, [pc, #156]	; (8003318 <TIM_OC1_SetConfig+0xf8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00b      	beq.n	8003296 <TIM_OC1_SetConfig+0x76>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a26      	ldr	r2, [pc, #152]	; (800331c <TIM_OC1_SetConfig+0xfc>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d007      	beq.n	8003296 <TIM_OC1_SetConfig+0x76>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a25      	ldr	r2, [pc, #148]	; (8003320 <TIM_OC1_SetConfig+0x100>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d003      	beq.n	8003296 <TIM_OC1_SetConfig+0x76>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a24      	ldr	r2, [pc, #144]	; (8003324 <TIM_OC1_SetConfig+0x104>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d10c      	bne.n	80032b0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2208      	movs	r2, #8
 800329a:	4393      	bics	r3, r2
 800329c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2204      	movs	r2, #4
 80032ac:	4393      	bics	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a19      	ldr	r2, [pc, #100]	; (8003318 <TIM_OC1_SetConfig+0xf8>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d00b      	beq.n	80032d0 <TIM_OC1_SetConfig+0xb0>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a18      	ldr	r2, [pc, #96]	; (800331c <TIM_OC1_SetConfig+0xfc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d007      	beq.n	80032d0 <TIM_OC1_SetConfig+0xb0>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a17      	ldr	r2, [pc, #92]	; (8003320 <TIM_OC1_SetConfig+0x100>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d003      	beq.n	80032d0 <TIM_OC1_SetConfig+0xb0>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a16      	ldr	r2, [pc, #88]	; (8003324 <TIM_OC1_SetConfig+0x104>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d111      	bne.n	80032f4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4a15      	ldr	r2, [pc, #84]	; (8003328 <TIM_OC1_SetConfig+0x108>)
 80032d4:	4013      	ands	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4a14      	ldr	r2, [pc, #80]	; (800332c <TIM_OC1_SetConfig+0x10c>)
 80032dc:	4013      	ands	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	621a      	str	r2, [r3, #32]
}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	46bd      	mov	sp, r7
 8003312:	b006      	add	sp, #24
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	40012c00 	.word	0x40012c00
 800331c:	40014000 	.word	0x40014000
 8003320:	40014400 	.word	0x40014400
 8003324:	40014800 	.word	0x40014800
 8003328:	fffffeff 	.word	0xfffffeff
 800332c:	fffffdff 	.word	0xfffffdff

08003330 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	2210      	movs	r2, #16
 8003340:	4393      	bics	r3, r2
 8003342:	001a      	movs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4a2e      	ldr	r2, [pc, #184]	; (8003418 <TIM_OC2_SetConfig+0xe8>)
 800335e:	4013      	ands	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	4a2d      	ldr	r2, [pc, #180]	; (800341c <TIM_OC2_SetConfig+0xec>)
 8003366:	4013      	ands	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	021b      	lsls	r3, r3, #8
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	4313      	orrs	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2220      	movs	r2, #32
 800337a:	4393      	bics	r3, r2
 800337c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	4313      	orrs	r3, r2
 8003388:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a24      	ldr	r2, [pc, #144]	; (8003420 <TIM_OC2_SetConfig+0xf0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d10d      	bne.n	80033ae <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2280      	movs	r2, #128	; 0x80
 8003396:	4393      	bics	r3, r2
 8003398:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	2240      	movs	r2, #64	; 0x40
 80033aa:	4393      	bics	r3, r2
 80033ac:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a1b      	ldr	r2, [pc, #108]	; (8003420 <TIM_OC2_SetConfig+0xf0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00b      	beq.n	80033ce <TIM_OC2_SetConfig+0x9e>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a1a      	ldr	r2, [pc, #104]	; (8003424 <TIM_OC2_SetConfig+0xf4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d007      	beq.n	80033ce <TIM_OC2_SetConfig+0x9e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a19      	ldr	r2, [pc, #100]	; (8003428 <TIM_OC2_SetConfig+0xf8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d003      	beq.n	80033ce <TIM_OC2_SetConfig+0x9e>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a18      	ldr	r2, [pc, #96]	; (800342c <TIM_OC2_SetConfig+0xfc>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d113      	bne.n	80033f6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	4a17      	ldr	r2, [pc, #92]	; (8003430 <TIM_OC2_SetConfig+0x100>)
 80033d2:	4013      	ands	r3, r2
 80033d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	4a16      	ldr	r2, [pc, #88]	; (8003434 <TIM_OC2_SetConfig+0x104>)
 80033da:	4013      	ands	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	621a      	str	r2, [r3, #32]
}
 8003410:	46c0      	nop			; (mov r8, r8)
 8003412:	46bd      	mov	sp, r7
 8003414:	b006      	add	sp, #24
 8003416:	bd80      	pop	{r7, pc}
 8003418:	ffff8fff 	.word	0xffff8fff
 800341c:	fffffcff 	.word	0xfffffcff
 8003420:	40012c00 	.word	0x40012c00
 8003424:	40014000 	.word	0x40014000
 8003428:	40014400 	.word	0x40014400
 800342c:	40014800 	.word	0x40014800
 8003430:	fffffbff 	.word	0xfffffbff
 8003434:	fffff7ff 	.word	0xfffff7ff

08003438 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	4a35      	ldr	r2, [pc, #212]	; (800351c <TIM_OC3_SetConfig+0xe4>)
 8003448:	401a      	ands	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2270      	movs	r2, #112	; 0x70
 8003464:	4393      	bics	r3, r2
 8003466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2203      	movs	r2, #3
 800346c:	4393      	bics	r3, r2
 800346e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	4313      	orrs	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	4a28      	ldr	r2, [pc, #160]	; (8003520 <TIM_OC3_SetConfig+0xe8>)
 800347e:	4013      	ands	r3, r2
 8003480:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	021b      	lsls	r3, r3, #8
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	4313      	orrs	r3, r2
 800348c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a24      	ldr	r2, [pc, #144]	; (8003524 <TIM_OC3_SetConfig+0xec>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d10d      	bne.n	80034b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	4a23      	ldr	r2, [pc, #140]	; (8003528 <TIM_OC3_SetConfig+0xf0>)
 800349a:	4013      	ands	r3, r2
 800349c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	021b      	lsls	r3, r3, #8
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	4a1f      	ldr	r2, [pc, #124]	; (800352c <TIM_OC3_SetConfig+0xf4>)
 80034ae:	4013      	ands	r3, r2
 80034b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a1b      	ldr	r2, [pc, #108]	; (8003524 <TIM_OC3_SetConfig+0xec>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d00b      	beq.n	80034d2 <TIM_OC3_SetConfig+0x9a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a1c      	ldr	r2, [pc, #112]	; (8003530 <TIM_OC3_SetConfig+0xf8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d007      	beq.n	80034d2 <TIM_OC3_SetConfig+0x9a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a1b      	ldr	r2, [pc, #108]	; (8003534 <TIM_OC3_SetConfig+0xfc>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d003      	beq.n	80034d2 <TIM_OC3_SetConfig+0x9a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a1a      	ldr	r2, [pc, #104]	; (8003538 <TIM_OC3_SetConfig+0x100>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d113      	bne.n	80034fa <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	4a19      	ldr	r2, [pc, #100]	; (800353c <TIM_OC3_SetConfig+0x104>)
 80034d6:	4013      	ands	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4a18      	ldr	r2, [pc, #96]	; (8003540 <TIM_OC3_SetConfig+0x108>)
 80034de:	4013      	ands	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	621a      	str	r2, [r3, #32]
}
 8003514:	46c0      	nop			; (mov r8, r8)
 8003516:	46bd      	mov	sp, r7
 8003518:	b006      	add	sp, #24
 800351a:	bd80      	pop	{r7, pc}
 800351c:	fffffeff 	.word	0xfffffeff
 8003520:	fffffdff 	.word	0xfffffdff
 8003524:	40012c00 	.word	0x40012c00
 8003528:	fffff7ff 	.word	0xfffff7ff
 800352c:	fffffbff 	.word	0xfffffbff
 8003530:	40014000 	.word	0x40014000
 8003534:	40014400 	.word	0x40014400
 8003538:	40014800 	.word	0x40014800
 800353c:	ffffefff 	.word	0xffffefff
 8003540:	ffffdfff 	.word	0xffffdfff

08003544 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	4a28      	ldr	r2, [pc, #160]	; (80035f4 <TIM_OC4_SetConfig+0xb0>)
 8003554:	401a      	ands	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4a22      	ldr	r2, [pc, #136]	; (80035f8 <TIM_OC4_SetConfig+0xb4>)
 8003570:	4013      	ands	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4a21      	ldr	r2, [pc, #132]	; (80035fc <TIM_OC4_SetConfig+0xb8>)
 8003578:	4013      	ands	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	021b      	lsls	r3, r3, #8
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	4313      	orrs	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	4a1d      	ldr	r2, [pc, #116]	; (8003600 <TIM_OC4_SetConfig+0xbc>)
 800358c:	4013      	ands	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	031b      	lsls	r3, r3, #12
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	4313      	orrs	r3, r2
 800359a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a19      	ldr	r2, [pc, #100]	; (8003604 <TIM_OC4_SetConfig+0xc0>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d00b      	beq.n	80035bc <TIM_OC4_SetConfig+0x78>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a18      	ldr	r2, [pc, #96]	; (8003608 <TIM_OC4_SetConfig+0xc4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d007      	beq.n	80035bc <TIM_OC4_SetConfig+0x78>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a17      	ldr	r2, [pc, #92]	; (800360c <TIM_OC4_SetConfig+0xc8>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d003      	beq.n	80035bc <TIM_OC4_SetConfig+0x78>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a16      	ldr	r2, [pc, #88]	; (8003610 <TIM_OC4_SetConfig+0xcc>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d109      	bne.n	80035d0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	4a15      	ldr	r2, [pc, #84]	; (8003614 <TIM_OC4_SetConfig+0xd0>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	019b      	lsls	r3, r3, #6
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	621a      	str	r2, [r3, #32]
}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	46bd      	mov	sp, r7
 80035ee:	b006      	add	sp, #24
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	ffffefff 	.word	0xffffefff
 80035f8:	ffff8fff 	.word	0xffff8fff
 80035fc:	fffffcff 	.word	0xfffffcff
 8003600:	ffffdfff 	.word	0xffffdfff
 8003604:	40012c00 	.word	0x40012c00
 8003608:	40014000 	.word	0x40014000
 800360c:	40014400 	.word	0x40014400
 8003610:	40014800 	.word	0x40014800
 8003614:	ffffbfff 	.word	0xffffbfff

08003618 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	2201      	movs	r2, #1
 8003630:	4393      	bics	r3, r2
 8003632:	001a      	movs	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	22f0      	movs	r2, #240	; 0xf0
 8003642:	4393      	bics	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	220a      	movs	r2, #10
 8003654:	4393      	bics	r3, r2
 8003656:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	4313      	orrs	r3, r2
 800365e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	621a      	str	r2, [r3, #32]
}
 800366c:	46c0      	nop			; (mov r8, r8)
 800366e:	46bd      	mov	sp, r7
 8003670:	b006      	add	sp, #24
 8003672:	bd80      	pop	{r7, pc}

08003674 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	2210      	movs	r2, #16
 8003686:	4393      	bics	r3, r2
 8003688:	001a      	movs	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	4a0d      	ldr	r2, [pc, #52]	; (80036d4 <TIM_TI2_ConfigInputStage+0x60>)
 800369e:	4013      	ands	r3, r2
 80036a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	031b      	lsls	r3, r3, #12
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	22a0      	movs	r2, #160	; 0xa0
 80036b0:	4393      	bics	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	621a      	str	r2, [r3, #32]
}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	46bd      	mov	sp, r7
 80036ce:	b006      	add	sp, #24
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	ffff0fff 	.word	0xffff0fff

080036d8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2270      	movs	r2, #112	; 0x70
 80036ec:	4393      	bics	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	2207      	movs	r2, #7
 80036f8:	4313      	orrs	r3, r2
 80036fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	609a      	str	r2, [r3, #8]
}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	46bd      	mov	sp, r7
 8003706:	b004      	add	sp, #16
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	4a09      	ldr	r2, [pc, #36]	; (8003748 <TIM_ETR_SetConfig+0x3c>)
 8003724:	4013      	ands	r3, r2
 8003726:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	021a      	lsls	r2, r3, #8
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	431a      	orrs	r2, r3
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	4313      	orrs	r3, r2
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	609a      	str	r2, [r3, #8]
}
 8003740:	46c0      	nop			; (mov r8, r8)
 8003742:	46bd      	mov	sp, r7
 8003744:	b006      	add	sp, #24
 8003746:	bd80      	pop	{r7, pc}
 8003748:	ffff00ff 	.word	0xffff00ff

0800374c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	221f      	movs	r2, #31
 800375c:	4013      	ands	r3, r2
 800375e:	2201      	movs	r2, #1
 8003760:	409a      	lsls	r2, r3
 8003762:	0013      	movs	r3, r2
 8003764:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	43d2      	mvns	r2, r2
 800376e:	401a      	ands	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6a1a      	ldr	r2, [r3, #32]
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	211f      	movs	r1, #31
 800377c:	400b      	ands	r3, r1
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	4099      	lsls	r1, r3
 8003782:	000b      	movs	r3, r1
 8003784:	431a      	orrs	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	621a      	str	r2, [r3, #32]
}
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	46bd      	mov	sp, r7
 800378e:	b006      	add	sp, #24
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	223c      	movs	r2, #60	; 0x3c
 80037a2:	5c9b      	ldrb	r3, [r3, r2]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e047      	b.n	800383c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	223c      	movs	r2, #60	; 0x3c
 80037b0:	2101      	movs	r1, #1
 80037b2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	223d      	movs	r2, #61	; 0x3d
 80037b8:	2102      	movs	r1, #2
 80037ba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2270      	movs	r2, #112	; 0x70
 80037d0:	4393      	bics	r3, r2
 80037d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	4313      	orrs	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a16      	ldr	r2, [pc, #88]	; (8003844 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d00f      	beq.n	8003810 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	2380      	movs	r3, #128	; 0x80
 80037f6:	05db      	lsls	r3, r3, #23
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d009      	beq.n	8003810 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a11      	ldr	r2, [pc, #68]	; (8003848 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d004      	beq.n	8003810 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a10      	ldr	r2, [pc, #64]	; (800384c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d10c      	bne.n	800382a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2280      	movs	r2, #128	; 0x80
 8003814:	4393      	bics	r3, r2
 8003816:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	4313      	orrs	r3, r2
 8003820:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	223d      	movs	r2, #61	; 0x3d
 800382e:	2101      	movs	r1, #1
 8003830:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	223c      	movs	r2, #60	; 0x3c
 8003836:	2100      	movs	r1, #0
 8003838:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	0018      	movs	r0, r3
 800383e:	46bd      	mov	sp, r7
 8003840:	b004      	add	sp, #16
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40012c00 	.word	0x40012c00
 8003848:	40000400 	.word	0x40000400
 800384c:	40014000 	.word	0x40014000

08003850 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	223c      	movs	r2, #60	; 0x3c
 8003862:	5c9b      	ldrb	r3, [r3, r2]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003868:	2302      	movs	r3, #2
 800386a:	e03e      	b.n	80038ea <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	223c      	movs	r2, #60	; 0x3c
 8003870:	2101      	movs	r1, #1
 8003872:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	22ff      	movs	r2, #255	; 0xff
 8003878:	4393      	bics	r3, r2
 800387a:	001a      	movs	r2, r3
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4a1b      	ldr	r2, [pc, #108]	; (80038f4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003888:	401a      	ands	r2, r3
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4a18      	ldr	r2, [pc, #96]	; (80038f8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003896:	401a      	ands	r2, r3
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	4313      	orrs	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4a16      	ldr	r2, [pc, #88]	; (80038fc <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80038a4:	401a      	ands	r2, r3
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4a13      	ldr	r2, [pc, #76]	; (8003900 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80038b2:	401a      	ands	r2, r3
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4a11      	ldr	r2, [pc, #68]	; (8003904 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80038c0:	401a      	ands	r2, r3
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4a0e      	ldr	r2, [pc, #56]	; (8003908 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80038ce:	401a      	ands	r2, r3
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	223c      	movs	r2, #60	; 0x3c
 80038e4:	2100      	movs	r1, #0
 80038e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	0018      	movs	r0, r3
 80038ec:	46bd      	mov	sp, r7
 80038ee:	b004      	add	sp, #16
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	fffffcff 	.word	0xfffffcff
 80038f8:	fffffbff 	.word	0xfffffbff
 80038fc:	fffff7ff 	.word	0xfffff7ff
 8003900:	ffffefff 	.word	0xffffefff
 8003904:	ffffdfff 	.word	0xffffdfff
 8003908:	ffffbfff 	.word	0xffffbfff

0800390c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003914:	46c0      	nop			; (mov r8, r8)
 8003916:	46bd      	mov	sp, r7
 8003918:	b002      	add	sp, #8
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003924:	46c0      	nop			; (mov r8, r8)
 8003926:	46bd      	mov	sp, r7
 8003928:	b002      	add	sp, #8
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e044      	b.n	80039c8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003942:	2b00      	cmp	r3, #0
 8003944:	d107      	bne.n	8003956 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2278      	movs	r2, #120	; 0x78
 800394a:	2100      	movs	r1, #0
 800394c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	0018      	movs	r0, r3
 8003952:	f7fd f8b3 	bl	8000abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2224      	movs	r2, #36	; 0x24
 800395a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2101      	movs	r1, #1
 8003968:	438a      	bics	r2, r1
 800396a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	0018      	movs	r0, r3
 8003970:	f000 f830 	bl	80039d4 <UART_SetConfig>
 8003974:	0003      	movs	r3, r0
 8003976:	2b01      	cmp	r3, #1
 8003978:	d101      	bne.n	800397e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e024      	b.n	80039c8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	0018      	movs	r0, r3
 800398a:	f000 f9ab 	bl	8003ce4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	490d      	ldr	r1, [pc, #52]	; (80039d0 <HAL_UART_Init+0xa4>)
 800399a:	400a      	ands	r2, r1
 800399c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	212a      	movs	r1, #42	; 0x2a
 80039aa:	438a      	bics	r2, r1
 80039ac:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2101      	movs	r1, #1
 80039ba:	430a      	orrs	r2, r1
 80039bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	0018      	movs	r0, r3
 80039c2:	f000 fa43 	bl	8003e4c <UART_CheckIdleState>
 80039c6:	0003      	movs	r3, r0
}
 80039c8:	0018      	movs	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b002      	add	sp, #8
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	ffffb7ff 	.word	0xffffb7ff

080039d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039dc:	231e      	movs	r3, #30
 80039de:	18fb      	adds	r3, r7, r3
 80039e0:	2200      	movs	r2, #0
 80039e2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4aaf      	ldr	r2, [pc, #700]	; (8003cc0 <UART_SetConfig+0x2ec>)
 8003a04:	4013      	ands	r3, r2
 8003a06:	0019      	movs	r1, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	4aaa      	ldr	r2, [pc, #680]	; (8003cc4 <UART_SetConfig+0x2f0>)
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	0019      	movs	r1, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	4aa1      	ldr	r2, [pc, #644]	; (8003cc8 <UART_SetConfig+0x2f4>)
 8003a42:	4013      	ands	r3, r2
 8003a44:	0019      	movs	r1, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a9d      	ldr	r2, [pc, #628]	; (8003ccc <UART_SetConfig+0x2f8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d127      	bne.n	8003aaa <UART_SetConfig+0xd6>
 8003a5a:	4b9d      	ldr	r3, [pc, #628]	; (8003cd0 <UART_SetConfig+0x2fc>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	2203      	movs	r2, #3
 8003a60:	4013      	ands	r3, r2
 8003a62:	2b03      	cmp	r3, #3
 8003a64:	d00d      	beq.n	8003a82 <UART_SetConfig+0xae>
 8003a66:	d81b      	bhi.n	8003aa0 <UART_SetConfig+0xcc>
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d014      	beq.n	8003a96 <UART_SetConfig+0xc2>
 8003a6c:	d818      	bhi.n	8003aa0 <UART_SetConfig+0xcc>
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <UART_SetConfig+0xa4>
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d00a      	beq.n	8003a8c <UART_SetConfig+0xb8>
 8003a76:	e013      	b.n	8003aa0 <UART_SetConfig+0xcc>
 8003a78:	231f      	movs	r3, #31
 8003a7a:	18fb      	adds	r3, r7, r3
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	701a      	strb	r2, [r3, #0]
 8003a80:	e065      	b.n	8003b4e <UART_SetConfig+0x17a>
 8003a82:	231f      	movs	r3, #31
 8003a84:	18fb      	adds	r3, r7, r3
 8003a86:	2202      	movs	r2, #2
 8003a88:	701a      	strb	r2, [r3, #0]
 8003a8a:	e060      	b.n	8003b4e <UART_SetConfig+0x17a>
 8003a8c:	231f      	movs	r3, #31
 8003a8e:	18fb      	adds	r3, r7, r3
 8003a90:	2204      	movs	r2, #4
 8003a92:	701a      	strb	r2, [r3, #0]
 8003a94:	e05b      	b.n	8003b4e <UART_SetConfig+0x17a>
 8003a96:	231f      	movs	r3, #31
 8003a98:	18fb      	adds	r3, r7, r3
 8003a9a:	2208      	movs	r2, #8
 8003a9c:	701a      	strb	r2, [r3, #0]
 8003a9e:	e056      	b.n	8003b4e <UART_SetConfig+0x17a>
 8003aa0:	231f      	movs	r3, #31
 8003aa2:	18fb      	adds	r3, r7, r3
 8003aa4:	2210      	movs	r2, #16
 8003aa6:	701a      	strb	r2, [r3, #0]
 8003aa8:	e051      	b.n	8003b4e <UART_SetConfig+0x17a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a89      	ldr	r2, [pc, #548]	; (8003cd4 <UART_SetConfig+0x300>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d134      	bne.n	8003b1e <UART_SetConfig+0x14a>
 8003ab4:	4b86      	ldr	r3, [pc, #536]	; (8003cd0 <UART_SetConfig+0x2fc>)
 8003ab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ab8:	23c0      	movs	r3, #192	; 0xc0
 8003aba:	029b      	lsls	r3, r3, #10
 8003abc:	4013      	ands	r3, r2
 8003abe:	22c0      	movs	r2, #192	; 0xc0
 8003ac0:	0292      	lsls	r2, r2, #10
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d017      	beq.n	8003af6 <UART_SetConfig+0x122>
 8003ac6:	22c0      	movs	r2, #192	; 0xc0
 8003ac8:	0292      	lsls	r2, r2, #10
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d822      	bhi.n	8003b14 <UART_SetConfig+0x140>
 8003ace:	2280      	movs	r2, #128	; 0x80
 8003ad0:	0292      	lsls	r2, r2, #10
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d019      	beq.n	8003b0a <UART_SetConfig+0x136>
 8003ad6:	2280      	movs	r2, #128	; 0x80
 8003ad8:	0292      	lsls	r2, r2, #10
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d81a      	bhi.n	8003b14 <UART_SetConfig+0x140>
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d004      	beq.n	8003aec <UART_SetConfig+0x118>
 8003ae2:	2280      	movs	r2, #128	; 0x80
 8003ae4:	0252      	lsls	r2, r2, #9
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00a      	beq.n	8003b00 <UART_SetConfig+0x12c>
 8003aea:	e013      	b.n	8003b14 <UART_SetConfig+0x140>
 8003aec:	231f      	movs	r3, #31
 8003aee:	18fb      	adds	r3, r7, r3
 8003af0:	2200      	movs	r2, #0
 8003af2:	701a      	strb	r2, [r3, #0]
 8003af4:	e02b      	b.n	8003b4e <UART_SetConfig+0x17a>
 8003af6:	231f      	movs	r3, #31
 8003af8:	18fb      	adds	r3, r7, r3
 8003afa:	2202      	movs	r2, #2
 8003afc:	701a      	strb	r2, [r3, #0]
 8003afe:	e026      	b.n	8003b4e <UART_SetConfig+0x17a>
 8003b00:	231f      	movs	r3, #31
 8003b02:	18fb      	adds	r3, r7, r3
 8003b04:	2204      	movs	r2, #4
 8003b06:	701a      	strb	r2, [r3, #0]
 8003b08:	e021      	b.n	8003b4e <UART_SetConfig+0x17a>
 8003b0a:	231f      	movs	r3, #31
 8003b0c:	18fb      	adds	r3, r7, r3
 8003b0e:	2208      	movs	r2, #8
 8003b10:	701a      	strb	r2, [r3, #0]
 8003b12:	e01c      	b.n	8003b4e <UART_SetConfig+0x17a>
 8003b14:	231f      	movs	r3, #31
 8003b16:	18fb      	adds	r3, r7, r3
 8003b18:	2210      	movs	r2, #16
 8003b1a:	701a      	strb	r2, [r3, #0]
 8003b1c:	e017      	b.n	8003b4e <UART_SetConfig+0x17a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a6d      	ldr	r2, [pc, #436]	; (8003cd8 <UART_SetConfig+0x304>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d104      	bne.n	8003b32 <UART_SetConfig+0x15e>
 8003b28:	231f      	movs	r3, #31
 8003b2a:	18fb      	adds	r3, r7, r3
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	701a      	strb	r2, [r3, #0]
 8003b30:	e00d      	b.n	8003b4e <UART_SetConfig+0x17a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a69      	ldr	r2, [pc, #420]	; (8003cdc <UART_SetConfig+0x308>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d104      	bne.n	8003b46 <UART_SetConfig+0x172>
 8003b3c:	231f      	movs	r3, #31
 8003b3e:	18fb      	adds	r3, r7, r3
 8003b40:	2200      	movs	r2, #0
 8003b42:	701a      	strb	r2, [r3, #0]
 8003b44:	e003      	b.n	8003b4e <UART_SetConfig+0x17a>
 8003b46:	231f      	movs	r3, #31
 8003b48:	18fb      	adds	r3, r7, r3
 8003b4a:	2210      	movs	r2, #16
 8003b4c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69da      	ldr	r2, [r3, #28]
 8003b52:	2380      	movs	r3, #128	; 0x80
 8003b54:	021b      	lsls	r3, r3, #8
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d15c      	bne.n	8003c14 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8003b5a:	231f      	movs	r3, #31
 8003b5c:	18fb      	adds	r3, r7, r3
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	d015      	beq.n	8003b90 <UART_SetConfig+0x1bc>
 8003b64:	dc18      	bgt.n	8003b98 <UART_SetConfig+0x1c4>
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d00d      	beq.n	8003b86 <UART_SetConfig+0x1b2>
 8003b6a:	dc15      	bgt.n	8003b98 <UART_SetConfig+0x1c4>
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d002      	beq.n	8003b76 <UART_SetConfig+0x1a2>
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d005      	beq.n	8003b80 <UART_SetConfig+0x1ac>
 8003b74:	e010      	b.n	8003b98 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b76:	f7fe facd 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
 8003b7a:	0003      	movs	r3, r0
 8003b7c:	61bb      	str	r3, [r7, #24]
        break;
 8003b7e:	e012      	b.n	8003ba6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b80:	4b57      	ldr	r3, [pc, #348]	; (8003ce0 <UART_SetConfig+0x30c>)
 8003b82:	61bb      	str	r3, [r7, #24]
        break;
 8003b84:	e00f      	b.n	8003ba6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b86:	f7fe fa49 	bl	800201c <HAL_RCC_GetSysClockFreq>
 8003b8a:	0003      	movs	r3, r0
 8003b8c:	61bb      	str	r3, [r7, #24]
        break;
 8003b8e:	e00a      	b.n	8003ba6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b90:	2380      	movs	r3, #128	; 0x80
 8003b92:	021b      	lsls	r3, r3, #8
 8003b94:	61bb      	str	r3, [r7, #24]
        break;
 8003b96:	e006      	b.n	8003ba6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b9c:	231e      	movs	r3, #30
 8003b9e:	18fb      	adds	r3, r7, r3
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	701a      	strb	r2, [r3, #0]
        break;
 8003ba4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d100      	bne.n	8003bae <UART_SetConfig+0x1da>
 8003bac:	e07a      	b.n	8003ca4 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	005a      	lsls	r2, r3, #1
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	085b      	lsrs	r3, r3, #1
 8003bb8:	18d2      	adds	r2, r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	0019      	movs	r1, r3
 8003bc0:	0010      	movs	r0, r2
 8003bc2:	f7fc faab 	bl	800011c <__udivsi3>
 8003bc6:	0003      	movs	r3, r0
 8003bc8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	2b0f      	cmp	r3, #15
 8003bce:	d91c      	bls.n	8003c0a <UART_SetConfig+0x236>
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	2380      	movs	r3, #128	; 0x80
 8003bd4:	025b      	lsls	r3, r3, #9
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d217      	bcs.n	8003c0a <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	200e      	movs	r0, #14
 8003be0:	183b      	adds	r3, r7, r0
 8003be2:	210f      	movs	r1, #15
 8003be4:	438a      	bics	r2, r1
 8003be6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	085b      	lsrs	r3, r3, #1
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2207      	movs	r2, #7
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	b299      	uxth	r1, r3
 8003bf4:	183b      	adds	r3, r7, r0
 8003bf6:	183a      	adds	r2, r7, r0
 8003bf8:	8812      	ldrh	r2, [r2, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	183a      	adds	r2, r7, r0
 8003c04:	8812      	ldrh	r2, [r2, #0]
 8003c06:	60da      	str	r2, [r3, #12]
 8003c08:	e04c      	b.n	8003ca4 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003c0a:	231e      	movs	r3, #30
 8003c0c:	18fb      	adds	r3, r7, r3
 8003c0e:	2201      	movs	r2, #1
 8003c10:	701a      	strb	r2, [r3, #0]
 8003c12:	e047      	b.n	8003ca4 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c14:	231f      	movs	r3, #31
 8003c16:	18fb      	adds	r3, r7, r3
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d015      	beq.n	8003c4a <UART_SetConfig+0x276>
 8003c1e:	dc18      	bgt.n	8003c52 <UART_SetConfig+0x27e>
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d00d      	beq.n	8003c40 <UART_SetConfig+0x26c>
 8003c24:	dc15      	bgt.n	8003c52 <UART_SetConfig+0x27e>
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <UART_SetConfig+0x25c>
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d005      	beq.n	8003c3a <UART_SetConfig+0x266>
 8003c2e:	e010      	b.n	8003c52 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c30:	f7fe fa70 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
 8003c34:	0003      	movs	r3, r0
 8003c36:	61bb      	str	r3, [r7, #24]
        break;
 8003c38:	e012      	b.n	8003c60 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c3a:	4b29      	ldr	r3, [pc, #164]	; (8003ce0 <UART_SetConfig+0x30c>)
 8003c3c:	61bb      	str	r3, [r7, #24]
        break;
 8003c3e:	e00f      	b.n	8003c60 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c40:	f7fe f9ec 	bl	800201c <HAL_RCC_GetSysClockFreq>
 8003c44:	0003      	movs	r3, r0
 8003c46:	61bb      	str	r3, [r7, #24]
        break;
 8003c48:	e00a      	b.n	8003c60 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c4a:	2380      	movs	r3, #128	; 0x80
 8003c4c:	021b      	lsls	r3, r3, #8
 8003c4e:	61bb      	str	r3, [r7, #24]
        break;
 8003c50:	e006      	b.n	8003c60 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c56:	231e      	movs	r3, #30
 8003c58:	18fb      	adds	r3, r7, r3
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	701a      	strb	r2, [r3, #0]
        break;
 8003c5e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d01e      	beq.n	8003ca4 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	085a      	lsrs	r2, r3, #1
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	18d2      	adds	r2, r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	0019      	movs	r1, r3
 8003c76:	0010      	movs	r0, r2
 8003c78:	f7fc fa50 	bl	800011c <__udivsi3>
 8003c7c:	0003      	movs	r3, r0
 8003c7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	2b0f      	cmp	r3, #15
 8003c84:	d90a      	bls.n	8003c9c <UART_SetConfig+0x2c8>
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	2380      	movs	r3, #128	; 0x80
 8003c8a:	025b      	lsls	r3, r3, #9
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d205      	bcs.n	8003c9c <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	60da      	str	r2, [r3, #12]
 8003c9a:	e003      	b.n	8003ca4 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003c9c:	231e      	movs	r3, #30
 8003c9e:	18fb      	adds	r3, r7, r3
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003cb0:	231e      	movs	r3, #30
 8003cb2:	18fb      	adds	r3, r7, r3
 8003cb4:	781b      	ldrb	r3, [r3, #0]
}
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	b008      	add	sp, #32
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	efff69f3 	.word	0xefff69f3
 8003cc4:	ffffcfff 	.word	0xffffcfff
 8003cc8:	fffff4ff 	.word	0xfffff4ff
 8003ccc:	40013800 	.word	0x40013800
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	40004400 	.word	0x40004400
 8003cd8:	40004800 	.word	0x40004800
 8003cdc:	40004c00 	.word	0x40004c00
 8003ce0:	007a1200 	.word	0x007a1200

08003ce4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	d00b      	beq.n	8003d0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	4a4a      	ldr	r2, [pc, #296]	; (8003e28 <UART_AdvFeatureConfig+0x144>)
 8003cfe:	4013      	ands	r3, r2
 8003d00:	0019      	movs	r1, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	2202      	movs	r2, #2
 8003d14:	4013      	ands	r3, r2
 8003d16:	d00b      	beq.n	8003d30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	4a43      	ldr	r2, [pc, #268]	; (8003e2c <UART_AdvFeatureConfig+0x148>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	0019      	movs	r1, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	2204      	movs	r2, #4
 8003d36:	4013      	ands	r3, r2
 8003d38:	d00b      	beq.n	8003d52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	4a3b      	ldr	r2, [pc, #236]	; (8003e30 <UART_AdvFeatureConfig+0x14c>)
 8003d42:	4013      	ands	r3, r2
 8003d44:	0019      	movs	r1, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	2208      	movs	r2, #8
 8003d58:	4013      	ands	r3, r2
 8003d5a:	d00b      	beq.n	8003d74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	4a34      	ldr	r2, [pc, #208]	; (8003e34 <UART_AdvFeatureConfig+0x150>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	0019      	movs	r1, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	2210      	movs	r2, #16
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	d00b      	beq.n	8003d96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	4a2c      	ldr	r2, [pc, #176]	; (8003e38 <UART_AdvFeatureConfig+0x154>)
 8003d86:	4013      	ands	r3, r2
 8003d88:	0019      	movs	r1, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	d00b      	beq.n	8003db8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	4a25      	ldr	r2, [pc, #148]	; (8003e3c <UART_AdvFeatureConfig+0x158>)
 8003da8:	4013      	ands	r3, r2
 8003daa:	0019      	movs	r1, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	2240      	movs	r2, #64	; 0x40
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d01d      	beq.n	8003dfe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	4a1d      	ldr	r2, [pc, #116]	; (8003e40 <UART_AdvFeatureConfig+0x15c>)
 8003dca:	4013      	ands	r3, r2
 8003dcc:	0019      	movs	r1, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dde:	2380      	movs	r3, #128	; 0x80
 8003de0:	035b      	lsls	r3, r3, #13
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d10b      	bne.n	8003dfe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	4a15      	ldr	r2, [pc, #84]	; (8003e44 <UART_AdvFeatureConfig+0x160>)
 8003dee:	4013      	ands	r3, r2
 8003df0:	0019      	movs	r1, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	2280      	movs	r2, #128	; 0x80
 8003e04:	4013      	ands	r3, r2
 8003e06:	d00b      	beq.n	8003e20 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	4a0e      	ldr	r2, [pc, #56]	; (8003e48 <UART_AdvFeatureConfig+0x164>)
 8003e10:	4013      	ands	r3, r2
 8003e12:	0019      	movs	r1, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	605a      	str	r2, [r3, #4]
  }
}
 8003e20:	46c0      	nop			; (mov r8, r8)
 8003e22:	46bd      	mov	sp, r7
 8003e24:	b002      	add	sp, #8
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	fffdffff 	.word	0xfffdffff
 8003e2c:	fffeffff 	.word	0xfffeffff
 8003e30:	fffbffff 	.word	0xfffbffff
 8003e34:	ffff7fff 	.word	0xffff7fff
 8003e38:	ffffefff 	.word	0xffffefff
 8003e3c:	ffffdfff 	.word	0xffffdfff
 8003e40:	ffefffff 	.word	0xffefffff
 8003e44:	ff9fffff 	.word	0xff9fffff
 8003e48:	fff7ffff 	.word	0xfff7ffff

08003e4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b092      	sub	sp, #72	; 0x48
 8003e50:	af02      	add	r7, sp, #8
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2284      	movs	r2, #132	; 0x84
 8003e58:	2100      	movs	r1, #0
 8003e5a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e5c:	f7fc fffe 	bl	8000e5c <HAL_GetTick>
 8003e60:	0003      	movs	r3, r0
 8003e62:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2208      	movs	r2, #8
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d12c      	bne.n	8003ecc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e74:	2280      	movs	r2, #128	; 0x80
 8003e76:	0391      	lsls	r1, r2, #14
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	4a46      	ldr	r2, [pc, #280]	; (8003f94 <UART_CheckIdleState+0x148>)
 8003e7c:	9200      	str	r2, [sp, #0]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f000 f88c 	bl	8003f9c <UART_WaitOnFlagUntilTimeout>
 8003e84:	1e03      	subs	r3, r0, #0
 8003e86:	d021      	beq.n	8003ecc <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e88:	f3ef 8310 	mrs	r3, PRIMASK
 8003e8c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e90:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e92:	2301      	movs	r3, #1
 8003e94:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e98:	f383 8810 	msr	PRIMASK, r3
}
 8003e9c:	46c0      	nop			; (mov r8, r8)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2180      	movs	r1, #128	; 0x80
 8003eaa:	438a      	bics	r2, r1
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb4:	f383 8810 	msr	PRIMASK, r3
}
 8003eb8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2278      	movs	r2, #120	; 0x78
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e05f      	b.n	8003f8c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2204      	movs	r2, #4
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d146      	bne.n	8003f68 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003edc:	2280      	movs	r2, #128	; 0x80
 8003ede:	03d1      	lsls	r1, r2, #15
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	4a2c      	ldr	r2, [pc, #176]	; (8003f94 <UART_CheckIdleState+0x148>)
 8003ee4:	9200      	str	r2, [sp, #0]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f000 f858 	bl	8003f9c <UART_WaitOnFlagUntilTimeout>
 8003eec:	1e03      	subs	r3, r0, #0
 8003eee:	d03b      	beq.n	8003f68 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ef0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ef4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ef8:	637b      	str	r3, [r7, #52]	; 0x34
 8003efa:	2301      	movs	r3, #1
 8003efc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	f383 8810 	msr	PRIMASK, r3
}
 8003f04:	46c0      	nop			; (mov r8, r8)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4921      	ldr	r1, [pc, #132]	; (8003f98 <UART_CheckIdleState+0x14c>)
 8003f12:	400a      	ands	r2, r1
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f383 8810 	msr	PRIMASK, r3
}
 8003f20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f22:	f3ef 8310 	mrs	r3, PRIMASK
 8003f26:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f28:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2a:	633b      	str	r3, [r7, #48]	; 0x30
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	f383 8810 	msr	PRIMASK, r3
}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2101      	movs	r1, #1
 8003f44:	438a      	bics	r2, r1
 8003f46:	609a      	str	r2, [r3, #8]
 8003f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	f383 8810 	msr	PRIMASK, r3
}
 8003f52:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2280      	movs	r2, #128	; 0x80
 8003f58:	2120      	movs	r1, #32
 8003f5a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2278      	movs	r2, #120	; 0x78
 8003f60:	2100      	movs	r1, #0
 8003f62:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e011      	b.n	8003f8c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2280      	movs	r2, #128	; 0x80
 8003f72:	2120      	movs	r1, #32
 8003f74:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2278      	movs	r2, #120	; 0x78
 8003f86:	2100      	movs	r1, #0
 8003f88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	b010      	add	sp, #64	; 0x40
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	01ffffff 	.word	0x01ffffff
 8003f98:	fffffedf 	.word	0xfffffedf

08003f9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	603b      	str	r3, [r7, #0]
 8003fa8:	1dfb      	adds	r3, r7, #7
 8003faa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fac:	e04b      	b.n	8004046 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	d048      	beq.n	8004046 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fb4:	f7fc ff52 	bl	8000e5c <HAL_GetTick>
 8003fb8:	0002      	movs	r2, r0
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d302      	bcc.n	8003fca <UART_WaitOnFlagUntilTimeout+0x2e>
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e04b      	b.n	8004066 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2204      	movs	r2, #4
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	d035      	beq.n	8004046 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	2208      	movs	r2, #8
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d111      	bne.n	800400c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2208      	movs	r2, #8
 8003fee:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	f000 f83c 	bl	8004070 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2284      	movs	r2, #132	; 0x84
 8003ffc:	2108      	movs	r1, #8
 8003ffe:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2278      	movs	r2, #120	; 0x78
 8004004:	2100      	movs	r1, #0
 8004006:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e02c      	b.n	8004066 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	69da      	ldr	r2, [r3, #28]
 8004012:	2380      	movs	r3, #128	; 0x80
 8004014:	011b      	lsls	r3, r3, #4
 8004016:	401a      	ands	r2, r3
 8004018:	2380      	movs	r3, #128	; 0x80
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	429a      	cmp	r2, r3
 800401e:	d112      	bne.n	8004046 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2280      	movs	r2, #128	; 0x80
 8004026:	0112      	lsls	r2, r2, #4
 8004028:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	0018      	movs	r0, r3
 800402e:	f000 f81f 	bl	8004070 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2284      	movs	r2, #132	; 0x84
 8004036:	2120      	movs	r1, #32
 8004038:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2278      	movs	r2, #120	; 0x78
 800403e:	2100      	movs	r1, #0
 8004040:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e00f      	b.n	8004066 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	4013      	ands	r3, r2
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	425a      	negs	r2, r3
 8004056:	4153      	adcs	r3, r2
 8004058:	b2db      	uxtb	r3, r3
 800405a:	001a      	movs	r2, r3
 800405c:	1dfb      	adds	r3, r7, #7
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	429a      	cmp	r2, r3
 8004062:	d0a4      	beq.n	8003fae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	0018      	movs	r0, r3
 8004068:	46bd      	mov	sp, r7
 800406a:	b004      	add	sp, #16
 800406c:	bd80      	pop	{r7, pc}
	...

08004070 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08e      	sub	sp, #56	; 0x38
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004078:	f3ef 8310 	mrs	r3, PRIMASK
 800407c:	617b      	str	r3, [r7, #20]
  return(result);
 800407e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004080:	637b      	str	r3, [r7, #52]	; 0x34
 8004082:	2301      	movs	r3, #1
 8004084:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	f383 8810 	msr	PRIMASK, r3
}
 800408c:	46c0      	nop			; (mov r8, r8)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4926      	ldr	r1, [pc, #152]	; (8004134 <UART_EndRxTransfer+0xc4>)
 800409a:	400a      	ands	r2, r1
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	f383 8810 	msr	PRIMASK, r3
}
 80040a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040aa:	f3ef 8310 	mrs	r3, PRIMASK
 80040ae:	623b      	str	r3, [r7, #32]
  return(result);
 80040b0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b2:	633b      	str	r3, [r7, #48]	; 0x30
 80040b4:	2301      	movs	r3, #1
 80040b6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	f383 8810 	msr	PRIMASK, r3
}
 80040be:	46c0      	nop			; (mov r8, r8)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689a      	ldr	r2, [r3, #8]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2101      	movs	r1, #1
 80040cc:	438a      	bics	r2, r1
 80040ce:	609a      	str	r2, [r3, #8]
 80040d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d6:	f383 8810 	msr	PRIMASK, r3
}
 80040da:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d118      	bne.n	8004116 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040e4:	f3ef 8310 	mrs	r3, PRIMASK
 80040e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80040ea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ee:	2301      	movs	r3, #1
 80040f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f383 8810 	msr	PRIMASK, r3
}
 80040f8:	46c0      	nop			; (mov r8, r8)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2110      	movs	r1, #16
 8004106:	438a      	bics	r2, r1
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f383 8810 	msr	PRIMASK, r3
}
 8004114:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2280      	movs	r2, #128	; 0x80
 800411a:	2120      	movs	r1, #32
 800411c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	669a      	str	r2, [r3, #104]	; 0x68
}
 800412a:	46c0      	nop			; (mov r8, r8)
 800412c:	46bd      	mov	sp, r7
 800412e:	b00e      	add	sp, #56	; 0x38
 8004130:	bd80      	pop	{r7, pc}
 8004132:	46c0      	nop			; (mov r8, r8)
 8004134:	fffffedf 	.word	0xfffffedf

08004138 <rand>:
 8004138:	4b16      	ldr	r3, [pc, #88]	; (8004194 <rand+0x5c>)
 800413a:	b510      	push	{r4, lr}
 800413c:	681c      	ldr	r4, [r3, #0]
 800413e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004140:	2b00      	cmp	r3, #0
 8004142:	d116      	bne.n	8004172 <rand+0x3a>
 8004144:	2018      	movs	r0, #24
 8004146:	f000 fa31 	bl	80045ac <malloc>
 800414a:	1e02      	subs	r2, r0, #0
 800414c:	6320      	str	r0, [r4, #48]	; 0x30
 800414e:	d104      	bne.n	800415a <rand+0x22>
 8004150:	2152      	movs	r1, #82	; 0x52
 8004152:	4b11      	ldr	r3, [pc, #68]	; (8004198 <rand+0x60>)
 8004154:	4811      	ldr	r0, [pc, #68]	; (800419c <rand+0x64>)
 8004156:	f000 f9c1 	bl	80044dc <__assert_func>
 800415a:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <rand+0x68>)
 800415c:	2100      	movs	r1, #0
 800415e:	6003      	str	r3, [r0, #0]
 8004160:	4b10      	ldr	r3, [pc, #64]	; (80041a4 <rand+0x6c>)
 8004162:	6043      	str	r3, [r0, #4]
 8004164:	4b10      	ldr	r3, [pc, #64]	; (80041a8 <rand+0x70>)
 8004166:	6083      	str	r3, [r0, #8]
 8004168:	230b      	movs	r3, #11
 800416a:	8183      	strh	r3, [r0, #12]
 800416c:	2001      	movs	r0, #1
 800416e:	6110      	str	r0, [r2, #16]
 8004170:	6151      	str	r1, [r2, #20]
 8004172:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8004174:	4a0d      	ldr	r2, [pc, #52]	; (80041ac <rand+0x74>)
 8004176:	6920      	ldr	r0, [r4, #16]
 8004178:	6961      	ldr	r1, [r4, #20]
 800417a:	4b0d      	ldr	r3, [pc, #52]	; (80041b0 <rand+0x78>)
 800417c:	f7fc f85a 	bl	8000234 <__aeabi_lmul>
 8004180:	2201      	movs	r2, #1
 8004182:	2300      	movs	r3, #0
 8004184:	1880      	adds	r0, r0, r2
 8004186:	4159      	adcs	r1, r3
 8004188:	6120      	str	r0, [r4, #16]
 800418a:	6161      	str	r1, [r4, #20]
 800418c:	0048      	lsls	r0, r1, #1
 800418e:	0840      	lsrs	r0, r0, #1
 8004190:	bd10      	pop	{r4, pc}
 8004192:	46c0      	nop			; (mov r8, r8)
 8004194:	20000064 	.word	0x20000064
 8004198:	080051c8 	.word	0x080051c8
 800419c:	080051df 	.word	0x080051df
 80041a0:	abcd330e 	.word	0xabcd330e
 80041a4:	e66d1234 	.word	0xe66d1234
 80041a8:	0005deec 	.word	0x0005deec
 80041ac:	4c957f2d 	.word	0x4c957f2d
 80041b0:	5851f42d 	.word	0x5851f42d

080041b4 <std>:
 80041b4:	2300      	movs	r3, #0
 80041b6:	b510      	push	{r4, lr}
 80041b8:	0004      	movs	r4, r0
 80041ba:	6003      	str	r3, [r0, #0]
 80041bc:	6043      	str	r3, [r0, #4]
 80041be:	6083      	str	r3, [r0, #8]
 80041c0:	8181      	strh	r1, [r0, #12]
 80041c2:	6643      	str	r3, [r0, #100]	; 0x64
 80041c4:	81c2      	strh	r2, [r0, #14]
 80041c6:	6103      	str	r3, [r0, #16]
 80041c8:	6143      	str	r3, [r0, #20]
 80041ca:	6183      	str	r3, [r0, #24]
 80041cc:	0019      	movs	r1, r3
 80041ce:	2208      	movs	r2, #8
 80041d0:	305c      	adds	r0, #92	; 0x5c
 80041d2:	f000 f8ff 	bl	80043d4 <memset>
 80041d6:	4b0b      	ldr	r3, [pc, #44]	; (8004204 <std+0x50>)
 80041d8:	6224      	str	r4, [r4, #32]
 80041da:	6263      	str	r3, [r4, #36]	; 0x24
 80041dc:	4b0a      	ldr	r3, [pc, #40]	; (8004208 <std+0x54>)
 80041de:	62a3      	str	r3, [r4, #40]	; 0x28
 80041e0:	4b0a      	ldr	r3, [pc, #40]	; (800420c <std+0x58>)
 80041e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80041e4:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <std+0x5c>)
 80041e6:	6323      	str	r3, [r4, #48]	; 0x30
 80041e8:	4b0a      	ldr	r3, [pc, #40]	; (8004214 <std+0x60>)
 80041ea:	429c      	cmp	r4, r3
 80041ec:	d005      	beq.n	80041fa <std+0x46>
 80041ee:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <std+0x64>)
 80041f0:	429c      	cmp	r4, r3
 80041f2:	d002      	beq.n	80041fa <std+0x46>
 80041f4:	4b09      	ldr	r3, [pc, #36]	; (800421c <std+0x68>)
 80041f6:	429c      	cmp	r4, r3
 80041f8:	d103      	bne.n	8004202 <std+0x4e>
 80041fa:	0020      	movs	r0, r4
 80041fc:	3058      	adds	r0, #88	; 0x58
 80041fe:	f000 f969 	bl	80044d4 <__retarget_lock_init_recursive>
 8004202:	bd10      	pop	{r4, pc}
 8004204:	0800433d 	.word	0x0800433d
 8004208:	08004365 	.word	0x08004365
 800420c:	0800439d 	.word	0x0800439d
 8004210:	080043c9 	.word	0x080043c9
 8004214:	200002a8 	.word	0x200002a8
 8004218:	20000310 	.word	0x20000310
 800421c:	20000378 	.word	0x20000378

08004220 <stdio_exit_handler>:
 8004220:	b510      	push	{r4, lr}
 8004222:	4a03      	ldr	r2, [pc, #12]	; (8004230 <stdio_exit_handler+0x10>)
 8004224:	4903      	ldr	r1, [pc, #12]	; (8004234 <stdio_exit_handler+0x14>)
 8004226:	4804      	ldr	r0, [pc, #16]	; (8004238 <stdio_exit_handler+0x18>)
 8004228:	f000 f86c 	bl	8004304 <_fwalk_sglue>
 800422c:	bd10      	pop	{r4, pc}
 800422e:	46c0      	nop			; (mov r8, r8)
 8004230:	2000000c 	.word	0x2000000c
 8004234:	0800483d 	.word	0x0800483d
 8004238:	20000018 	.word	0x20000018

0800423c <cleanup_stdio>:
 800423c:	6841      	ldr	r1, [r0, #4]
 800423e:	4b0b      	ldr	r3, [pc, #44]	; (800426c <cleanup_stdio+0x30>)
 8004240:	b510      	push	{r4, lr}
 8004242:	0004      	movs	r4, r0
 8004244:	4299      	cmp	r1, r3
 8004246:	d001      	beq.n	800424c <cleanup_stdio+0x10>
 8004248:	f000 faf8 	bl	800483c <_fflush_r>
 800424c:	68a1      	ldr	r1, [r4, #8]
 800424e:	4b08      	ldr	r3, [pc, #32]	; (8004270 <cleanup_stdio+0x34>)
 8004250:	4299      	cmp	r1, r3
 8004252:	d002      	beq.n	800425a <cleanup_stdio+0x1e>
 8004254:	0020      	movs	r0, r4
 8004256:	f000 faf1 	bl	800483c <_fflush_r>
 800425a:	68e1      	ldr	r1, [r4, #12]
 800425c:	4b05      	ldr	r3, [pc, #20]	; (8004274 <cleanup_stdio+0x38>)
 800425e:	4299      	cmp	r1, r3
 8004260:	d002      	beq.n	8004268 <cleanup_stdio+0x2c>
 8004262:	0020      	movs	r0, r4
 8004264:	f000 faea 	bl	800483c <_fflush_r>
 8004268:	bd10      	pop	{r4, pc}
 800426a:	46c0      	nop			; (mov r8, r8)
 800426c:	200002a8 	.word	0x200002a8
 8004270:	20000310 	.word	0x20000310
 8004274:	20000378 	.word	0x20000378

08004278 <global_stdio_init.part.0>:
 8004278:	b510      	push	{r4, lr}
 800427a:	4b09      	ldr	r3, [pc, #36]	; (80042a0 <global_stdio_init.part.0+0x28>)
 800427c:	4a09      	ldr	r2, [pc, #36]	; (80042a4 <global_stdio_init.part.0+0x2c>)
 800427e:	2104      	movs	r1, #4
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	4809      	ldr	r0, [pc, #36]	; (80042a8 <global_stdio_init.part.0+0x30>)
 8004284:	2200      	movs	r2, #0
 8004286:	f7ff ff95 	bl	80041b4 <std>
 800428a:	2201      	movs	r2, #1
 800428c:	2109      	movs	r1, #9
 800428e:	4807      	ldr	r0, [pc, #28]	; (80042ac <global_stdio_init.part.0+0x34>)
 8004290:	f7ff ff90 	bl	80041b4 <std>
 8004294:	2202      	movs	r2, #2
 8004296:	2112      	movs	r1, #18
 8004298:	4805      	ldr	r0, [pc, #20]	; (80042b0 <global_stdio_init.part.0+0x38>)
 800429a:	f7ff ff8b 	bl	80041b4 <std>
 800429e:	bd10      	pop	{r4, pc}
 80042a0:	200003e0 	.word	0x200003e0
 80042a4:	08004221 	.word	0x08004221
 80042a8:	200002a8 	.word	0x200002a8
 80042ac:	20000310 	.word	0x20000310
 80042b0:	20000378 	.word	0x20000378

080042b4 <__sfp_lock_acquire>:
 80042b4:	b510      	push	{r4, lr}
 80042b6:	4802      	ldr	r0, [pc, #8]	; (80042c0 <__sfp_lock_acquire+0xc>)
 80042b8:	f000 f90d 	bl	80044d6 <__retarget_lock_acquire_recursive>
 80042bc:	bd10      	pop	{r4, pc}
 80042be:	46c0      	nop			; (mov r8, r8)
 80042c0:	200003e9 	.word	0x200003e9

080042c4 <__sfp_lock_release>:
 80042c4:	b510      	push	{r4, lr}
 80042c6:	4802      	ldr	r0, [pc, #8]	; (80042d0 <__sfp_lock_release+0xc>)
 80042c8:	f000 f906 	bl	80044d8 <__retarget_lock_release_recursive>
 80042cc:	bd10      	pop	{r4, pc}
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	200003e9 	.word	0x200003e9

080042d4 <__sinit>:
 80042d4:	b510      	push	{r4, lr}
 80042d6:	0004      	movs	r4, r0
 80042d8:	f7ff ffec 	bl	80042b4 <__sfp_lock_acquire>
 80042dc:	6a23      	ldr	r3, [r4, #32]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <__sinit+0x14>
 80042e2:	f7ff ffef 	bl	80042c4 <__sfp_lock_release>
 80042e6:	bd10      	pop	{r4, pc}
 80042e8:	4b04      	ldr	r3, [pc, #16]	; (80042fc <__sinit+0x28>)
 80042ea:	6223      	str	r3, [r4, #32]
 80042ec:	4b04      	ldr	r3, [pc, #16]	; (8004300 <__sinit+0x2c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1f6      	bne.n	80042e2 <__sinit+0xe>
 80042f4:	f7ff ffc0 	bl	8004278 <global_stdio_init.part.0>
 80042f8:	e7f3      	b.n	80042e2 <__sinit+0xe>
 80042fa:	46c0      	nop			; (mov r8, r8)
 80042fc:	0800423d 	.word	0x0800423d
 8004300:	200003e0 	.word	0x200003e0

08004304 <_fwalk_sglue>:
 8004304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004306:	0014      	movs	r4, r2
 8004308:	2600      	movs	r6, #0
 800430a:	9000      	str	r0, [sp, #0]
 800430c:	9101      	str	r1, [sp, #4]
 800430e:	68a5      	ldr	r5, [r4, #8]
 8004310:	6867      	ldr	r7, [r4, #4]
 8004312:	3f01      	subs	r7, #1
 8004314:	d504      	bpl.n	8004320 <_fwalk_sglue+0x1c>
 8004316:	6824      	ldr	r4, [r4, #0]
 8004318:	2c00      	cmp	r4, #0
 800431a:	d1f8      	bne.n	800430e <_fwalk_sglue+0xa>
 800431c:	0030      	movs	r0, r6
 800431e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004320:	89ab      	ldrh	r3, [r5, #12]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d908      	bls.n	8004338 <_fwalk_sglue+0x34>
 8004326:	220e      	movs	r2, #14
 8004328:	5eab      	ldrsh	r3, [r5, r2]
 800432a:	3301      	adds	r3, #1
 800432c:	d004      	beq.n	8004338 <_fwalk_sglue+0x34>
 800432e:	0029      	movs	r1, r5
 8004330:	9800      	ldr	r0, [sp, #0]
 8004332:	9b01      	ldr	r3, [sp, #4]
 8004334:	4798      	blx	r3
 8004336:	4306      	orrs	r6, r0
 8004338:	3568      	adds	r5, #104	; 0x68
 800433a:	e7ea      	b.n	8004312 <_fwalk_sglue+0xe>

0800433c <__sread>:
 800433c:	b570      	push	{r4, r5, r6, lr}
 800433e:	000c      	movs	r4, r1
 8004340:	250e      	movs	r5, #14
 8004342:	5f49      	ldrsh	r1, [r1, r5]
 8004344:	f000 f874 	bl	8004430 <_read_r>
 8004348:	2800      	cmp	r0, #0
 800434a:	db03      	blt.n	8004354 <__sread+0x18>
 800434c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800434e:	181b      	adds	r3, r3, r0
 8004350:	6563      	str	r3, [r4, #84]	; 0x54
 8004352:	bd70      	pop	{r4, r5, r6, pc}
 8004354:	89a3      	ldrh	r3, [r4, #12]
 8004356:	4a02      	ldr	r2, [pc, #8]	; (8004360 <__sread+0x24>)
 8004358:	4013      	ands	r3, r2
 800435a:	81a3      	strh	r3, [r4, #12]
 800435c:	e7f9      	b.n	8004352 <__sread+0x16>
 800435e:	46c0      	nop			; (mov r8, r8)
 8004360:	ffffefff 	.word	0xffffefff

08004364 <__swrite>:
 8004364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004366:	001f      	movs	r7, r3
 8004368:	898b      	ldrh	r3, [r1, #12]
 800436a:	0005      	movs	r5, r0
 800436c:	000c      	movs	r4, r1
 800436e:	0016      	movs	r6, r2
 8004370:	05db      	lsls	r3, r3, #23
 8004372:	d505      	bpl.n	8004380 <__swrite+0x1c>
 8004374:	230e      	movs	r3, #14
 8004376:	5ec9      	ldrsh	r1, [r1, r3]
 8004378:	2200      	movs	r2, #0
 800437a:	2302      	movs	r3, #2
 800437c:	f000 f844 	bl	8004408 <_lseek_r>
 8004380:	89a3      	ldrh	r3, [r4, #12]
 8004382:	4a05      	ldr	r2, [pc, #20]	; (8004398 <__swrite+0x34>)
 8004384:	0028      	movs	r0, r5
 8004386:	4013      	ands	r3, r2
 8004388:	81a3      	strh	r3, [r4, #12]
 800438a:	0032      	movs	r2, r6
 800438c:	230e      	movs	r3, #14
 800438e:	5ee1      	ldrsh	r1, [r4, r3]
 8004390:	003b      	movs	r3, r7
 8004392:	f000 f861 	bl	8004458 <_write_r>
 8004396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004398:	ffffefff 	.word	0xffffefff

0800439c <__sseek>:
 800439c:	b570      	push	{r4, r5, r6, lr}
 800439e:	000c      	movs	r4, r1
 80043a0:	250e      	movs	r5, #14
 80043a2:	5f49      	ldrsh	r1, [r1, r5]
 80043a4:	f000 f830 	bl	8004408 <_lseek_r>
 80043a8:	89a3      	ldrh	r3, [r4, #12]
 80043aa:	1c42      	adds	r2, r0, #1
 80043ac:	d103      	bne.n	80043b6 <__sseek+0x1a>
 80043ae:	4a05      	ldr	r2, [pc, #20]	; (80043c4 <__sseek+0x28>)
 80043b0:	4013      	ands	r3, r2
 80043b2:	81a3      	strh	r3, [r4, #12]
 80043b4:	bd70      	pop	{r4, r5, r6, pc}
 80043b6:	2280      	movs	r2, #128	; 0x80
 80043b8:	0152      	lsls	r2, r2, #5
 80043ba:	4313      	orrs	r3, r2
 80043bc:	81a3      	strh	r3, [r4, #12]
 80043be:	6560      	str	r0, [r4, #84]	; 0x54
 80043c0:	e7f8      	b.n	80043b4 <__sseek+0x18>
 80043c2:	46c0      	nop			; (mov r8, r8)
 80043c4:	ffffefff 	.word	0xffffefff

080043c8 <__sclose>:
 80043c8:	b510      	push	{r4, lr}
 80043ca:	230e      	movs	r3, #14
 80043cc:	5ec9      	ldrsh	r1, [r1, r3]
 80043ce:	f000 f809 	bl	80043e4 <_close_r>
 80043d2:	bd10      	pop	{r4, pc}

080043d4 <memset>:
 80043d4:	0003      	movs	r3, r0
 80043d6:	1882      	adds	r2, r0, r2
 80043d8:	4293      	cmp	r3, r2
 80043da:	d100      	bne.n	80043de <memset+0xa>
 80043dc:	4770      	bx	lr
 80043de:	7019      	strb	r1, [r3, #0]
 80043e0:	3301      	adds	r3, #1
 80043e2:	e7f9      	b.n	80043d8 <memset+0x4>

080043e4 <_close_r>:
 80043e4:	2300      	movs	r3, #0
 80043e6:	b570      	push	{r4, r5, r6, lr}
 80043e8:	4d06      	ldr	r5, [pc, #24]	; (8004404 <_close_r+0x20>)
 80043ea:	0004      	movs	r4, r0
 80043ec:	0008      	movs	r0, r1
 80043ee:	602b      	str	r3, [r5, #0]
 80043f0:	f7fc fc47 	bl	8000c82 <_close>
 80043f4:	1c43      	adds	r3, r0, #1
 80043f6:	d103      	bne.n	8004400 <_close_r+0x1c>
 80043f8:	682b      	ldr	r3, [r5, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d000      	beq.n	8004400 <_close_r+0x1c>
 80043fe:	6023      	str	r3, [r4, #0]
 8004400:	bd70      	pop	{r4, r5, r6, pc}
 8004402:	46c0      	nop			; (mov r8, r8)
 8004404:	200003e4 	.word	0x200003e4

08004408 <_lseek_r>:
 8004408:	b570      	push	{r4, r5, r6, lr}
 800440a:	0004      	movs	r4, r0
 800440c:	0008      	movs	r0, r1
 800440e:	0011      	movs	r1, r2
 8004410:	001a      	movs	r2, r3
 8004412:	2300      	movs	r3, #0
 8004414:	4d05      	ldr	r5, [pc, #20]	; (800442c <_lseek_r+0x24>)
 8004416:	602b      	str	r3, [r5, #0]
 8004418:	f7fc fc54 	bl	8000cc4 <_lseek>
 800441c:	1c43      	adds	r3, r0, #1
 800441e:	d103      	bne.n	8004428 <_lseek_r+0x20>
 8004420:	682b      	ldr	r3, [r5, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d000      	beq.n	8004428 <_lseek_r+0x20>
 8004426:	6023      	str	r3, [r4, #0]
 8004428:	bd70      	pop	{r4, r5, r6, pc}
 800442a:	46c0      	nop			; (mov r8, r8)
 800442c:	200003e4 	.word	0x200003e4

08004430 <_read_r>:
 8004430:	b570      	push	{r4, r5, r6, lr}
 8004432:	0004      	movs	r4, r0
 8004434:	0008      	movs	r0, r1
 8004436:	0011      	movs	r1, r2
 8004438:	001a      	movs	r2, r3
 800443a:	2300      	movs	r3, #0
 800443c:	4d05      	ldr	r5, [pc, #20]	; (8004454 <_read_r+0x24>)
 800443e:	602b      	str	r3, [r5, #0]
 8004440:	f7fc fbe6 	bl	8000c10 <_read>
 8004444:	1c43      	adds	r3, r0, #1
 8004446:	d103      	bne.n	8004450 <_read_r+0x20>
 8004448:	682b      	ldr	r3, [r5, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d000      	beq.n	8004450 <_read_r+0x20>
 800444e:	6023      	str	r3, [r4, #0]
 8004450:	bd70      	pop	{r4, r5, r6, pc}
 8004452:	46c0      	nop			; (mov r8, r8)
 8004454:	200003e4 	.word	0x200003e4

08004458 <_write_r>:
 8004458:	b570      	push	{r4, r5, r6, lr}
 800445a:	0004      	movs	r4, r0
 800445c:	0008      	movs	r0, r1
 800445e:	0011      	movs	r1, r2
 8004460:	001a      	movs	r2, r3
 8004462:	2300      	movs	r3, #0
 8004464:	4d05      	ldr	r5, [pc, #20]	; (800447c <_write_r+0x24>)
 8004466:	602b      	str	r3, [r5, #0]
 8004468:	f7fc fbef 	bl	8000c4a <_write>
 800446c:	1c43      	adds	r3, r0, #1
 800446e:	d103      	bne.n	8004478 <_write_r+0x20>
 8004470:	682b      	ldr	r3, [r5, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d000      	beq.n	8004478 <_write_r+0x20>
 8004476:	6023      	str	r3, [r4, #0]
 8004478:	bd70      	pop	{r4, r5, r6, pc}
 800447a:	46c0      	nop			; (mov r8, r8)
 800447c:	200003e4 	.word	0x200003e4

08004480 <__errno>:
 8004480:	4b01      	ldr	r3, [pc, #4]	; (8004488 <__errno+0x8>)
 8004482:	6818      	ldr	r0, [r3, #0]
 8004484:	4770      	bx	lr
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	20000064 	.word	0x20000064

0800448c <__libc_init_array>:
 800448c:	b570      	push	{r4, r5, r6, lr}
 800448e:	2600      	movs	r6, #0
 8004490:	4c0c      	ldr	r4, [pc, #48]	; (80044c4 <__libc_init_array+0x38>)
 8004492:	4d0d      	ldr	r5, [pc, #52]	; (80044c8 <__libc_init_array+0x3c>)
 8004494:	1b64      	subs	r4, r4, r5
 8004496:	10a4      	asrs	r4, r4, #2
 8004498:	42a6      	cmp	r6, r4
 800449a:	d109      	bne.n	80044b0 <__libc_init_array+0x24>
 800449c:	2600      	movs	r6, #0
 800449e:	f000 fe6b 	bl	8005178 <_init>
 80044a2:	4c0a      	ldr	r4, [pc, #40]	; (80044cc <__libc_init_array+0x40>)
 80044a4:	4d0a      	ldr	r5, [pc, #40]	; (80044d0 <__libc_init_array+0x44>)
 80044a6:	1b64      	subs	r4, r4, r5
 80044a8:	10a4      	asrs	r4, r4, #2
 80044aa:	42a6      	cmp	r6, r4
 80044ac:	d105      	bne.n	80044ba <__libc_init_array+0x2e>
 80044ae:	bd70      	pop	{r4, r5, r6, pc}
 80044b0:	00b3      	lsls	r3, r6, #2
 80044b2:	58eb      	ldr	r3, [r5, r3]
 80044b4:	4798      	blx	r3
 80044b6:	3601      	adds	r6, #1
 80044b8:	e7ee      	b.n	8004498 <__libc_init_array+0xc>
 80044ba:	00b3      	lsls	r3, r6, #2
 80044bc:	58eb      	ldr	r3, [r5, r3]
 80044be:	4798      	blx	r3
 80044c0:	3601      	adds	r6, #1
 80044c2:	e7f2      	b.n	80044aa <__libc_init_array+0x1e>
 80044c4:	080052a8 	.word	0x080052a8
 80044c8:	080052a8 	.word	0x080052a8
 80044cc:	080052ac 	.word	0x080052ac
 80044d0:	080052a8 	.word	0x080052a8

080044d4 <__retarget_lock_init_recursive>:
 80044d4:	4770      	bx	lr

080044d6 <__retarget_lock_acquire_recursive>:
 80044d6:	4770      	bx	lr

080044d8 <__retarget_lock_release_recursive>:
 80044d8:	4770      	bx	lr
	...

080044dc <__assert_func>:
 80044dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80044de:	0014      	movs	r4, r2
 80044e0:	001a      	movs	r2, r3
 80044e2:	4b09      	ldr	r3, [pc, #36]	; (8004508 <__assert_func+0x2c>)
 80044e4:	0005      	movs	r5, r0
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	000e      	movs	r6, r1
 80044ea:	68d8      	ldr	r0, [r3, #12]
 80044ec:	4b07      	ldr	r3, [pc, #28]	; (800450c <__assert_func+0x30>)
 80044ee:	2c00      	cmp	r4, #0
 80044f0:	d101      	bne.n	80044f6 <__assert_func+0x1a>
 80044f2:	4b07      	ldr	r3, [pc, #28]	; (8004510 <__assert_func+0x34>)
 80044f4:	001c      	movs	r4, r3
 80044f6:	4907      	ldr	r1, [pc, #28]	; (8004514 <__assert_func+0x38>)
 80044f8:	9301      	str	r3, [sp, #4]
 80044fa:	9402      	str	r4, [sp, #8]
 80044fc:	002b      	movs	r3, r5
 80044fe:	9600      	str	r6, [sp, #0]
 8004500:	f000 f9c8 	bl	8004894 <fiprintf>
 8004504:	f000 f9e8 	bl	80048d8 <abort>
 8004508:	20000064 	.word	0x20000064
 800450c:	08005237 	.word	0x08005237
 8004510:	08005272 	.word	0x08005272
 8004514:	08005244 	.word	0x08005244

08004518 <_free_r>:
 8004518:	b570      	push	{r4, r5, r6, lr}
 800451a:	0005      	movs	r5, r0
 800451c:	2900      	cmp	r1, #0
 800451e:	d010      	beq.n	8004542 <_free_r+0x2a>
 8004520:	1f0c      	subs	r4, r1, #4
 8004522:	6823      	ldr	r3, [r4, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	da00      	bge.n	800452a <_free_r+0x12>
 8004528:	18e4      	adds	r4, r4, r3
 800452a:	0028      	movs	r0, r5
 800452c:	f000 f8ec 	bl	8004708 <__malloc_lock>
 8004530:	4a1d      	ldr	r2, [pc, #116]	; (80045a8 <_free_r+0x90>)
 8004532:	6813      	ldr	r3, [r2, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d105      	bne.n	8004544 <_free_r+0x2c>
 8004538:	6063      	str	r3, [r4, #4]
 800453a:	6014      	str	r4, [r2, #0]
 800453c:	0028      	movs	r0, r5
 800453e:	f000 f8eb 	bl	8004718 <__malloc_unlock>
 8004542:	bd70      	pop	{r4, r5, r6, pc}
 8004544:	42a3      	cmp	r3, r4
 8004546:	d908      	bls.n	800455a <_free_r+0x42>
 8004548:	6820      	ldr	r0, [r4, #0]
 800454a:	1821      	adds	r1, r4, r0
 800454c:	428b      	cmp	r3, r1
 800454e:	d1f3      	bne.n	8004538 <_free_r+0x20>
 8004550:	6819      	ldr	r1, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	1809      	adds	r1, r1, r0
 8004556:	6021      	str	r1, [r4, #0]
 8004558:	e7ee      	b.n	8004538 <_free_r+0x20>
 800455a:	001a      	movs	r2, r3
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <_free_r+0x4e>
 8004562:	42a3      	cmp	r3, r4
 8004564:	d9f9      	bls.n	800455a <_free_r+0x42>
 8004566:	6811      	ldr	r1, [r2, #0]
 8004568:	1850      	adds	r0, r2, r1
 800456a:	42a0      	cmp	r0, r4
 800456c:	d10b      	bne.n	8004586 <_free_r+0x6e>
 800456e:	6820      	ldr	r0, [r4, #0]
 8004570:	1809      	adds	r1, r1, r0
 8004572:	1850      	adds	r0, r2, r1
 8004574:	6011      	str	r1, [r2, #0]
 8004576:	4283      	cmp	r3, r0
 8004578:	d1e0      	bne.n	800453c <_free_r+0x24>
 800457a:	6818      	ldr	r0, [r3, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	1841      	adds	r1, r0, r1
 8004580:	6011      	str	r1, [r2, #0]
 8004582:	6053      	str	r3, [r2, #4]
 8004584:	e7da      	b.n	800453c <_free_r+0x24>
 8004586:	42a0      	cmp	r0, r4
 8004588:	d902      	bls.n	8004590 <_free_r+0x78>
 800458a:	230c      	movs	r3, #12
 800458c:	602b      	str	r3, [r5, #0]
 800458e:	e7d5      	b.n	800453c <_free_r+0x24>
 8004590:	6820      	ldr	r0, [r4, #0]
 8004592:	1821      	adds	r1, r4, r0
 8004594:	428b      	cmp	r3, r1
 8004596:	d103      	bne.n	80045a0 <_free_r+0x88>
 8004598:	6819      	ldr	r1, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	1809      	adds	r1, r1, r0
 800459e:	6021      	str	r1, [r4, #0]
 80045a0:	6063      	str	r3, [r4, #4]
 80045a2:	6054      	str	r4, [r2, #4]
 80045a4:	e7ca      	b.n	800453c <_free_r+0x24>
 80045a6:	46c0      	nop			; (mov r8, r8)
 80045a8:	200003ec 	.word	0x200003ec

080045ac <malloc>:
 80045ac:	b510      	push	{r4, lr}
 80045ae:	4b03      	ldr	r3, [pc, #12]	; (80045bc <malloc+0x10>)
 80045b0:	0001      	movs	r1, r0
 80045b2:	6818      	ldr	r0, [r3, #0]
 80045b4:	f000 f826 	bl	8004604 <_malloc_r>
 80045b8:	bd10      	pop	{r4, pc}
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	20000064 	.word	0x20000064

080045c0 <sbrk_aligned>:
 80045c0:	b570      	push	{r4, r5, r6, lr}
 80045c2:	4e0f      	ldr	r6, [pc, #60]	; (8004600 <sbrk_aligned+0x40>)
 80045c4:	000d      	movs	r5, r1
 80045c6:	6831      	ldr	r1, [r6, #0]
 80045c8:	0004      	movs	r4, r0
 80045ca:	2900      	cmp	r1, #0
 80045cc:	d102      	bne.n	80045d4 <sbrk_aligned+0x14>
 80045ce:	f000 f971 	bl	80048b4 <_sbrk_r>
 80045d2:	6030      	str	r0, [r6, #0]
 80045d4:	0029      	movs	r1, r5
 80045d6:	0020      	movs	r0, r4
 80045d8:	f000 f96c 	bl	80048b4 <_sbrk_r>
 80045dc:	1c43      	adds	r3, r0, #1
 80045de:	d00a      	beq.n	80045f6 <sbrk_aligned+0x36>
 80045e0:	2303      	movs	r3, #3
 80045e2:	1cc5      	adds	r5, r0, #3
 80045e4:	439d      	bics	r5, r3
 80045e6:	42a8      	cmp	r0, r5
 80045e8:	d007      	beq.n	80045fa <sbrk_aligned+0x3a>
 80045ea:	1a29      	subs	r1, r5, r0
 80045ec:	0020      	movs	r0, r4
 80045ee:	f000 f961 	bl	80048b4 <_sbrk_r>
 80045f2:	3001      	adds	r0, #1
 80045f4:	d101      	bne.n	80045fa <sbrk_aligned+0x3a>
 80045f6:	2501      	movs	r5, #1
 80045f8:	426d      	negs	r5, r5
 80045fa:	0028      	movs	r0, r5
 80045fc:	bd70      	pop	{r4, r5, r6, pc}
 80045fe:	46c0      	nop			; (mov r8, r8)
 8004600:	200003f0 	.word	0x200003f0

08004604 <_malloc_r>:
 8004604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004606:	2203      	movs	r2, #3
 8004608:	1ccb      	adds	r3, r1, #3
 800460a:	4393      	bics	r3, r2
 800460c:	3308      	adds	r3, #8
 800460e:	0006      	movs	r6, r0
 8004610:	001f      	movs	r7, r3
 8004612:	2b0c      	cmp	r3, #12
 8004614:	d238      	bcs.n	8004688 <_malloc_r+0x84>
 8004616:	270c      	movs	r7, #12
 8004618:	42b9      	cmp	r1, r7
 800461a:	d837      	bhi.n	800468c <_malloc_r+0x88>
 800461c:	0030      	movs	r0, r6
 800461e:	f000 f873 	bl	8004708 <__malloc_lock>
 8004622:	4b38      	ldr	r3, [pc, #224]	; (8004704 <_malloc_r+0x100>)
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	001c      	movs	r4, r3
 800462a:	2c00      	cmp	r4, #0
 800462c:	d133      	bne.n	8004696 <_malloc_r+0x92>
 800462e:	0039      	movs	r1, r7
 8004630:	0030      	movs	r0, r6
 8004632:	f7ff ffc5 	bl	80045c0 <sbrk_aligned>
 8004636:	0004      	movs	r4, r0
 8004638:	1c43      	adds	r3, r0, #1
 800463a:	d15e      	bne.n	80046fa <_malloc_r+0xf6>
 800463c:	9b00      	ldr	r3, [sp, #0]
 800463e:	681c      	ldr	r4, [r3, #0]
 8004640:	0025      	movs	r5, r4
 8004642:	2d00      	cmp	r5, #0
 8004644:	d14e      	bne.n	80046e4 <_malloc_r+0xe0>
 8004646:	2c00      	cmp	r4, #0
 8004648:	d051      	beq.n	80046ee <_malloc_r+0xea>
 800464a:	6823      	ldr	r3, [r4, #0]
 800464c:	0029      	movs	r1, r5
 800464e:	18e3      	adds	r3, r4, r3
 8004650:	0030      	movs	r0, r6
 8004652:	9301      	str	r3, [sp, #4]
 8004654:	f000 f92e 	bl	80048b4 <_sbrk_r>
 8004658:	9b01      	ldr	r3, [sp, #4]
 800465a:	4283      	cmp	r3, r0
 800465c:	d147      	bne.n	80046ee <_malloc_r+0xea>
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	0030      	movs	r0, r6
 8004662:	1aff      	subs	r7, r7, r3
 8004664:	0039      	movs	r1, r7
 8004666:	f7ff ffab 	bl	80045c0 <sbrk_aligned>
 800466a:	3001      	adds	r0, #1
 800466c:	d03f      	beq.n	80046ee <_malloc_r+0xea>
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	19db      	adds	r3, r3, r7
 8004672:	6023      	str	r3, [r4, #0]
 8004674:	9b00      	ldr	r3, [sp, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d040      	beq.n	80046fe <_malloc_r+0xfa>
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	42a2      	cmp	r2, r4
 8004680:	d133      	bne.n	80046ea <_malloc_r+0xe6>
 8004682:	2200      	movs	r2, #0
 8004684:	605a      	str	r2, [r3, #4]
 8004686:	e014      	b.n	80046b2 <_malloc_r+0xae>
 8004688:	2b00      	cmp	r3, #0
 800468a:	dac5      	bge.n	8004618 <_malloc_r+0x14>
 800468c:	230c      	movs	r3, #12
 800468e:	2500      	movs	r5, #0
 8004690:	6033      	str	r3, [r6, #0]
 8004692:	0028      	movs	r0, r5
 8004694:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004696:	6821      	ldr	r1, [r4, #0]
 8004698:	1bc9      	subs	r1, r1, r7
 800469a:	d420      	bmi.n	80046de <_malloc_r+0xda>
 800469c:	290b      	cmp	r1, #11
 800469e:	d918      	bls.n	80046d2 <_malloc_r+0xce>
 80046a0:	19e2      	adds	r2, r4, r7
 80046a2:	6027      	str	r7, [r4, #0]
 80046a4:	42a3      	cmp	r3, r4
 80046a6:	d112      	bne.n	80046ce <_malloc_r+0xca>
 80046a8:	9b00      	ldr	r3, [sp, #0]
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	6863      	ldr	r3, [r4, #4]
 80046ae:	6011      	str	r1, [r2, #0]
 80046b0:	6053      	str	r3, [r2, #4]
 80046b2:	0030      	movs	r0, r6
 80046b4:	0025      	movs	r5, r4
 80046b6:	f000 f82f 	bl	8004718 <__malloc_unlock>
 80046ba:	2207      	movs	r2, #7
 80046bc:	350b      	adds	r5, #11
 80046be:	1d23      	adds	r3, r4, #4
 80046c0:	4395      	bics	r5, r2
 80046c2:	1aea      	subs	r2, r5, r3
 80046c4:	429d      	cmp	r5, r3
 80046c6:	d0e4      	beq.n	8004692 <_malloc_r+0x8e>
 80046c8:	1b5b      	subs	r3, r3, r5
 80046ca:	50a3      	str	r3, [r4, r2]
 80046cc:	e7e1      	b.n	8004692 <_malloc_r+0x8e>
 80046ce:	605a      	str	r2, [r3, #4]
 80046d0:	e7ec      	b.n	80046ac <_malloc_r+0xa8>
 80046d2:	6862      	ldr	r2, [r4, #4]
 80046d4:	42a3      	cmp	r3, r4
 80046d6:	d1d5      	bne.n	8004684 <_malloc_r+0x80>
 80046d8:	9b00      	ldr	r3, [sp, #0]
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	e7e9      	b.n	80046b2 <_malloc_r+0xae>
 80046de:	0023      	movs	r3, r4
 80046e0:	6864      	ldr	r4, [r4, #4]
 80046e2:	e7a2      	b.n	800462a <_malloc_r+0x26>
 80046e4:	002c      	movs	r4, r5
 80046e6:	686d      	ldr	r5, [r5, #4]
 80046e8:	e7ab      	b.n	8004642 <_malloc_r+0x3e>
 80046ea:	0013      	movs	r3, r2
 80046ec:	e7c4      	b.n	8004678 <_malloc_r+0x74>
 80046ee:	230c      	movs	r3, #12
 80046f0:	0030      	movs	r0, r6
 80046f2:	6033      	str	r3, [r6, #0]
 80046f4:	f000 f810 	bl	8004718 <__malloc_unlock>
 80046f8:	e7cb      	b.n	8004692 <_malloc_r+0x8e>
 80046fa:	6027      	str	r7, [r4, #0]
 80046fc:	e7d9      	b.n	80046b2 <_malloc_r+0xae>
 80046fe:	605b      	str	r3, [r3, #4]
 8004700:	deff      	udf	#255	; 0xff
 8004702:	46c0      	nop			; (mov r8, r8)
 8004704:	200003ec 	.word	0x200003ec

08004708 <__malloc_lock>:
 8004708:	b510      	push	{r4, lr}
 800470a:	4802      	ldr	r0, [pc, #8]	; (8004714 <__malloc_lock+0xc>)
 800470c:	f7ff fee3 	bl	80044d6 <__retarget_lock_acquire_recursive>
 8004710:	bd10      	pop	{r4, pc}
 8004712:	46c0      	nop			; (mov r8, r8)
 8004714:	200003e8 	.word	0x200003e8

08004718 <__malloc_unlock>:
 8004718:	b510      	push	{r4, lr}
 800471a:	4802      	ldr	r0, [pc, #8]	; (8004724 <__malloc_unlock+0xc>)
 800471c:	f7ff fedc 	bl	80044d8 <__retarget_lock_release_recursive>
 8004720:	bd10      	pop	{r4, pc}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	200003e8 	.word	0x200003e8

08004728 <__sflush_r>:
 8004728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800472a:	898b      	ldrh	r3, [r1, #12]
 800472c:	0005      	movs	r5, r0
 800472e:	000c      	movs	r4, r1
 8004730:	071a      	lsls	r2, r3, #28
 8004732:	d45c      	bmi.n	80047ee <__sflush_r+0xc6>
 8004734:	684a      	ldr	r2, [r1, #4]
 8004736:	2a00      	cmp	r2, #0
 8004738:	dc04      	bgt.n	8004744 <__sflush_r+0x1c>
 800473a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800473c:	2a00      	cmp	r2, #0
 800473e:	dc01      	bgt.n	8004744 <__sflush_r+0x1c>
 8004740:	2000      	movs	r0, #0
 8004742:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004744:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004746:	2f00      	cmp	r7, #0
 8004748:	d0fa      	beq.n	8004740 <__sflush_r+0x18>
 800474a:	2200      	movs	r2, #0
 800474c:	2080      	movs	r0, #128	; 0x80
 800474e:	682e      	ldr	r6, [r5, #0]
 8004750:	602a      	str	r2, [r5, #0]
 8004752:	001a      	movs	r2, r3
 8004754:	0140      	lsls	r0, r0, #5
 8004756:	6a21      	ldr	r1, [r4, #32]
 8004758:	4002      	ands	r2, r0
 800475a:	4203      	tst	r3, r0
 800475c:	d034      	beq.n	80047c8 <__sflush_r+0xa0>
 800475e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004760:	89a3      	ldrh	r3, [r4, #12]
 8004762:	075b      	lsls	r3, r3, #29
 8004764:	d506      	bpl.n	8004774 <__sflush_r+0x4c>
 8004766:	6863      	ldr	r3, [r4, #4]
 8004768:	1ac0      	subs	r0, r0, r3
 800476a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <__sflush_r+0x4c>
 8004770:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004772:	1ac0      	subs	r0, r0, r3
 8004774:	0002      	movs	r2, r0
 8004776:	2300      	movs	r3, #0
 8004778:	0028      	movs	r0, r5
 800477a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800477c:	6a21      	ldr	r1, [r4, #32]
 800477e:	47b8      	blx	r7
 8004780:	89a2      	ldrh	r2, [r4, #12]
 8004782:	1c43      	adds	r3, r0, #1
 8004784:	d106      	bne.n	8004794 <__sflush_r+0x6c>
 8004786:	6829      	ldr	r1, [r5, #0]
 8004788:	291d      	cmp	r1, #29
 800478a:	d82c      	bhi.n	80047e6 <__sflush_r+0xbe>
 800478c:	4b2a      	ldr	r3, [pc, #168]	; (8004838 <__sflush_r+0x110>)
 800478e:	410b      	asrs	r3, r1
 8004790:	07db      	lsls	r3, r3, #31
 8004792:	d428      	bmi.n	80047e6 <__sflush_r+0xbe>
 8004794:	2300      	movs	r3, #0
 8004796:	6063      	str	r3, [r4, #4]
 8004798:	6923      	ldr	r3, [r4, #16]
 800479a:	6023      	str	r3, [r4, #0]
 800479c:	04d2      	lsls	r2, r2, #19
 800479e:	d505      	bpl.n	80047ac <__sflush_r+0x84>
 80047a0:	1c43      	adds	r3, r0, #1
 80047a2:	d102      	bne.n	80047aa <__sflush_r+0x82>
 80047a4:	682b      	ldr	r3, [r5, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d100      	bne.n	80047ac <__sflush_r+0x84>
 80047aa:	6560      	str	r0, [r4, #84]	; 0x54
 80047ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047ae:	602e      	str	r6, [r5, #0]
 80047b0:	2900      	cmp	r1, #0
 80047b2:	d0c5      	beq.n	8004740 <__sflush_r+0x18>
 80047b4:	0023      	movs	r3, r4
 80047b6:	3344      	adds	r3, #68	; 0x44
 80047b8:	4299      	cmp	r1, r3
 80047ba:	d002      	beq.n	80047c2 <__sflush_r+0x9a>
 80047bc:	0028      	movs	r0, r5
 80047be:	f7ff feab 	bl	8004518 <_free_r>
 80047c2:	2000      	movs	r0, #0
 80047c4:	6360      	str	r0, [r4, #52]	; 0x34
 80047c6:	e7bc      	b.n	8004742 <__sflush_r+0x1a>
 80047c8:	2301      	movs	r3, #1
 80047ca:	0028      	movs	r0, r5
 80047cc:	47b8      	blx	r7
 80047ce:	1c43      	adds	r3, r0, #1
 80047d0:	d1c6      	bne.n	8004760 <__sflush_r+0x38>
 80047d2:	682b      	ldr	r3, [r5, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0c3      	beq.n	8004760 <__sflush_r+0x38>
 80047d8:	2b1d      	cmp	r3, #29
 80047da:	d001      	beq.n	80047e0 <__sflush_r+0xb8>
 80047dc:	2b16      	cmp	r3, #22
 80047de:	d101      	bne.n	80047e4 <__sflush_r+0xbc>
 80047e0:	602e      	str	r6, [r5, #0]
 80047e2:	e7ad      	b.n	8004740 <__sflush_r+0x18>
 80047e4:	89a2      	ldrh	r2, [r4, #12]
 80047e6:	2340      	movs	r3, #64	; 0x40
 80047e8:	4313      	orrs	r3, r2
 80047ea:	81a3      	strh	r3, [r4, #12]
 80047ec:	e7a9      	b.n	8004742 <__sflush_r+0x1a>
 80047ee:	690e      	ldr	r6, [r1, #16]
 80047f0:	2e00      	cmp	r6, #0
 80047f2:	d0a5      	beq.n	8004740 <__sflush_r+0x18>
 80047f4:	680f      	ldr	r7, [r1, #0]
 80047f6:	600e      	str	r6, [r1, #0]
 80047f8:	1bba      	subs	r2, r7, r6
 80047fa:	9201      	str	r2, [sp, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	079b      	lsls	r3, r3, #30
 8004800:	d100      	bne.n	8004804 <__sflush_r+0xdc>
 8004802:	694a      	ldr	r2, [r1, #20]
 8004804:	60a2      	str	r2, [r4, #8]
 8004806:	9b01      	ldr	r3, [sp, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	dd99      	ble.n	8004740 <__sflush_r+0x18>
 800480c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800480e:	0032      	movs	r2, r6
 8004810:	001f      	movs	r7, r3
 8004812:	0028      	movs	r0, r5
 8004814:	9b01      	ldr	r3, [sp, #4]
 8004816:	6a21      	ldr	r1, [r4, #32]
 8004818:	47b8      	blx	r7
 800481a:	2800      	cmp	r0, #0
 800481c:	dc06      	bgt.n	800482c <__sflush_r+0x104>
 800481e:	2340      	movs	r3, #64	; 0x40
 8004820:	2001      	movs	r0, #1
 8004822:	89a2      	ldrh	r2, [r4, #12]
 8004824:	4240      	negs	r0, r0
 8004826:	4313      	orrs	r3, r2
 8004828:	81a3      	strh	r3, [r4, #12]
 800482a:	e78a      	b.n	8004742 <__sflush_r+0x1a>
 800482c:	9b01      	ldr	r3, [sp, #4]
 800482e:	1836      	adds	r6, r6, r0
 8004830:	1a1b      	subs	r3, r3, r0
 8004832:	9301      	str	r3, [sp, #4]
 8004834:	e7e7      	b.n	8004806 <__sflush_r+0xde>
 8004836:	46c0      	nop			; (mov r8, r8)
 8004838:	dfbffffe 	.word	0xdfbffffe

0800483c <_fflush_r>:
 800483c:	690b      	ldr	r3, [r1, #16]
 800483e:	b570      	push	{r4, r5, r6, lr}
 8004840:	0005      	movs	r5, r0
 8004842:	000c      	movs	r4, r1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d102      	bne.n	800484e <_fflush_r+0x12>
 8004848:	2500      	movs	r5, #0
 800484a:	0028      	movs	r0, r5
 800484c:	bd70      	pop	{r4, r5, r6, pc}
 800484e:	2800      	cmp	r0, #0
 8004850:	d004      	beq.n	800485c <_fflush_r+0x20>
 8004852:	6a03      	ldr	r3, [r0, #32]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <_fflush_r+0x20>
 8004858:	f7ff fd3c 	bl	80042d4 <__sinit>
 800485c:	220c      	movs	r2, #12
 800485e:	5ea3      	ldrsh	r3, [r4, r2]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d0f1      	beq.n	8004848 <_fflush_r+0xc>
 8004864:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004866:	07d2      	lsls	r2, r2, #31
 8004868:	d404      	bmi.n	8004874 <_fflush_r+0x38>
 800486a:	059b      	lsls	r3, r3, #22
 800486c:	d402      	bmi.n	8004874 <_fflush_r+0x38>
 800486e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004870:	f7ff fe31 	bl	80044d6 <__retarget_lock_acquire_recursive>
 8004874:	0028      	movs	r0, r5
 8004876:	0021      	movs	r1, r4
 8004878:	f7ff ff56 	bl	8004728 <__sflush_r>
 800487c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800487e:	0005      	movs	r5, r0
 8004880:	07db      	lsls	r3, r3, #31
 8004882:	d4e2      	bmi.n	800484a <_fflush_r+0xe>
 8004884:	89a3      	ldrh	r3, [r4, #12]
 8004886:	059b      	lsls	r3, r3, #22
 8004888:	d4df      	bmi.n	800484a <_fflush_r+0xe>
 800488a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800488c:	f7ff fe24 	bl	80044d8 <__retarget_lock_release_recursive>
 8004890:	e7db      	b.n	800484a <_fflush_r+0xe>
	...

08004894 <fiprintf>:
 8004894:	b40e      	push	{r1, r2, r3}
 8004896:	b517      	push	{r0, r1, r2, r4, lr}
 8004898:	4c05      	ldr	r4, [pc, #20]	; (80048b0 <fiprintf+0x1c>)
 800489a:	ab05      	add	r3, sp, #20
 800489c:	cb04      	ldmia	r3!, {r2}
 800489e:	0001      	movs	r1, r0
 80048a0:	6820      	ldr	r0, [r4, #0]
 80048a2:	9301      	str	r3, [sp, #4]
 80048a4:	f000 f846 	bl	8004934 <_vfiprintf_r>
 80048a8:	bc1e      	pop	{r1, r2, r3, r4}
 80048aa:	bc08      	pop	{r3}
 80048ac:	b003      	add	sp, #12
 80048ae:	4718      	bx	r3
 80048b0:	20000064 	.word	0x20000064

080048b4 <_sbrk_r>:
 80048b4:	2300      	movs	r3, #0
 80048b6:	b570      	push	{r4, r5, r6, lr}
 80048b8:	4d06      	ldr	r5, [pc, #24]	; (80048d4 <_sbrk_r+0x20>)
 80048ba:	0004      	movs	r4, r0
 80048bc:	0008      	movs	r0, r1
 80048be:	602b      	str	r3, [r5, #0]
 80048c0:	f7fc fa0c 	bl	8000cdc <_sbrk>
 80048c4:	1c43      	adds	r3, r0, #1
 80048c6:	d103      	bne.n	80048d0 <_sbrk_r+0x1c>
 80048c8:	682b      	ldr	r3, [r5, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d000      	beq.n	80048d0 <_sbrk_r+0x1c>
 80048ce:	6023      	str	r3, [r4, #0]
 80048d0:	bd70      	pop	{r4, r5, r6, pc}
 80048d2:	46c0      	nop			; (mov r8, r8)
 80048d4:	200003e4 	.word	0x200003e4

080048d8 <abort>:
 80048d8:	2006      	movs	r0, #6
 80048da:	b510      	push	{r4, lr}
 80048dc:	f000 fb96 	bl	800500c <raise>
 80048e0:	2001      	movs	r0, #1
 80048e2:	f7fc f989 	bl	8000bf8 <_exit>

080048e6 <__sfputc_r>:
 80048e6:	6893      	ldr	r3, [r2, #8]
 80048e8:	b510      	push	{r4, lr}
 80048ea:	3b01      	subs	r3, #1
 80048ec:	6093      	str	r3, [r2, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	da04      	bge.n	80048fc <__sfputc_r+0x16>
 80048f2:	6994      	ldr	r4, [r2, #24]
 80048f4:	42a3      	cmp	r3, r4
 80048f6:	db07      	blt.n	8004908 <__sfputc_r+0x22>
 80048f8:	290a      	cmp	r1, #10
 80048fa:	d005      	beq.n	8004908 <__sfputc_r+0x22>
 80048fc:	6813      	ldr	r3, [r2, #0]
 80048fe:	1c58      	adds	r0, r3, #1
 8004900:	6010      	str	r0, [r2, #0]
 8004902:	7019      	strb	r1, [r3, #0]
 8004904:	0008      	movs	r0, r1
 8004906:	bd10      	pop	{r4, pc}
 8004908:	f000 fab0 	bl	8004e6c <__swbuf_r>
 800490c:	0001      	movs	r1, r0
 800490e:	e7f9      	b.n	8004904 <__sfputc_r+0x1e>

08004910 <__sfputs_r>:
 8004910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004912:	0006      	movs	r6, r0
 8004914:	000f      	movs	r7, r1
 8004916:	0014      	movs	r4, r2
 8004918:	18d5      	adds	r5, r2, r3
 800491a:	42ac      	cmp	r4, r5
 800491c:	d101      	bne.n	8004922 <__sfputs_r+0x12>
 800491e:	2000      	movs	r0, #0
 8004920:	e007      	b.n	8004932 <__sfputs_r+0x22>
 8004922:	7821      	ldrb	r1, [r4, #0]
 8004924:	003a      	movs	r2, r7
 8004926:	0030      	movs	r0, r6
 8004928:	f7ff ffdd 	bl	80048e6 <__sfputc_r>
 800492c:	3401      	adds	r4, #1
 800492e:	1c43      	adds	r3, r0, #1
 8004930:	d1f3      	bne.n	800491a <__sfputs_r+0xa>
 8004932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004934 <_vfiprintf_r>:
 8004934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004936:	b0a1      	sub	sp, #132	; 0x84
 8004938:	000f      	movs	r7, r1
 800493a:	0015      	movs	r5, r2
 800493c:	001e      	movs	r6, r3
 800493e:	9003      	str	r0, [sp, #12]
 8004940:	2800      	cmp	r0, #0
 8004942:	d004      	beq.n	800494e <_vfiprintf_r+0x1a>
 8004944:	6a03      	ldr	r3, [r0, #32]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <_vfiprintf_r+0x1a>
 800494a:	f7ff fcc3 	bl	80042d4 <__sinit>
 800494e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004950:	07db      	lsls	r3, r3, #31
 8004952:	d405      	bmi.n	8004960 <_vfiprintf_r+0x2c>
 8004954:	89bb      	ldrh	r3, [r7, #12]
 8004956:	059b      	lsls	r3, r3, #22
 8004958:	d402      	bmi.n	8004960 <_vfiprintf_r+0x2c>
 800495a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800495c:	f7ff fdbb 	bl	80044d6 <__retarget_lock_acquire_recursive>
 8004960:	89bb      	ldrh	r3, [r7, #12]
 8004962:	071b      	lsls	r3, r3, #28
 8004964:	d502      	bpl.n	800496c <_vfiprintf_r+0x38>
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d113      	bne.n	8004994 <_vfiprintf_r+0x60>
 800496c:	0039      	movs	r1, r7
 800496e:	9803      	ldr	r0, [sp, #12]
 8004970:	f000 fabe 	bl	8004ef0 <__swsetup_r>
 8004974:	2800      	cmp	r0, #0
 8004976:	d00d      	beq.n	8004994 <_vfiprintf_r+0x60>
 8004978:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800497a:	07db      	lsls	r3, r3, #31
 800497c:	d503      	bpl.n	8004986 <_vfiprintf_r+0x52>
 800497e:	2001      	movs	r0, #1
 8004980:	4240      	negs	r0, r0
 8004982:	b021      	add	sp, #132	; 0x84
 8004984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004986:	89bb      	ldrh	r3, [r7, #12]
 8004988:	059b      	lsls	r3, r3, #22
 800498a:	d4f8      	bmi.n	800497e <_vfiprintf_r+0x4a>
 800498c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800498e:	f7ff fda3 	bl	80044d8 <__retarget_lock_release_recursive>
 8004992:	e7f4      	b.n	800497e <_vfiprintf_r+0x4a>
 8004994:	2300      	movs	r3, #0
 8004996:	ac08      	add	r4, sp, #32
 8004998:	6163      	str	r3, [r4, #20]
 800499a:	3320      	adds	r3, #32
 800499c:	7663      	strb	r3, [r4, #25]
 800499e:	3310      	adds	r3, #16
 80049a0:	76a3      	strb	r3, [r4, #26]
 80049a2:	9607      	str	r6, [sp, #28]
 80049a4:	002e      	movs	r6, r5
 80049a6:	7833      	ldrb	r3, [r6, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <_vfiprintf_r+0x7c>
 80049ac:	2b25      	cmp	r3, #37	; 0x25
 80049ae:	d148      	bne.n	8004a42 <_vfiprintf_r+0x10e>
 80049b0:	1b73      	subs	r3, r6, r5
 80049b2:	9305      	str	r3, [sp, #20]
 80049b4:	42ae      	cmp	r6, r5
 80049b6:	d00b      	beq.n	80049d0 <_vfiprintf_r+0x9c>
 80049b8:	002a      	movs	r2, r5
 80049ba:	0039      	movs	r1, r7
 80049bc:	9803      	ldr	r0, [sp, #12]
 80049be:	f7ff ffa7 	bl	8004910 <__sfputs_r>
 80049c2:	3001      	adds	r0, #1
 80049c4:	d100      	bne.n	80049c8 <_vfiprintf_r+0x94>
 80049c6:	e0af      	b.n	8004b28 <_vfiprintf_r+0x1f4>
 80049c8:	6963      	ldr	r3, [r4, #20]
 80049ca:	9a05      	ldr	r2, [sp, #20]
 80049cc:	189b      	adds	r3, r3, r2
 80049ce:	6163      	str	r3, [r4, #20]
 80049d0:	7833      	ldrb	r3, [r6, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d100      	bne.n	80049d8 <_vfiprintf_r+0xa4>
 80049d6:	e0a7      	b.n	8004b28 <_vfiprintf_r+0x1f4>
 80049d8:	2201      	movs	r2, #1
 80049da:	2300      	movs	r3, #0
 80049dc:	4252      	negs	r2, r2
 80049de:	6062      	str	r2, [r4, #4]
 80049e0:	a904      	add	r1, sp, #16
 80049e2:	3254      	adds	r2, #84	; 0x54
 80049e4:	1852      	adds	r2, r2, r1
 80049e6:	1c75      	adds	r5, r6, #1
 80049e8:	6023      	str	r3, [r4, #0]
 80049ea:	60e3      	str	r3, [r4, #12]
 80049ec:	60a3      	str	r3, [r4, #8]
 80049ee:	7013      	strb	r3, [r2, #0]
 80049f0:	65a3      	str	r3, [r4, #88]	; 0x58
 80049f2:	4b59      	ldr	r3, [pc, #356]	; (8004b58 <_vfiprintf_r+0x224>)
 80049f4:	2205      	movs	r2, #5
 80049f6:	0018      	movs	r0, r3
 80049f8:	7829      	ldrb	r1, [r5, #0]
 80049fa:	9305      	str	r3, [sp, #20]
 80049fc:	f000 fb26 	bl	800504c <memchr>
 8004a00:	1c6e      	adds	r6, r5, #1
 8004a02:	2800      	cmp	r0, #0
 8004a04:	d11f      	bne.n	8004a46 <_vfiprintf_r+0x112>
 8004a06:	6822      	ldr	r2, [r4, #0]
 8004a08:	06d3      	lsls	r3, r2, #27
 8004a0a:	d504      	bpl.n	8004a16 <_vfiprintf_r+0xe2>
 8004a0c:	2353      	movs	r3, #83	; 0x53
 8004a0e:	a904      	add	r1, sp, #16
 8004a10:	185b      	adds	r3, r3, r1
 8004a12:	2120      	movs	r1, #32
 8004a14:	7019      	strb	r1, [r3, #0]
 8004a16:	0713      	lsls	r3, r2, #28
 8004a18:	d504      	bpl.n	8004a24 <_vfiprintf_r+0xf0>
 8004a1a:	2353      	movs	r3, #83	; 0x53
 8004a1c:	a904      	add	r1, sp, #16
 8004a1e:	185b      	adds	r3, r3, r1
 8004a20:	212b      	movs	r1, #43	; 0x2b
 8004a22:	7019      	strb	r1, [r3, #0]
 8004a24:	782b      	ldrb	r3, [r5, #0]
 8004a26:	2b2a      	cmp	r3, #42	; 0x2a
 8004a28:	d016      	beq.n	8004a58 <_vfiprintf_r+0x124>
 8004a2a:	002e      	movs	r6, r5
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	200a      	movs	r0, #10
 8004a30:	68e3      	ldr	r3, [r4, #12]
 8004a32:	7832      	ldrb	r2, [r6, #0]
 8004a34:	1c75      	adds	r5, r6, #1
 8004a36:	3a30      	subs	r2, #48	; 0x30
 8004a38:	2a09      	cmp	r2, #9
 8004a3a:	d94e      	bls.n	8004ada <_vfiprintf_r+0x1a6>
 8004a3c:	2900      	cmp	r1, #0
 8004a3e:	d111      	bne.n	8004a64 <_vfiprintf_r+0x130>
 8004a40:	e017      	b.n	8004a72 <_vfiprintf_r+0x13e>
 8004a42:	3601      	adds	r6, #1
 8004a44:	e7af      	b.n	80049a6 <_vfiprintf_r+0x72>
 8004a46:	9b05      	ldr	r3, [sp, #20]
 8004a48:	6822      	ldr	r2, [r4, #0]
 8004a4a:	1ac0      	subs	r0, r0, r3
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	4083      	lsls	r3, r0
 8004a50:	4313      	orrs	r3, r2
 8004a52:	0035      	movs	r5, r6
 8004a54:	6023      	str	r3, [r4, #0]
 8004a56:	e7cc      	b.n	80049f2 <_vfiprintf_r+0xbe>
 8004a58:	9b07      	ldr	r3, [sp, #28]
 8004a5a:	1d19      	adds	r1, r3, #4
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	9107      	str	r1, [sp, #28]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	db01      	blt.n	8004a68 <_vfiprintf_r+0x134>
 8004a64:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a66:	e004      	b.n	8004a72 <_vfiprintf_r+0x13e>
 8004a68:	425b      	negs	r3, r3
 8004a6a:	60e3      	str	r3, [r4, #12]
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	6023      	str	r3, [r4, #0]
 8004a72:	7833      	ldrb	r3, [r6, #0]
 8004a74:	2b2e      	cmp	r3, #46	; 0x2e
 8004a76:	d10a      	bne.n	8004a8e <_vfiprintf_r+0x15a>
 8004a78:	7873      	ldrb	r3, [r6, #1]
 8004a7a:	2b2a      	cmp	r3, #42	; 0x2a
 8004a7c:	d135      	bne.n	8004aea <_vfiprintf_r+0x1b6>
 8004a7e:	9b07      	ldr	r3, [sp, #28]
 8004a80:	3602      	adds	r6, #2
 8004a82:	1d1a      	adds	r2, r3, #4
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	9207      	str	r2, [sp, #28]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	db2b      	blt.n	8004ae4 <_vfiprintf_r+0x1b0>
 8004a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a8e:	4d33      	ldr	r5, [pc, #204]	; (8004b5c <_vfiprintf_r+0x228>)
 8004a90:	2203      	movs	r2, #3
 8004a92:	0028      	movs	r0, r5
 8004a94:	7831      	ldrb	r1, [r6, #0]
 8004a96:	f000 fad9 	bl	800504c <memchr>
 8004a9a:	2800      	cmp	r0, #0
 8004a9c:	d006      	beq.n	8004aac <_vfiprintf_r+0x178>
 8004a9e:	2340      	movs	r3, #64	; 0x40
 8004aa0:	1b40      	subs	r0, r0, r5
 8004aa2:	4083      	lsls	r3, r0
 8004aa4:	6822      	ldr	r2, [r4, #0]
 8004aa6:	3601      	adds	r6, #1
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	6023      	str	r3, [r4, #0]
 8004aac:	7831      	ldrb	r1, [r6, #0]
 8004aae:	2206      	movs	r2, #6
 8004ab0:	482b      	ldr	r0, [pc, #172]	; (8004b60 <_vfiprintf_r+0x22c>)
 8004ab2:	1c75      	adds	r5, r6, #1
 8004ab4:	7621      	strb	r1, [r4, #24]
 8004ab6:	f000 fac9 	bl	800504c <memchr>
 8004aba:	2800      	cmp	r0, #0
 8004abc:	d043      	beq.n	8004b46 <_vfiprintf_r+0x212>
 8004abe:	4b29      	ldr	r3, [pc, #164]	; (8004b64 <_vfiprintf_r+0x230>)
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d125      	bne.n	8004b10 <_vfiprintf_r+0x1dc>
 8004ac4:	2207      	movs	r2, #7
 8004ac6:	9b07      	ldr	r3, [sp, #28]
 8004ac8:	3307      	adds	r3, #7
 8004aca:	4393      	bics	r3, r2
 8004acc:	3308      	adds	r3, #8
 8004ace:	9307      	str	r3, [sp, #28]
 8004ad0:	6963      	ldr	r3, [r4, #20]
 8004ad2:	9a04      	ldr	r2, [sp, #16]
 8004ad4:	189b      	adds	r3, r3, r2
 8004ad6:	6163      	str	r3, [r4, #20]
 8004ad8:	e764      	b.n	80049a4 <_vfiprintf_r+0x70>
 8004ada:	4343      	muls	r3, r0
 8004adc:	002e      	movs	r6, r5
 8004ade:	2101      	movs	r1, #1
 8004ae0:	189b      	adds	r3, r3, r2
 8004ae2:	e7a6      	b.n	8004a32 <_vfiprintf_r+0xfe>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	425b      	negs	r3, r3
 8004ae8:	e7d0      	b.n	8004a8c <_vfiprintf_r+0x158>
 8004aea:	2300      	movs	r3, #0
 8004aec:	200a      	movs	r0, #10
 8004aee:	001a      	movs	r2, r3
 8004af0:	3601      	adds	r6, #1
 8004af2:	6063      	str	r3, [r4, #4]
 8004af4:	7831      	ldrb	r1, [r6, #0]
 8004af6:	1c75      	adds	r5, r6, #1
 8004af8:	3930      	subs	r1, #48	; 0x30
 8004afa:	2909      	cmp	r1, #9
 8004afc:	d903      	bls.n	8004b06 <_vfiprintf_r+0x1d2>
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0c5      	beq.n	8004a8e <_vfiprintf_r+0x15a>
 8004b02:	9209      	str	r2, [sp, #36]	; 0x24
 8004b04:	e7c3      	b.n	8004a8e <_vfiprintf_r+0x15a>
 8004b06:	4342      	muls	r2, r0
 8004b08:	002e      	movs	r6, r5
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	1852      	adds	r2, r2, r1
 8004b0e:	e7f1      	b.n	8004af4 <_vfiprintf_r+0x1c0>
 8004b10:	aa07      	add	r2, sp, #28
 8004b12:	9200      	str	r2, [sp, #0]
 8004b14:	0021      	movs	r1, r4
 8004b16:	003a      	movs	r2, r7
 8004b18:	4b13      	ldr	r3, [pc, #76]	; (8004b68 <_vfiprintf_r+0x234>)
 8004b1a:	9803      	ldr	r0, [sp, #12]
 8004b1c:	e000      	b.n	8004b20 <_vfiprintf_r+0x1ec>
 8004b1e:	bf00      	nop
 8004b20:	9004      	str	r0, [sp, #16]
 8004b22:	9b04      	ldr	r3, [sp, #16]
 8004b24:	3301      	adds	r3, #1
 8004b26:	d1d3      	bne.n	8004ad0 <_vfiprintf_r+0x19c>
 8004b28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b2a:	07db      	lsls	r3, r3, #31
 8004b2c:	d405      	bmi.n	8004b3a <_vfiprintf_r+0x206>
 8004b2e:	89bb      	ldrh	r3, [r7, #12]
 8004b30:	059b      	lsls	r3, r3, #22
 8004b32:	d402      	bmi.n	8004b3a <_vfiprintf_r+0x206>
 8004b34:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004b36:	f7ff fccf 	bl	80044d8 <__retarget_lock_release_recursive>
 8004b3a:	89bb      	ldrh	r3, [r7, #12]
 8004b3c:	065b      	lsls	r3, r3, #25
 8004b3e:	d500      	bpl.n	8004b42 <_vfiprintf_r+0x20e>
 8004b40:	e71d      	b.n	800497e <_vfiprintf_r+0x4a>
 8004b42:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004b44:	e71d      	b.n	8004982 <_vfiprintf_r+0x4e>
 8004b46:	aa07      	add	r2, sp, #28
 8004b48:	9200      	str	r2, [sp, #0]
 8004b4a:	0021      	movs	r1, r4
 8004b4c:	003a      	movs	r2, r7
 8004b4e:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <_vfiprintf_r+0x234>)
 8004b50:	9803      	ldr	r0, [sp, #12]
 8004b52:	f000 f87b 	bl	8004c4c <_printf_i>
 8004b56:	e7e3      	b.n	8004b20 <_vfiprintf_r+0x1ec>
 8004b58:	08005273 	.word	0x08005273
 8004b5c:	08005279 	.word	0x08005279
 8004b60:	0800527d 	.word	0x0800527d
 8004b64:	00000000 	.word	0x00000000
 8004b68:	08004911 	.word	0x08004911

08004b6c <_printf_common>:
 8004b6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b6e:	0016      	movs	r6, r2
 8004b70:	9301      	str	r3, [sp, #4]
 8004b72:	688a      	ldr	r2, [r1, #8]
 8004b74:	690b      	ldr	r3, [r1, #16]
 8004b76:	000c      	movs	r4, r1
 8004b78:	9000      	str	r0, [sp, #0]
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	da00      	bge.n	8004b80 <_printf_common+0x14>
 8004b7e:	0013      	movs	r3, r2
 8004b80:	0022      	movs	r2, r4
 8004b82:	6033      	str	r3, [r6, #0]
 8004b84:	3243      	adds	r2, #67	; 0x43
 8004b86:	7812      	ldrb	r2, [r2, #0]
 8004b88:	2a00      	cmp	r2, #0
 8004b8a:	d001      	beq.n	8004b90 <_printf_common+0x24>
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	6033      	str	r3, [r6, #0]
 8004b90:	6823      	ldr	r3, [r4, #0]
 8004b92:	069b      	lsls	r3, r3, #26
 8004b94:	d502      	bpl.n	8004b9c <_printf_common+0x30>
 8004b96:	6833      	ldr	r3, [r6, #0]
 8004b98:	3302      	adds	r3, #2
 8004b9a:	6033      	str	r3, [r6, #0]
 8004b9c:	6822      	ldr	r2, [r4, #0]
 8004b9e:	2306      	movs	r3, #6
 8004ba0:	0015      	movs	r5, r2
 8004ba2:	401d      	ands	r5, r3
 8004ba4:	421a      	tst	r2, r3
 8004ba6:	d027      	beq.n	8004bf8 <_printf_common+0x8c>
 8004ba8:	0023      	movs	r3, r4
 8004baa:	3343      	adds	r3, #67	; 0x43
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	1e5a      	subs	r2, r3, #1
 8004bb0:	4193      	sbcs	r3, r2
 8004bb2:	6822      	ldr	r2, [r4, #0]
 8004bb4:	0692      	lsls	r2, r2, #26
 8004bb6:	d430      	bmi.n	8004c1a <_printf_common+0xae>
 8004bb8:	0022      	movs	r2, r4
 8004bba:	9901      	ldr	r1, [sp, #4]
 8004bbc:	9800      	ldr	r0, [sp, #0]
 8004bbe:	9d08      	ldr	r5, [sp, #32]
 8004bc0:	3243      	adds	r2, #67	; 0x43
 8004bc2:	47a8      	blx	r5
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	d025      	beq.n	8004c14 <_printf_common+0xa8>
 8004bc8:	2206      	movs	r2, #6
 8004bca:	6823      	ldr	r3, [r4, #0]
 8004bcc:	2500      	movs	r5, #0
 8004bce:	4013      	ands	r3, r2
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	d105      	bne.n	8004be0 <_printf_common+0x74>
 8004bd4:	6833      	ldr	r3, [r6, #0]
 8004bd6:	68e5      	ldr	r5, [r4, #12]
 8004bd8:	1aed      	subs	r5, r5, r3
 8004bda:	43eb      	mvns	r3, r5
 8004bdc:	17db      	asrs	r3, r3, #31
 8004bde:	401d      	ands	r5, r3
 8004be0:	68a3      	ldr	r3, [r4, #8]
 8004be2:	6922      	ldr	r2, [r4, #16]
 8004be4:	4293      	cmp	r3, r2
 8004be6:	dd01      	ble.n	8004bec <_printf_common+0x80>
 8004be8:	1a9b      	subs	r3, r3, r2
 8004bea:	18ed      	adds	r5, r5, r3
 8004bec:	2600      	movs	r6, #0
 8004bee:	42b5      	cmp	r5, r6
 8004bf0:	d120      	bne.n	8004c34 <_printf_common+0xc8>
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	e010      	b.n	8004c18 <_printf_common+0xac>
 8004bf6:	3501      	adds	r5, #1
 8004bf8:	68e3      	ldr	r3, [r4, #12]
 8004bfa:	6832      	ldr	r2, [r6, #0]
 8004bfc:	1a9b      	subs	r3, r3, r2
 8004bfe:	42ab      	cmp	r3, r5
 8004c00:	ddd2      	ble.n	8004ba8 <_printf_common+0x3c>
 8004c02:	0022      	movs	r2, r4
 8004c04:	2301      	movs	r3, #1
 8004c06:	9901      	ldr	r1, [sp, #4]
 8004c08:	9800      	ldr	r0, [sp, #0]
 8004c0a:	9f08      	ldr	r7, [sp, #32]
 8004c0c:	3219      	adds	r2, #25
 8004c0e:	47b8      	blx	r7
 8004c10:	3001      	adds	r0, #1
 8004c12:	d1f0      	bne.n	8004bf6 <_printf_common+0x8a>
 8004c14:	2001      	movs	r0, #1
 8004c16:	4240      	negs	r0, r0
 8004c18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c1a:	2030      	movs	r0, #48	; 0x30
 8004c1c:	18e1      	adds	r1, r4, r3
 8004c1e:	3143      	adds	r1, #67	; 0x43
 8004c20:	7008      	strb	r0, [r1, #0]
 8004c22:	0021      	movs	r1, r4
 8004c24:	1c5a      	adds	r2, r3, #1
 8004c26:	3145      	adds	r1, #69	; 0x45
 8004c28:	7809      	ldrb	r1, [r1, #0]
 8004c2a:	18a2      	adds	r2, r4, r2
 8004c2c:	3243      	adds	r2, #67	; 0x43
 8004c2e:	3302      	adds	r3, #2
 8004c30:	7011      	strb	r1, [r2, #0]
 8004c32:	e7c1      	b.n	8004bb8 <_printf_common+0x4c>
 8004c34:	0022      	movs	r2, r4
 8004c36:	2301      	movs	r3, #1
 8004c38:	9901      	ldr	r1, [sp, #4]
 8004c3a:	9800      	ldr	r0, [sp, #0]
 8004c3c:	9f08      	ldr	r7, [sp, #32]
 8004c3e:	321a      	adds	r2, #26
 8004c40:	47b8      	blx	r7
 8004c42:	3001      	adds	r0, #1
 8004c44:	d0e6      	beq.n	8004c14 <_printf_common+0xa8>
 8004c46:	3601      	adds	r6, #1
 8004c48:	e7d1      	b.n	8004bee <_printf_common+0x82>
	...

08004c4c <_printf_i>:
 8004c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c4e:	b08b      	sub	sp, #44	; 0x2c
 8004c50:	9206      	str	r2, [sp, #24]
 8004c52:	000a      	movs	r2, r1
 8004c54:	3243      	adds	r2, #67	; 0x43
 8004c56:	9307      	str	r3, [sp, #28]
 8004c58:	9005      	str	r0, [sp, #20]
 8004c5a:	9204      	str	r2, [sp, #16]
 8004c5c:	7e0a      	ldrb	r2, [r1, #24]
 8004c5e:	000c      	movs	r4, r1
 8004c60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c62:	2a78      	cmp	r2, #120	; 0x78
 8004c64:	d809      	bhi.n	8004c7a <_printf_i+0x2e>
 8004c66:	2a62      	cmp	r2, #98	; 0x62
 8004c68:	d80b      	bhi.n	8004c82 <_printf_i+0x36>
 8004c6a:	2a00      	cmp	r2, #0
 8004c6c:	d100      	bne.n	8004c70 <_printf_i+0x24>
 8004c6e:	e0be      	b.n	8004dee <_printf_i+0x1a2>
 8004c70:	497c      	ldr	r1, [pc, #496]	; (8004e64 <_printf_i+0x218>)
 8004c72:	9103      	str	r1, [sp, #12]
 8004c74:	2a58      	cmp	r2, #88	; 0x58
 8004c76:	d100      	bne.n	8004c7a <_printf_i+0x2e>
 8004c78:	e093      	b.n	8004da2 <_printf_i+0x156>
 8004c7a:	0026      	movs	r6, r4
 8004c7c:	3642      	adds	r6, #66	; 0x42
 8004c7e:	7032      	strb	r2, [r6, #0]
 8004c80:	e022      	b.n	8004cc8 <_printf_i+0x7c>
 8004c82:	0010      	movs	r0, r2
 8004c84:	3863      	subs	r0, #99	; 0x63
 8004c86:	2815      	cmp	r0, #21
 8004c88:	d8f7      	bhi.n	8004c7a <_printf_i+0x2e>
 8004c8a:	f7fb fa3d 	bl	8000108 <__gnu_thumb1_case_shi>
 8004c8e:	0016      	.short	0x0016
 8004c90:	fff6001f 	.word	0xfff6001f
 8004c94:	fff6fff6 	.word	0xfff6fff6
 8004c98:	001ffff6 	.word	0x001ffff6
 8004c9c:	fff6fff6 	.word	0xfff6fff6
 8004ca0:	fff6fff6 	.word	0xfff6fff6
 8004ca4:	003600a3 	.word	0x003600a3
 8004ca8:	fff60083 	.word	0xfff60083
 8004cac:	00b4fff6 	.word	0x00b4fff6
 8004cb0:	0036fff6 	.word	0x0036fff6
 8004cb4:	fff6fff6 	.word	0xfff6fff6
 8004cb8:	0087      	.short	0x0087
 8004cba:	0026      	movs	r6, r4
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	3642      	adds	r6, #66	; 0x42
 8004cc0:	1d11      	adds	r1, r2, #4
 8004cc2:	6019      	str	r1, [r3, #0]
 8004cc4:	6813      	ldr	r3, [r2, #0]
 8004cc6:	7033      	strb	r3, [r6, #0]
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e0a2      	b.n	8004e12 <_printf_i+0x1c6>
 8004ccc:	6818      	ldr	r0, [r3, #0]
 8004cce:	6809      	ldr	r1, [r1, #0]
 8004cd0:	1d02      	adds	r2, r0, #4
 8004cd2:	060d      	lsls	r5, r1, #24
 8004cd4:	d50b      	bpl.n	8004cee <_printf_i+0xa2>
 8004cd6:	6805      	ldr	r5, [r0, #0]
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	2d00      	cmp	r5, #0
 8004cdc:	da03      	bge.n	8004ce6 <_printf_i+0x9a>
 8004cde:	232d      	movs	r3, #45	; 0x2d
 8004ce0:	9a04      	ldr	r2, [sp, #16]
 8004ce2:	426d      	negs	r5, r5
 8004ce4:	7013      	strb	r3, [r2, #0]
 8004ce6:	4b5f      	ldr	r3, [pc, #380]	; (8004e64 <_printf_i+0x218>)
 8004ce8:	270a      	movs	r7, #10
 8004cea:	9303      	str	r3, [sp, #12]
 8004cec:	e01b      	b.n	8004d26 <_printf_i+0xda>
 8004cee:	6805      	ldr	r5, [r0, #0]
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	0649      	lsls	r1, r1, #25
 8004cf4:	d5f1      	bpl.n	8004cda <_printf_i+0x8e>
 8004cf6:	b22d      	sxth	r5, r5
 8004cf8:	e7ef      	b.n	8004cda <_printf_i+0x8e>
 8004cfa:	680d      	ldr	r5, [r1, #0]
 8004cfc:	6819      	ldr	r1, [r3, #0]
 8004cfe:	1d08      	adds	r0, r1, #4
 8004d00:	6018      	str	r0, [r3, #0]
 8004d02:	062e      	lsls	r6, r5, #24
 8004d04:	d501      	bpl.n	8004d0a <_printf_i+0xbe>
 8004d06:	680d      	ldr	r5, [r1, #0]
 8004d08:	e003      	b.n	8004d12 <_printf_i+0xc6>
 8004d0a:	066d      	lsls	r5, r5, #25
 8004d0c:	d5fb      	bpl.n	8004d06 <_printf_i+0xba>
 8004d0e:	680d      	ldr	r5, [r1, #0]
 8004d10:	b2ad      	uxth	r5, r5
 8004d12:	4b54      	ldr	r3, [pc, #336]	; (8004e64 <_printf_i+0x218>)
 8004d14:	2708      	movs	r7, #8
 8004d16:	9303      	str	r3, [sp, #12]
 8004d18:	2a6f      	cmp	r2, #111	; 0x6f
 8004d1a:	d000      	beq.n	8004d1e <_printf_i+0xd2>
 8004d1c:	3702      	adds	r7, #2
 8004d1e:	0023      	movs	r3, r4
 8004d20:	2200      	movs	r2, #0
 8004d22:	3343      	adds	r3, #67	; 0x43
 8004d24:	701a      	strb	r2, [r3, #0]
 8004d26:	6863      	ldr	r3, [r4, #4]
 8004d28:	60a3      	str	r3, [r4, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	db03      	blt.n	8004d36 <_printf_i+0xea>
 8004d2e:	2104      	movs	r1, #4
 8004d30:	6822      	ldr	r2, [r4, #0]
 8004d32:	438a      	bics	r2, r1
 8004d34:	6022      	str	r2, [r4, #0]
 8004d36:	2d00      	cmp	r5, #0
 8004d38:	d102      	bne.n	8004d40 <_printf_i+0xf4>
 8004d3a:	9e04      	ldr	r6, [sp, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00c      	beq.n	8004d5a <_printf_i+0x10e>
 8004d40:	9e04      	ldr	r6, [sp, #16]
 8004d42:	0028      	movs	r0, r5
 8004d44:	0039      	movs	r1, r7
 8004d46:	f7fb fa6f 	bl	8000228 <__aeabi_uidivmod>
 8004d4a:	9b03      	ldr	r3, [sp, #12]
 8004d4c:	3e01      	subs	r6, #1
 8004d4e:	5c5b      	ldrb	r3, [r3, r1]
 8004d50:	7033      	strb	r3, [r6, #0]
 8004d52:	002b      	movs	r3, r5
 8004d54:	0005      	movs	r5, r0
 8004d56:	429f      	cmp	r7, r3
 8004d58:	d9f3      	bls.n	8004d42 <_printf_i+0xf6>
 8004d5a:	2f08      	cmp	r7, #8
 8004d5c:	d109      	bne.n	8004d72 <_printf_i+0x126>
 8004d5e:	6823      	ldr	r3, [r4, #0]
 8004d60:	07db      	lsls	r3, r3, #31
 8004d62:	d506      	bpl.n	8004d72 <_printf_i+0x126>
 8004d64:	6862      	ldr	r2, [r4, #4]
 8004d66:	6923      	ldr	r3, [r4, #16]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	dc02      	bgt.n	8004d72 <_printf_i+0x126>
 8004d6c:	2330      	movs	r3, #48	; 0x30
 8004d6e:	3e01      	subs	r6, #1
 8004d70:	7033      	strb	r3, [r6, #0]
 8004d72:	9b04      	ldr	r3, [sp, #16]
 8004d74:	1b9b      	subs	r3, r3, r6
 8004d76:	6123      	str	r3, [r4, #16]
 8004d78:	9b07      	ldr	r3, [sp, #28]
 8004d7a:	0021      	movs	r1, r4
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	9805      	ldr	r0, [sp, #20]
 8004d80:	9b06      	ldr	r3, [sp, #24]
 8004d82:	aa09      	add	r2, sp, #36	; 0x24
 8004d84:	f7ff fef2 	bl	8004b6c <_printf_common>
 8004d88:	3001      	adds	r0, #1
 8004d8a:	d147      	bne.n	8004e1c <_printf_i+0x1d0>
 8004d8c:	2001      	movs	r0, #1
 8004d8e:	4240      	negs	r0, r0
 8004d90:	b00b      	add	sp, #44	; 0x2c
 8004d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d94:	2220      	movs	r2, #32
 8004d96:	6809      	ldr	r1, [r1, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	6022      	str	r2, [r4, #0]
 8004d9c:	2278      	movs	r2, #120	; 0x78
 8004d9e:	4932      	ldr	r1, [pc, #200]	; (8004e68 <_printf_i+0x21c>)
 8004da0:	9103      	str	r1, [sp, #12]
 8004da2:	0021      	movs	r1, r4
 8004da4:	3145      	adds	r1, #69	; 0x45
 8004da6:	700a      	strb	r2, [r1, #0]
 8004da8:	6819      	ldr	r1, [r3, #0]
 8004daa:	6822      	ldr	r2, [r4, #0]
 8004dac:	c920      	ldmia	r1!, {r5}
 8004dae:	0610      	lsls	r0, r2, #24
 8004db0:	d402      	bmi.n	8004db8 <_printf_i+0x16c>
 8004db2:	0650      	lsls	r0, r2, #25
 8004db4:	d500      	bpl.n	8004db8 <_printf_i+0x16c>
 8004db6:	b2ad      	uxth	r5, r5
 8004db8:	6019      	str	r1, [r3, #0]
 8004dba:	07d3      	lsls	r3, r2, #31
 8004dbc:	d502      	bpl.n	8004dc4 <_printf_i+0x178>
 8004dbe:	2320      	movs	r3, #32
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	6023      	str	r3, [r4, #0]
 8004dc4:	2710      	movs	r7, #16
 8004dc6:	2d00      	cmp	r5, #0
 8004dc8:	d1a9      	bne.n	8004d1e <_printf_i+0xd2>
 8004dca:	2220      	movs	r2, #32
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	4393      	bics	r3, r2
 8004dd0:	6023      	str	r3, [r4, #0]
 8004dd2:	e7a4      	b.n	8004d1e <_printf_i+0xd2>
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	680d      	ldr	r5, [r1, #0]
 8004dd8:	1d10      	adds	r0, r2, #4
 8004dda:	6949      	ldr	r1, [r1, #20]
 8004ddc:	6018      	str	r0, [r3, #0]
 8004dde:	6813      	ldr	r3, [r2, #0]
 8004de0:	062e      	lsls	r6, r5, #24
 8004de2:	d501      	bpl.n	8004de8 <_printf_i+0x19c>
 8004de4:	6019      	str	r1, [r3, #0]
 8004de6:	e002      	b.n	8004dee <_printf_i+0x1a2>
 8004de8:	066d      	lsls	r5, r5, #25
 8004dea:	d5fb      	bpl.n	8004de4 <_printf_i+0x198>
 8004dec:	8019      	strh	r1, [r3, #0]
 8004dee:	2300      	movs	r3, #0
 8004df0:	9e04      	ldr	r6, [sp, #16]
 8004df2:	6123      	str	r3, [r4, #16]
 8004df4:	e7c0      	b.n	8004d78 <_printf_i+0x12c>
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	1d11      	adds	r1, r2, #4
 8004dfa:	6019      	str	r1, [r3, #0]
 8004dfc:	6816      	ldr	r6, [r2, #0]
 8004dfe:	2100      	movs	r1, #0
 8004e00:	0030      	movs	r0, r6
 8004e02:	6862      	ldr	r2, [r4, #4]
 8004e04:	f000 f922 	bl	800504c <memchr>
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	d001      	beq.n	8004e10 <_printf_i+0x1c4>
 8004e0c:	1b80      	subs	r0, r0, r6
 8004e0e:	6060      	str	r0, [r4, #4]
 8004e10:	6863      	ldr	r3, [r4, #4]
 8004e12:	6123      	str	r3, [r4, #16]
 8004e14:	2300      	movs	r3, #0
 8004e16:	9a04      	ldr	r2, [sp, #16]
 8004e18:	7013      	strb	r3, [r2, #0]
 8004e1a:	e7ad      	b.n	8004d78 <_printf_i+0x12c>
 8004e1c:	0032      	movs	r2, r6
 8004e1e:	6923      	ldr	r3, [r4, #16]
 8004e20:	9906      	ldr	r1, [sp, #24]
 8004e22:	9805      	ldr	r0, [sp, #20]
 8004e24:	9d07      	ldr	r5, [sp, #28]
 8004e26:	47a8      	blx	r5
 8004e28:	3001      	adds	r0, #1
 8004e2a:	d0af      	beq.n	8004d8c <_printf_i+0x140>
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	079b      	lsls	r3, r3, #30
 8004e30:	d415      	bmi.n	8004e5e <_printf_i+0x212>
 8004e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e34:	68e0      	ldr	r0, [r4, #12]
 8004e36:	4298      	cmp	r0, r3
 8004e38:	daaa      	bge.n	8004d90 <_printf_i+0x144>
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	e7a8      	b.n	8004d90 <_printf_i+0x144>
 8004e3e:	0022      	movs	r2, r4
 8004e40:	2301      	movs	r3, #1
 8004e42:	9906      	ldr	r1, [sp, #24]
 8004e44:	9805      	ldr	r0, [sp, #20]
 8004e46:	9e07      	ldr	r6, [sp, #28]
 8004e48:	3219      	adds	r2, #25
 8004e4a:	47b0      	blx	r6
 8004e4c:	3001      	adds	r0, #1
 8004e4e:	d09d      	beq.n	8004d8c <_printf_i+0x140>
 8004e50:	3501      	adds	r5, #1
 8004e52:	68e3      	ldr	r3, [r4, #12]
 8004e54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e56:	1a9b      	subs	r3, r3, r2
 8004e58:	42ab      	cmp	r3, r5
 8004e5a:	dcf0      	bgt.n	8004e3e <_printf_i+0x1f2>
 8004e5c:	e7e9      	b.n	8004e32 <_printf_i+0x1e6>
 8004e5e:	2500      	movs	r5, #0
 8004e60:	e7f7      	b.n	8004e52 <_printf_i+0x206>
 8004e62:	46c0      	nop			; (mov r8, r8)
 8004e64:	08005284 	.word	0x08005284
 8004e68:	08005295 	.word	0x08005295

08004e6c <__swbuf_r>:
 8004e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6e:	0006      	movs	r6, r0
 8004e70:	000d      	movs	r5, r1
 8004e72:	0014      	movs	r4, r2
 8004e74:	2800      	cmp	r0, #0
 8004e76:	d004      	beq.n	8004e82 <__swbuf_r+0x16>
 8004e78:	6a03      	ldr	r3, [r0, #32]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <__swbuf_r+0x16>
 8004e7e:	f7ff fa29 	bl	80042d4 <__sinit>
 8004e82:	69a3      	ldr	r3, [r4, #24]
 8004e84:	60a3      	str	r3, [r4, #8]
 8004e86:	89a3      	ldrh	r3, [r4, #12]
 8004e88:	071b      	lsls	r3, r3, #28
 8004e8a:	d528      	bpl.n	8004ede <__swbuf_r+0x72>
 8004e8c:	6923      	ldr	r3, [r4, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d025      	beq.n	8004ede <__swbuf_r+0x72>
 8004e92:	6923      	ldr	r3, [r4, #16]
 8004e94:	6820      	ldr	r0, [r4, #0]
 8004e96:	b2ef      	uxtb	r7, r5
 8004e98:	1ac0      	subs	r0, r0, r3
 8004e9a:	6963      	ldr	r3, [r4, #20]
 8004e9c:	b2ed      	uxtb	r5, r5
 8004e9e:	4283      	cmp	r3, r0
 8004ea0:	dc05      	bgt.n	8004eae <__swbuf_r+0x42>
 8004ea2:	0021      	movs	r1, r4
 8004ea4:	0030      	movs	r0, r6
 8004ea6:	f7ff fcc9 	bl	800483c <_fflush_r>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	d11d      	bne.n	8004eea <__swbuf_r+0x7e>
 8004eae:	68a3      	ldr	r3, [r4, #8]
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	60a3      	str	r3, [r4, #8]
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	6022      	str	r2, [r4, #0]
 8004ebc:	701f      	strb	r7, [r3, #0]
 8004ebe:	6963      	ldr	r3, [r4, #20]
 8004ec0:	4283      	cmp	r3, r0
 8004ec2:	d004      	beq.n	8004ece <__swbuf_r+0x62>
 8004ec4:	89a3      	ldrh	r3, [r4, #12]
 8004ec6:	07db      	lsls	r3, r3, #31
 8004ec8:	d507      	bpl.n	8004eda <__swbuf_r+0x6e>
 8004eca:	2d0a      	cmp	r5, #10
 8004ecc:	d105      	bne.n	8004eda <__swbuf_r+0x6e>
 8004ece:	0021      	movs	r1, r4
 8004ed0:	0030      	movs	r0, r6
 8004ed2:	f7ff fcb3 	bl	800483c <_fflush_r>
 8004ed6:	2800      	cmp	r0, #0
 8004ed8:	d107      	bne.n	8004eea <__swbuf_r+0x7e>
 8004eda:	0028      	movs	r0, r5
 8004edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ede:	0021      	movs	r1, r4
 8004ee0:	0030      	movs	r0, r6
 8004ee2:	f000 f805 	bl	8004ef0 <__swsetup_r>
 8004ee6:	2800      	cmp	r0, #0
 8004ee8:	d0d3      	beq.n	8004e92 <__swbuf_r+0x26>
 8004eea:	2501      	movs	r5, #1
 8004eec:	426d      	negs	r5, r5
 8004eee:	e7f4      	b.n	8004eda <__swbuf_r+0x6e>

08004ef0 <__swsetup_r>:
 8004ef0:	4b30      	ldr	r3, [pc, #192]	; (8004fb4 <__swsetup_r+0xc4>)
 8004ef2:	b570      	push	{r4, r5, r6, lr}
 8004ef4:	0005      	movs	r5, r0
 8004ef6:	6818      	ldr	r0, [r3, #0]
 8004ef8:	000c      	movs	r4, r1
 8004efa:	2800      	cmp	r0, #0
 8004efc:	d004      	beq.n	8004f08 <__swsetup_r+0x18>
 8004efe:	6a03      	ldr	r3, [r0, #32]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <__swsetup_r+0x18>
 8004f04:	f7ff f9e6 	bl	80042d4 <__sinit>
 8004f08:	230c      	movs	r3, #12
 8004f0a:	5ee2      	ldrsh	r2, [r4, r3]
 8004f0c:	b293      	uxth	r3, r2
 8004f0e:	0711      	lsls	r1, r2, #28
 8004f10:	d423      	bmi.n	8004f5a <__swsetup_r+0x6a>
 8004f12:	06d9      	lsls	r1, r3, #27
 8004f14:	d407      	bmi.n	8004f26 <__swsetup_r+0x36>
 8004f16:	2309      	movs	r3, #9
 8004f18:	2001      	movs	r0, #1
 8004f1a:	602b      	str	r3, [r5, #0]
 8004f1c:	3337      	adds	r3, #55	; 0x37
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	81a3      	strh	r3, [r4, #12]
 8004f22:	4240      	negs	r0, r0
 8004f24:	bd70      	pop	{r4, r5, r6, pc}
 8004f26:	075b      	lsls	r3, r3, #29
 8004f28:	d513      	bpl.n	8004f52 <__swsetup_r+0x62>
 8004f2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f2c:	2900      	cmp	r1, #0
 8004f2e:	d008      	beq.n	8004f42 <__swsetup_r+0x52>
 8004f30:	0023      	movs	r3, r4
 8004f32:	3344      	adds	r3, #68	; 0x44
 8004f34:	4299      	cmp	r1, r3
 8004f36:	d002      	beq.n	8004f3e <__swsetup_r+0x4e>
 8004f38:	0028      	movs	r0, r5
 8004f3a:	f7ff faed 	bl	8004518 <_free_r>
 8004f3e:	2300      	movs	r3, #0
 8004f40:	6363      	str	r3, [r4, #52]	; 0x34
 8004f42:	2224      	movs	r2, #36	; 0x24
 8004f44:	89a3      	ldrh	r3, [r4, #12]
 8004f46:	4393      	bics	r3, r2
 8004f48:	81a3      	strh	r3, [r4, #12]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	6063      	str	r3, [r4, #4]
 8004f4e:	6923      	ldr	r3, [r4, #16]
 8004f50:	6023      	str	r3, [r4, #0]
 8004f52:	2308      	movs	r3, #8
 8004f54:	89a2      	ldrh	r2, [r4, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	81a3      	strh	r3, [r4, #12]
 8004f5a:	6923      	ldr	r3, [r4, #16]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10b      	bne.n	8004f78 <__swsetup_r+0x88>
 8004f60:	21a0      	movs	r1, #160	; 0xa0
 8004f62:	2280      	movs	r2, #128	; 0x80
 8004f64:	89a3      	ldrh	r3, [r4, #12]
 8004f66:	0089      	lsls	r1, r1, #2
 8004f68:	0092      	lsls	r2, r2, #2
 8004f6a:	400b      	ands	r3, r1
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d003      	beq.n	8004f78 <__swsetup_r+0x88>
 8004f70:	0021      	movs	r1, r4
 8004f72:	0028      	movs	r0, r5
 8004f74:	f000 f89e 	bl	80050b4 <__smakebuf_r>
 8004f78:	220c      	movs	r2, #12
 8004f7a:	5ea3      	ldrsh	r3, [r4, r2]
 8004f7c:	2001      	movs	r0, #1
 8004f7e:	001a      	movs	r2, r3
 8004f80:	b299      	uxth	r1, r3
 8004f82:	4002      	ands	r2, r0
 8004f84:	4203      	tst	r3, r0
 8004f86:	d00f      	beq.n	8004fa8 <__swsetup_r+0xb8>
 8004f88:	2200      	movs	r2, #0
 8004f8a:	60a2      	str	r2, [r4, #8]
 8004f8c:	6962      	ldr	r2, [r4, #20]
 8004f8e:	4252      	negs	r2, r2
 8004f90:	61a2      	str	r2, [r4, #24]
 8004f92:	2000      	movs	r0, #0
 8004f94:	6922      	ldr	r2, [r4, #16]
 8004f96:	4282      	cmp	r2, r0
 8004f98:	d1c4      	bne.n	8004f24 <__swsetup_r+0x34>
 8004f9a:	0609      	lsls	r1, r1, #24
 8004f9c:	d5c2      	bpl.n	8004f24 <__swsetup_r+0x34>
 8004f9e:	2240      	movs	r2, #64	; 0x40
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	81a3      	strh	r3, [r4, #12]
 8004fa4:	3801      	subs	r0, #1
 8004fa6:	e7bd      	b.n	8004f24 <__swsetup_r+0x34>
 8004fa8:	0788      	lsls	r0, r1, #30
 8004faa:	d400      	bmi.n	8004fae <__swsetup_r+0xbe>
 8004fac:	6962      	ldr	r2, [r4, #20]
 8004fae:	60a2      	str	r2, [r4, #8]
 8004fb0:	e7ef      	b.n	8004f92 <__swsetup_r+0xa2>
 8004fb2:	46c0      	nop			; (mov r8, r8)
 8004fb4:	20000064 	.word	0x20000064

08004fb8 <_raise_r>:
 8004fb8:	b570      	push	{r4, r5, r6, lr}
 8004fba:	0004      	movs	r4, r0
 8004fbc:	000d      	movs	r5, r1
 8004fbe:	291f      	cmp	r1, #31
 8004fc0:	d904      	bls.n	8004fcc <_raise_r+0x14>
 8004fc2:	2316      	movs	r3, #22
 8004fc4:	6003      	str	r3, [r0, #0]
 8004fc6:	2001      	movs	r0, #1
 8004fc8:	4240      	negs	r0, r0
 8004fca:	bd70      	pop	{r4, r5, r6, pc}
 8004fcc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d004      	beq.n	8004fdc <_raise_r+0x24>
 8004fd2:	008a      	lsls	r2, r1, #2
 8004fd4:	189b      	adds	r3, r3, r2
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	2a00      	cmp	r2, #0
 8004fda:	d108      	bne.n	8004fee <_raise_r+0x36>
 8004fdc:	0020      	movs	r0, r4
 8004fde:	f000 f831 	bl	8005044 <_getpid_r>
 8004fe2:	002a      	movs	r2, r5
 8004fe4:	0001      	movs	r1, r0
 8004fe6:	0020      	movs	r0, r4
 8004fe8:	f000 f81a 	bl	8005020 <_kill_r>
 8004fec:	e7ed      	b.n	8004fca <_raise_r+0x12>
 8004fee:	2000      	movs	r0, #0
 8004ff0:	2a01      	cmp	r2, #1
 8004ff2:	d0ea      	beq.n	8004fca <_raise_r+0x12>
 8004ff4:	1c51      	adds	r1, r2, #1
 8004ff6:	d103      	bne.n	8005000 <_raise_r+0x48>
 8004ff8:	2316      	movs	r3, #22
 8004ffa:	3001      	adds	r0, #1
 8004ffc:	6023      	str	r3, [r4, #0]
 8004ffe:	e7e4      	b.n	8004fca <_raise_r+0x12>
 8005000:	2400      	movs	r4, #0
 8005002:	0028      	movs	r0, r5
 8005004:	601c      	str	r4, [r3, #0]
 8005006:	4790      	blx	r2
 8005008:	0020      	movs	r0, r4
 800500a:	e7de      	b.n	8004fca <_raise_r+0x12>

0800500c <raise>:
 800500c:	b510      	push	{r4, lr}
 800500e:	4b03      	ldr	r3, [pc, #12]	; (800501c <raise+0x10>)
 8005010:	0001      	movs	r1, r0
 8005012:	6818      	ldr	r0, [r3, #0]
 8005014:	f7ff ffd0 	bl	8004fb8 <_raise_r>
 8005018:	bd10      	pop	{r4, pc}
 800501a:	46c0      	nop			; (mov r8, r8)
 800501c:	20000064 	.word	0x20000064

08005020 <_kill_r>:
 8005020:	2300      	movs	r3, #0
 8005022:	b570      	push	{r4, r5, r6, lr}
 8005024:	4d06      	ldr	r5, [pc, #24]	; (8005040 <_kill_r+0x20>)
 8005026:	0004      	movs	r4, r0
 8005028:	0008      	movs	r0, r1
 800502a:	0011      	movs	r1, r2
 800502c:	602b      	str	r3, [r5, #0]
 800502e:	f7fb fdd3 	bl	8000bd8 <_kill>
 8005032:	1c43      	adds	r3, r0, #1
 8005034:	d103      	bne.n	800503e <_kill_r+0x1e>
 8005036:	682b      	ldr	r3, [r5, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d000      	beq.n	800503e <_kill_r+0x1e>
 800503c:	6023      	str	r3, [r4, #0]
 800503e:	bd70      	pop	{r4, r5, r6, pc}
 8005040:	200003e4 	.word	0x200003e4

08005044 <_getpid_r>:
 8005044:	b510      	push	{r4, lr}
 8005046:	f7fb fdc1 	bl	8000bcc <_getpid>
 800504a:	bd10      	pop	{r4, pc}

0800504c <memchr>:
 800504c:	b2c9      	uxtb	r1, r1
 800504e:	1882      	adds	r2, r0, r2
 8005050:	4290      	cmp	r0, r2
 8005052:	d101      	bne.n	8005058 <memchr+0xc>
 8005054:	2000      	movs	r0, #0
 8005056:	4770      	bx	lr
 8005058:	7803      	ldrb	r3, [r0, #0]
 800505a:	428b      	cmp	r3, r1
 800505c:	d0fb      	beq.n	8005056 <memchr+0xa>
 800505e:	3001      	adds	r0, #1
 8005060:	e7f6      	b.n	8005050 <memchr+0x4>
	...

08005064 <__swhatbuf_r>:
 8005064:	b570      	push	{r4, r5, r6, lr}
 8005066:	000e      	movs	r6, r1
 8005068:	001d      	movs	r5, r3
 800506a:	230e      	movs	r3, #14
 800506c:	5ec9      	ldrsh	r1, [r1, r3]
 800506e:	0014      	movs	r4, r2
 8005070:	b096      	sub	sp, #88	; 0x58
 8005072:	2900      	cmp	r1, #0
 8005074:	da0c      	bge.n	8005090 <__swhatbuf_r+0x2c>
 8005076:	89b2      	ldrh	r2, [r6, #12]
 8005078:	2380      	movs	r3, #128	; 0x80
 800507a:	0011      	movs	r1, r2
 800507c:	4019      	ands	r1, r3
 800507e:	421a      	tst	r2, r3
 8005080:	d013      	beq.n	80050aa <__swhatbuf_r+0x46>
 8005082:	2100      	movs	r1, #0
 8005084:	3b40      	subs	r3, #64	; 0x40
 8005086:	2000      	movs	r0, #0
 8005088:	6029      	str	r1, [r5, #0]
 800508a:	6023      	str	r3, [r4, #0]
 800508c:	b016      	add	sp, #88	; 0x58
 800508e:	bd70      	pop	{r4, r5, r6, pc}
 8005090:	466a      	mov	r2, sp
 8005092:	f000 f84d 	bl	8005130 <_fstat_r>
 8005096:	2800      	cmp	r0, #0
 8005098:	dbed      	blt.n	8005076 <__swhatbuf_r+0x12>
 800509a:	23f0      	movs	r3, #240	; 0xf0
 800509c:	9901      	ldr	r1, [sp, #4]
 800509e:	021b      	lsls	r3, r3, #8
 80050a0:	4019      	ands	r1, r3
 80050a2:	4b03      	ldr	r3, [pc, #12]	; (80050b0 <__swhatbuf_r+0x4c>)
 80050a4:	18c9      	adds	r1, r1, r3
 80050a6:	424b      	negs	r3, r1
 80050a8:	4159      	adcs	r1, r3
 80050aa:	2380      	movs	r3, #128	; 0x80
 80050ac:	00db      	lsls	r3, r3, #3
 80050ae:	e7ea      	b.n	8005086 <__swhatbuf_r+0x22>
 80050b0:	ffffe000 	.word	0xffffe000

080050b4 <__smakebuf_r>:
 80050b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050b6:	2602      	movs	r6, #2
 80050b8:	898b      	ldrh	r3, [r1, #12]
 80050ba:	0005      	movs	r5, r0
 80050bc:	000c      	movs	r4, r1
 80050be:	4233      	tst	r3, r6
 80050c0:	d006      	beq.n	80050d0 <__smakebuf_r+0x1c>
 80050c2:	0023      	movs	r3, r4
 80050c4:	3347      	adds	r3, #71	; 0x47
 80050c6:	6023      	str	r3, [r4, #0]
 80050c8:	6123      	str	r3, [r4, #16]
 80050ca:	2301      	movs	r3, #1
 80050cc:	6163      	str	r3, [r4, #20]
 80050ce:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80050d0:	466a      	mov	r2, sp
 80050d2:	ab01      	add	r3, sp, #4
 80050d4:	f7ff ffc6 	bl	8005064 <__swhatbuf_r>
 80050d8:	9900      	ldr	r1, [sp, #0]
 80050da:	0007      	movs	r7, r0
 80050dc:	0028      	movs	r0, r5
 80050de:	f7ff fa91 	bl	8004604 <_malloc_r>
 80050e2:	2800      	cmp	r0, #0
 80050e4:	d108      	bne.n	80050f8 <__smakebuf_r+0x44>
 80050e6:	220c      	movs	r2, #12
 80050e8:	5ea3      	ldrsh	r3, [r4, r2]
 80050ea:	059a      	lsls	r2, r3, #22
 80050ec:	d4ef      	bmi.n	80050ce <__smakebuf_r+0x1a>
 80050ee:	2203      	movs	r2, #3
 80050f0:	4393      	bics	r3, r2
 80050f2:	431e      	orrs	r6, r3
 80050f4:	81a6      	strh	r6, [r4, #12]
 80050f6:	e7e4      	b.n	80050c2 <__smakebuf_r+0xe>
 80050f8:	2380      	movs	r3, #128	; 0x80
 80050fa:	89a2      	ldrh	r2, [r4, #12]
 80050fc:	6020      	str	r0, [r4, #0]
 80050fe:	4313      	orrs	r3, r2
 8005100:	81a3      	strh	r3, [r4, #12]
 8005102:	9b00      	ldr	r3, [sp, #0]
 8005104:	6120      	str	r0, [r4, #16]
 8005106:	6163      	str	r3, [r4, #20]
 8005108:	9b01      	ldr	r3, [sp, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00c      	beq.n	8005128 <__smakebuf_r+0x74>
 800510e:	0028      	movs	r0, r5
 8005110:	230e      	movs	r3, #14
 8005112:	5ee1      	ldrsh	r1, [r4, r3]
 8005114:	f000 f81e 	bl	8005154 <_isatty_r>
 8005118:	2800      	cmp	r0, #0
 800511a:	d005      	beq.n	8005128 <__smakebuf_r+0x74>
 800511c:	2303      	movs	r3, #3
 800511e:	89a2      	ldrh	r2, [r4, #12]
 8005120:	439a      	bics	r2, r3
 8005122:	3b02      	subs	r3, #2
 8005124:	4313      	orrs	r3, r2
 8005126:	81a3      	strh	r3, [r4, #12]
 8005128:	89a3      	ldrh	r3, [r4, #12]
 800512a:	433b      	orrs	r3, r7
 800512c:	81a3      	strh	r3, [r4, #12]
 800512e:	e7ce      	b.n	80050ce <__smakebuf_r+0x1a>

08005130 <_fstat_r>:
 8005130:	2300      	movs	r3, #0
 8005132:	b570      	push	{r4, r5, r6, lr}
 8005134:	4d06      	ldr	r5, [pc, #24]	; (8005150 <_fstat_r+0x20>)
 8005136:	0004      	movs	r4, r0
 8005138:	0008      	movs	r0, r1
 800513a:	0011      	movs	r1, r2
 800513c:	602b      	str	r3, [r5, #0]
 800513e:	f7fb fdaa 	bl	8000c96 <_fstat>
 8005142:	1c43      	adds	r3, r0, #1
 8005144:	d103      	bne.n	800514e <_fstat_r+0x1e>
 8005146:	682b      	ldr	r3, [r5, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d000      	beq.n	800514e <_fstat_r+0x1e>
 800514c:	6023      	str	r3, [r4, #0]
 800514e:	bd70      	pop	{r4, r5, r6, pc}
 8005150:	200003e4 	.word	0x200003e4

08005154 <_isatty_r>:
 8005154:	2300      	movs	r3, #0
 8005156:	b570      	push	{r4, r5, r6, lr}
 8005158:	4d06      	ldr	r5, [pc, #24]	; (8005174 <_isatty_r+0x20>)
 800515a:	0004      	movs	r4, r0
 800515c:	0008      	movs	r0, r1
 800515e:	602b      	str	r3, [r5, #0]
 8005160:	f7fb fda7 	bl	8000cb2 <_isatty>
 8005164:	1c43      	adds	r3, r0, #1
 8005166:	d103      	bne.n	8005170 <_isatty_r+0x1c>
 8005168:	682b      	ldr	r3, [r5, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d000      	beq.n	8005170 <_isatty_r+0x1c>
 800516e:	6023      	str	r3, [r4, #0]
 8005170:	bd70      	pop	{r4, r5, r6, pc}
 8005172:	46c0      	nop			; (mov r8, r8)
 8005174:	200003e4 	.word	0x200003e4

08005178 <_init>:
 8005178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517a:	46c0      	nop			; (mov r8, r8)
 800517c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800517e:	bc08      	pop	{r3}
 8005180:	469e      	mov	lr, r3
 8005182:	4770      	bx	lr

08005184 <_fini>:
 8005184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005186:	46c0      	nop			; (mov r8, r8)
 8005188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800518a:	bc08      	pop	{r3}
 800518c:	469e      	mov	lr, r3
 800518e:	4770      	bx	lr
